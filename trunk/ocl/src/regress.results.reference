System property tudresden.ocl.expressionFile not specified, using default (file:/home/wiera/oclcvs/src/tudresden/ocl/test/oclexpressions)
System property tudresden.ocl.reflectionExpressionFile not specified, using default (file:/home/wiera/oclcvs/src/tudresden/ocl/test/reflectoclexpressions)
System property tudresden.ocl.expressionFile not specified, using default (file:/home/wiera/oclcvs/src/tudresden/ocl/test/oclexpressions.xmi)
creating royloy test model (tudresden.ocl.check.types.xmifacade.Royloy)
classifier Account --> royloy::Account
class royloy::Account Account
  Bank bank
  Date created
  Person customer
classifier Bank --> royloy::Bank
class royloy::Bank Bank
  Account account[integer]
  Person customer[integer]
classifier Burning --> royloy::Burning
class royloy::Burning Burning
  implements royloy::Transaction
  CustomerCard card
  Date date
  LoyaltyAccount loyaltyAccount
  integer points
  Service service
  LoyaltyProgram program()
classifier Company --> royloy::Company
class royloy::Company Company
  Set(Person) employees
  Person manager
  integer numberOfEmployees
  Person getOldestEmployee()
  integer getOldestEmployeeAge()
classifier Customer --> royloy::Customer
class royloy::Customer Customer
  Set(CustomerCard) cards
  Date dateOfBirth
  boolean isMale
  Set(Membership) membership
  string name
  Set(LoyaltyProgram) program
  string title
classifier CustomerCard --> royloy::CustomerCard
class royloy::CustomerCard CustomerCard
  integer COLOR_SILVER
  integer color
  integer color_gold
  Membership membership
  Customer owner
  string printedName
  Set(Transaction) transactions
  boolean valid
  Date validFrom
  Date validThru
classifier Date --> royloy::Date
class royloy::Date Date
  Date now
  boolean equals(Date)
  boolean isAfter(Date)
  boolean isBefore(Date)
classifier Day --> royloy::Day
class royloy::Day Day
  boolean isWeekend
  DayType type
  void setType(DayType)
classifier DayType --> royloy::DayType
class royloy::DayType DayType
  DayType friday
  DayType monday
  DayType saturday
  DayType sunday
  DayType thursday
  DayType tuesday
  DayType wednesday
  DayType getFollowingDay(DayType)
classifier Earning --> royloy::Earning
class royloy::Earning Earning
  implements royloy::Transaction
  CustomerCard card
  Date date
  LoyaltyAccount loyaltyAccount
  integer points
  Service service
  LoyaltyProgram program()
classifier LoyaltyAccount --> royloy::LoyaltyAccount
class royloy::LoyaltyAccount LoyaltyAccount
  Membership membership
  integer points
  Set(Transaction) transactions
  void burn(integer)
  void earn(integer)
  boolean isEmpty()
classifier LoyaltyProgram --> royloy::LoyaltyProgram
class royloy::LoyaltyProgram LoyaltyProgram
  Set(Customer) customer
  Set(Membership) membership
  Set(ProgramPartner) partners
  Set(ServiceLevel) serviceLevel
  void enroll(Customer)
classifier Membership --> royloy::Membership
class royloy::Membership Membership
  ServiceLevel actualLevel
  CustomerCard card
  Customer customer
  LoyaltyAccount loyaltyAccount
  LoyaltyProgram program
classifier Person --> royloy::Person
class royloy::Person Person
  Account account
  integer age
  Bank bank
  Set(Company) employers
  Person husband
  boolean isMarried
  boolean isUnemployed
  Set(Company) managedCompanies
  string name
  Person wife
  real getIncomeAfterTax(real)
classifier ProgramPartner --> royloy::ProgramPartner
class royloy::ProgramPartner ProgramPartner
  Set(Service) deliveredServices
  Set(LoyaltyProgram) loyaltyProgram
  integer numberOfCustomers
classifier Service --> royloy::Service
class royloy::Service Service
  boolean condition
  string description
  integer pointsBurned
  integer pointsEarned
  ProgramPartner programPartner
  ServiceLevel serviceLevel
  Set(Transaction) transactions
classifier ServiceLevel --> royloy::ServiceLevel
class royloy::ServiceLevel ServiceLevel
  LoyaltyProgram loyaltyProgram
  Set(Membership) membership
  string name
  Service service
classifier Transaction --> royloy::Transaction
class royloy::Transaction Transaction
  CustomerCard card
  Date date
  LoyaltyAccount loyaltyAccount
  integer points
  Service service
  LoyaltyProgram program()
classifier royloy::Account --> royloy::Account
classifier royloy::Bank --> royloy::Bank
classifier royloy::Burning --> royloy::Burning
classifier royloy::Company --> royloy::Company
classifier royloy::Customer --> royloy::Customer
classifier royloy::CustomerCard --> royloy::CustomerCard
classifier royloy::Date --> royloy::Date
classifier royloy::Day --> royloy::Day
classifier royloy::DayType --> royloy::DayType
classifier royloy::Earning --> royloy::Earning
classifier royloy::LoyaltyAccount --> royloy::LoyaltyAccount
classifier royloy::LoyaltyProgram --> royloy::LoyaltyProgram
classifier royloy::Membership --> royloy::Membership
classifier royloy::Person --> royloy::Person
classifier royloy::ProgramPartner --> royloy::ProgramPartner
classifier royloy::Service --> royloy::Service
classifier royloy::ServiceLevel --> royloy::ServiceLevel
classifier royloy::Transaction --> royloy::Transaction
System property tudresden.ocl.expressionFile not specified, using default (file:/home/wiera/oclcvs/src/tudresden/ocl/test/oclexpressions.argo)
xmifacade: parsed /home/wiera/oclcvs/src/tudresden/ocl/test/xmi/argo07/royloy.xmi
xmifacade: using XMI adapter for IBM (tested with Argo 0.7).
classifier Account --> royloy::Account
class royloy::Account Account
  Bank bank
  Date created
  Person customer
classifier Bank --> royloy::Bank
class royloy::Bank Bank
  Set(Account) account
  Set(Person) customer
classifier Boolean --> Boolean
class Boolean Boolean
classifier Burning --> royloy::Burning
class royloy::Burning Burning
  implements royloy::Transaction
  CustomerCard card
  Date date
  LoyaltyAccount loyaltyAccount
  integer points
  Service service
  LoyaltyProgram program()
classifier Byte --> Byte
class Byte Byte
classifier Character --> Character
class Character Character
classifier Color --> Color
class Color Color
classifier Company --> royloy::Company
class royloy::Company Company
  Set(Person) employees
  Person manager
  integer numberOfEmployees
  Person getOldestEmployee()
  integer getOldestEmployeeAge()
classifier Customer --> royloy::Customer
class royloy::Customer Customer
  Set(CustomerCard) cards
  Date dateOfBirth
  boolean isMale
  Set(Membership) membership
  string name
  Set(LoyaltyProgram) program
  string title
classifier CustomerCard --> royloy::CustomerCard
class royloy::CustomerCard CustomerCard
  integer COLOR_SILVER
  integer color
  integer color_gold
  Membership membership
  Customer owner
  string printedName
  Set(Transaction) transactions
  boolean valid
  Date validFrom
  Date validThru
classifier Date --> royloy::Date
class royloy::Date Date
  Date now
  boolean equals(Date)
  boolean isAfter(Date)
  boolean isBefore(Date)
classifier Day --> royloy::Day
class royloy::Day Day
  boolean isWeekend
  DayType type
  void setType(DayType)
classifier DayType --> royloy::DayType
class royloy::DayType DayType
  DayType friday
  DayType monday
  DayType saturday
  DayType sunday
  DayType thursday
  DayType tuesday
  DayType wednesday
  DayType getFollowingDay(DayType)
classifier Double --> Double
class Double Double
classifier Earning --> royloy::Earning
class royloy::Earning Earning
  implements royloy::Transaction
  CustomerCard card
  Date date
  LoyaltyAccount loyaltyAccount
  integer points
  Service service
  LoyaltyProgram program()
classifier Float --> Float
class Float Float
classifier Hashtable --> Hashtable
class Hashtable Hashtable
classifier Integer --> Integer
class Integer Integer
classifier Long --> Long
class Long Long
classifier LoyaltyAccount --> royloy::LoyaltyAccount
class royloy::LoyaltyAccount LoyaltyAccount
  Membership membership
  integer points
  Set(Transaction) transactions
  void burn(integer)
  void earn(integer)
  boolean isEmpty()
classifier LoyaltyProgram --> royloy::LoyaltyProgram
class royloy::LoyaltyProgram LoyaltyProgram
  Set(Customer) customer
  Set(Membership) membership
  Set(ProgramPartner) partners
  Set(ServiceLevel) serviceLevel
  void enroll(Customer)
classifier Membership --> royloy::Membership
class royloy::Membership Membership
  ServiceLevel actualLevel
  CustomerCard card
  Customer customer
  LoyaltyAccount loyaltyAccount
  LoyaltyProgram program
classifier Person --> royloy::Person
class royloy::Person Person
  Account account
  integer age
  Bank bank
  Set(Company) employers
  Person husband
  boolean isMarried
  boolean isUnemployed
  Set(Company) managedCompanies
  string name
  Person wife
  real getIncomeAfterTax(real)
classifier Point --> Point
class Point Point
classifier ProgramPartner --> royloy::ProgramPartner
class royloy::ProgramPartner ProgramPartner
  Set(Service) deliveredServices
  Set(LoyaltyProgram) loyaltyProgram
  integer numberOfCustomers
classifier Rectangle --> Rectangle
class Rectangle Rectangle
classifier Service --> royloy::Service
class royloy::Service Service
  boolean condition
  string description
  integer pointsBurned
  integer pointsEarned
  ProgramPartner programPartner
  ServiceLevel serviceLevel
  Set(Transaction) transactions
classifier ServiceLevel --> royloy::ServiceLevel
class royloy::ServiceLevel ServiceLevel
  LoyaltyProgram loyaltyProgram
  Set(Membership) membership
  string name
  Service service
classifier Stack --> Stack
class Stack Stack
classifier Transaction --> royloy::Transaction
class royloy::Transaction Transaction
  CustomerCard card
  Date date
  LoyaltyAccount loyaltyAccount
  integer points
  Service service
  LoyaltyProgram program()
classifier Vector --> Vector
class Vector Vector
classifier char --> char
class char char
classifier royloy::Account --> royloy::Account
classifier royloy::Bank --> royloy::Bank
classifier royloy::Burning --> royloy::Burning
classifier royloy::Company --> royloy::Company
classifier royloy::Customer --> royloy::Customer
classifier royloy::CustomerCard --> royloy::CustomerCard
classifier royloy::Date --> royloy::Date
classifier royloy::Day --> royloy::Day
classifier royloy::DayType --> royloy::DayType
classifier royloy::Earning --> royloy::Earning
classifier royloy::LoyaltyAccount --> royloy::LoyaltyAccount
classifier royloy::LoyaltyProgram --> royloy::LoyaltyProgram
classifier royloy::Membership --> royloy::Membership
classifier royloy::Person --> royloy::Person
classifier royloy::ProgramPartner --> royloy::ProgramPartner
classifier royloy::Service --> royloy::Service
classifier royloy::ServiceLevel --> royloy::ServiceLevel
classifier royloy::Transaction --> royloy::Transaction
classifier void?? --> void??
class void?? void??
System property tudresden.ocl.expressionFile not specified, using default (file:/home/wiera/oclcvs/src/tudresden/ocl/test/oclexpressions.xmi)
xmifacade: parsed /home/wiera/oclcvs/src/tudresden/ocl/test/xmi/rose/royloy.xml
xmifacade: using XMI adapter for OMG (tested with Rational Rose 98 sp1 with Unisys Plugin).
QUALIFIER
classifier Account --> royloy::Account
class royloy::Account Account
  Bank bank
  Date created
  Person customer
  integer index
classifier Bank --> royloy::Bank
class royloy::Bank Bank
  Account account
  Person customer[integer]
classifier Burning --> royloy::Burning
class royloy::Burning Burning
  implements royloy::Transaction
  CustomerCard card
  Date date
  LoyaltyAccount loyaltyAccount
  integer points
  Service service
  LoyaltyProgram program()
classifier Company --> royloy::Company
class royloy::Company Company
  Set(Person) employees
  Person manager
  integer numberOfEmployees
  Person getOldestEmployee()
  integer getOldestEmployeeAge()
classifier Customer --> royloy::Customer
class royloy::Customer Customer
  Set(CustomerCard) cards
  Date dateOfBirth
  boolean isMale
  Set(Membership) membership
  string name
  Set(LoyaltyProgram) program
  string title
classifier CustomerCard --> royloy::CustomerCard
class royloy::CustomerCard CustomerCard
  integer COLOR_SILVER
  integer color
  integer color_gold
  Membership membership
  Customer owner
  string printedName
  Set(Transaction) transactions
  boolean valid
  Date validFrom
  Date validThru
classifier Date --> royloy::Date
class royloy::Date Date
  Date now
  boolean equals(Date)
  boolean isAfter(Date)
  boolean isBefore(Date)
classifier Day --> royloy::Day
class royloy::Day Day
  boolean isWeekend
  DayType type
  void setType(DayType)
classifier DayType --> royloy::DayType
class royloy::DayType DayType
  DayType friday
  DayType monday
  DayType saturday
  DayType sunday
  DayType thursday
  DayType tuesday
  DayType wednesday
  DayType getFollowingDay(DayType)
classifier Earning --> royloy::Earning
class royloy::Earning Earning
  implements royloy::Transaction
  CustomerCard card
  Date date
  LoyaltyAccount loyaltyAccount
  integer points
  Service service
  LoyaltyProgram program()
classifier LoyaltyAccount --> royloy::LoyaltyAccount
class royloy::LoyaltyAccount LoyaltyAccount
  Membership membership
  integer points
  Set(Transaction) transactions
  void burn(integer)
  void earn(integer)
  boolean isEmpty()
classifier LoyaltyProgram --> royloy::LoyaltyProgram
class royloy::LoyaltyProgram LoyaltyProgram
  Set(Customer) customer
  Set(Membership) membership
  Set(ProgramPartner) partners
  Set(ServiceLevel) serviceLevel
  void enroll(Customer)
classifier Membership --> royloy::Membership
class royloy::Membership Membership
  ServiceLevel actualLevel
  CustomerCard card
  Customer customer
  LoyaltyAccount loyaltyAccount
  LoyaltyProgram program
classifier Person --> royloy::Person
class royloy::Person Person
  Account account[integer]
  integer age
  Bank bank
  Set(Company) employers
  Person husband
  boolean isMarried
  boolean isUnemployed
  Set(Company) managedCompanies
  string name
  Person wife
  real getIncomeAfterTax(real)
classifier ProgramPartner --> royloy::ProgramPartner
class royloy::ProgramPartner ProgramPartner
  Set(Service) deliveredServices
  Set(LoyaltyProgram) loyaltyProgram
  integer numberOfCustomers
classifier Service --> royloy::Service
class royloy::Service Service
  boolean condition
  string description
  integer pointsBurned
  integer pointsEarned
  ProgramPartner programPartner
  ServiceLevel serviceLevel
  Set(Transaction) transactions
classifier ServiceLevel --> royloy::ServiceLevel
class royloy::ServiceLevel ServiceLevel
  LoyaltyProgram loyaltyProgram
  Set(Membership) membership
  string name
  Service service
classifier Transaction --> royloy::Transaction
class royloy::Transaction Transaction
  CustomerCard card
  Date date
  LoyaltyAccount loyaltyAccount
  integer points
  Service service
  LoyaltyProgram program()
classifier royloy::Account --> royloy::Account
classifier royloy::Bank --> royloy::Bank
classifier royloy::Burning --> royloy::Burning
classifier royloy::Company --> royloy::Company
classifier royloy::Customer --> royloy::Customer
classifier royloy::CustomerCard --> royloy::CustomerCard
classifier royloy::Date --> royloy::Date
classifier royloy::Day --> royloy::Day
classifier royloy::DayType --> royloy::DayType
classifier royloy::Earning --> royloy::Earning
classifier royloy::LoyaltyAccount --> royloy::LoyaltyAccount
classifier royloy::LoyaltyProgram --> royloy::LoyaltyProgram
classifier royloy::Membership --> royloy::Membership
classifier royloy::Person --> royloy::Person
classifier royloy::ProgramPartner --> royloy::ProgramPartner
classifier royloy::Service --> royloy::Service
classifier royloy::ServiceLevel --> royloy::ServiceLevel
classifier royloy::Transaction --> royloy::Transaction
starting testFromFile, using tudresden.ocl.check.types.testfacade.TestModelFacade@8e8d31e5
starting testFromFile, using tudresden.ocl.check.types.testfacade.TestModelFacade@af9531e4
starting testFromFile, using class tudresden.ocl.check.types.xmifacade.Model(BUILT-IN_ROYLOY_TEST)
starting testFromFile, using class tudresden.ocl.check.types.xmifacade.Model(/home/wiera/oclcvs/src/tudresden/ocl/test/xmi/argo07/royloy.xmi)
starting testFromFile, using class tudresden.ocl.check.types.xmifacade.Model(/home/wiera/oclcvs/src/tudresden/ocl/test/xmi/rose/royloy.xml)
converting context Person inv: self.age>15
converting context Person inv inv1: self.age>15
converting context Person inv: age>=0
converting context Person inv someInv: age>=0
converting context Company inv: employees->forAll(p:Person|age>15)
converting context Company inv mgr: employees->includes(manager)
converting context Company inv mgr: employees->collect(p|employers)->includes(self)
converting context Company inv mgr: employees->collect(p|employers)->collect(c|employees)->includesAll(employees)
converting context Company inv someInv: employees->forAll(p:Person| employers->exists(c|c=self))
converting context Company inv someInv: employees->forAll(p:Person| employers->forAll(c|numberOfEmployees>0))
converting context Company inv someInv: employees->forAll(p:Person| employers->forAll(c|getOldestEmployeeAge()>=p.age))
converting context Person inv: let age=age+1 in age>=0
converting context Company inv: employees->forAll(age>15)
converting context Company inv i: let maxAge=getOldestEmployeeAge() in employees->forAll(it|age<=maxAge)
converting context Company inv mgr: employees->collect(employers)->includes(self)
converting context Company inv mgr: employees->collect(employers)->collect(employees)->includesAll(employees)
converting context Company inv someInv: employees->forAll(employers->exists(c|c=self))
converting context Company inv someInv: employees->forAll(employers->forAll(numberOfEmployees>0))
converting context Company inv someInv: employees->forAll(p|employers->forAll(getOldestEmployeeAge()>=p.age))
converting context Company inv: let tudOclIter0:Real=17.5 in employees->forAll(age>15)
converting context Company inv: self.employees->forAll(i, j|i<>j implies i.name<>j.name)
converting context Company inv i0: manager.employers->forAll(c1, c2, c3:Company|true)
converting context Person inv i1: isMarried and not employers->forAll(x, y | false)
converting context Person inv i2: let x = managedCompanies in x->forAll(i, j | i.employees->forAll(k, l | j=k or i=j) )
converting context Person inv i2: let x = employers in x->forAll(i, j : Company | (i.employees)->forAll(k, l :Person | k.isMarried or l.isUnemployed) )
converting context Person inv i0: let a=age in let a=a+1 in a>0
converting context Company inv i0: let x=manager in employees->forAll(x|x.age<=x.age)
converting context Company inv i0: employees->forAll(e1|self.employees->forAll(e1|e1<>e1 implies e1.name<>e1.name))
converting context Person inv i: let a=age in employers->iterate(i:Company; a:Integer=0|a+i.employees->size)>10
converting context Person inv a: let a=1 in let a=a+1 in let a=a+1 in a=3
xmifacade: parsed /home/wiera/oclcvs/src/tudresden/ocl/check/types/xmifacade/stress/xmistress.xmi
xmifacade: using XMI adapter for IBM (tested with Argo 0.7).
xmifacade: warning: ambigous attribute/role name "beta" in class "packageAleph::Beta", disabled for use in OCL.
xmifacade: warning: ambigous attribute/role name "drei" in class "packageAleph::Gamma", disabled for use in OCL.
xmifacade: warning: class "packageAleph::Beta" overrides attribute "alpha2" inherited from class "packageAleph::Alpha".
xmifacade: warning: class "packageAleph::Beta" overrides attribute "alpha1" inherited from class "packageAleph::Alpha".
xmifacade: warning: class "packageAleph::Gamma" overrides attribute "beta" inherited from class "packageAleph::Beta".
classifier A --> A
class A A
classifier Alpha --> packageAleph::Alpha
class packageAleph::Alpha Alpha
  integer alpha1
  real alpha2
  integer alpha3
  Eins eins
  Eins alpha1()
  Drei alpha1(integer)
  Zwei alpha1(string)
classifier Beta --> packageAleph::Beta
class packageAleph::Beta Beta
  implements packageAleph::Alpha
  Set(Zwei) ZWEI
  integer alpha1
  integer alpha2
  integer alpha3
  AMBIGOUS beta
  integer beta1
  Eins eins
  Gamma gamma
  Eins alpha1()
  Drei alpha1(integer)
  Zwei alpha1(string)
  Eins beta1()
classifier Boolean --> Boolean
class Boolean Boolean
classifier Byte --> Byte
class Byte Byte
classifier Character --> Character
class Character Character
classifier Color --> Color
class Color Color
classifier Double --> Double
class Double Double
classifier Drei --> packageAleph::Drei
class packageAleph::Drei Drei
  implements packageAleph::Eins
  implements packageAleph::Zwei
  Gamma GAMMA
  Set(Alpha) alpha
  Beta beta
  Gamma gamma
  Alpha hoppel(Alpha)
  Beta hoppel(Beta)
  Gamma hoppel(Gamma)
classifier Eins --> packageAleph::Eins
class packageAleph::Eins Eins
  Set(Alpha) alpha
  Beta hoppel(Beta)
classifier Float --> Float
class Float Float
classifier Gamma --> packageAleph::Gamma
class packageAleph::Gamma Gamma
  implements packageAleph::Alpha
  implements packageAleph::Beta
  Set(Zwei) ZWEI
  integer alpha1
  integer alpha2
  integer alpha3
  Beta beta
  integer beta1
  AMBIGOUS drei
  Eins eins
  Gamma gamma
  Eins alpha1()
  Drei alpha1(integer)
  Zwei alpha1(string)
  Eins beta1()
classifier Hashtable --> Hashtable
class Hashtable Hashtable
classifier Integer --> Integer
class Integer Integer
classifier Long --> Long
class Long Long
classifier Point --> Point
class Point Point
classifier Rectangle --> Rectangle
class Rectangle Rectangle
classifier Stack --> Stack
class Stack Stack
classifier Vector --> Vector
class Vector Vector
classifier Zwei --> packageAleph::Zwei
class packageAleph::Zwei Zwei
  implements packageAleph::Eins
  Set(Alpha) alpha
  Beta beta
  Alpha hoppel(Alpha)
  Beta hoppel(Beta)
  Gamma hoppel(Gamma)
classifier char --> char
class char char
classifier classBeleph --> packageBeleph::classBeleph
class packageBeleph::classBeleph classBeleph
classifier packageAleph::Alpha --> packageAleph::Alpha
classifier packageAleph::Beta --> packageAleph::Beta
classifier packageAleph::Drei --> packageAleph::Drei
classifier packageAleph::Eins --> packageAleph::Eins
classifier packageAleph::Gamma --> packageAleph::Gamma
classifier packageAleph::Zwei --> packageAleph::Zwei
classifier packageBeleph::classBeleph --> packageBeleph::classBeleph
classifier A --> A
class A A
classifier Alpha --> packageAleph::Alpha
class packageAleph::Alpha Alpha
  integer alpha1
  real alpha2
  integer alpha3
  Eins eins
  Eins alpha1()
  Drei alpha1(integer)
  Zwei alpha1(string)
classifier Beta --> packageAleph::Beta
class packageAleph::Beta Beta
  implements packageAleph::Alpha
  Set(Zwei) ZWEI
  integer alpha1
  integer alpha2
  integer alpha3
  AMBIGOUS beta
  integer beta1
  Eins eins
  Gamma gamma
  Eins alpha1()
  Drei alpha1(integer)
  Zwei alpha1(string)
  Eins beta1()
classifier Boolean --> Boolean
class Boolean Boolean
classifier Byte --> Byte
class Byte Byte
classifier Character --> Character
class Character Character
classifier Color --> Color
class Color Color
classifier Double --> Double
class Double Double
classifier Drei --> packageAleph::Drei
class packageAleph::Drei Drei
  implements packageAleph::Eins
  implements packageAleph::Zwei
  Gamma GAMMA
  Set(Alpha) alpha
  Beta beta
  Gamma gamma
  Alpha hoppel(Alpha)
  Beta hoppel(Beta)
  Gamma hoppel(Gamma)
classifier Eins --> packageAleph::Eins
class packageAleph::Eins Eins
  Set(Alpha) alpha
  Beta hoppel(Beta)
classifier Float --> Float
class Float Float
classifier Gamma --> packageAleph::Gamma
class packageAleph::Gamma Gamma
  implements packageAleph::Alpha
  implements packageAleph::Beta
  Set(Zwei) ZWEI
  integer alpha1
  integer alpha2
  integer alpha3
  Beta beta
  integer beta1
  AMBIGOUS drei
  Eins eins
  Gamma gamma
  Eins alpha1()
  Drei alpha1(integer)
  Zwei alpha1(string)
  Eins beta1()
classifier Hashtable --> Hashtable
class Hashtable Hashtable
classifier Integer --> Integer
class Integer Integer
classifier Long --> Long
class Long Long
classifier Point --> Point
class Point Point
classifier Rectangle --> Rectangle
class Rectangle Rectangle
classifier Stack --> Stack
class Stack Stack
classifier Vector --> Vector
class Vector Vector
classifier Zwei --> packageAleph::Zwei
class packageAleph::Zwei Zwei
  implements packageAleph::Eins
  Set(Alpha) alpha
  Beta beta
  Alpha hoppel(Alpha)
  Beta hoppel(Beta)
  Gamma hoppel(Gamma)
classifier char --> char
class char char
classifier classBeleph --> packageBeleph::classBeleph
class packageBeleph::classBeleph classBeleph
classifier packageAleph::Alpha --> packageAleph::Alpha
classifier packageAleph::Beta --> packageAleph::Beta
classifier packageAleph::Drei --> packageAleph::Drei
classifier packageAleph::Eins --> packageAleph::Eins
classifier packageAleph::Gamma --> packageAleph::Gamma
classifier packageAleph::Zwei --> packageAleph::Zwei
classifier packageBeleph::classBeleph --> packageBeleph::classBeleph
Expected attribute "beta" in classifier "packageAleph::Beta" cannot be used in OCL due to ambiguity. See OCL spec 5.4.1.
Expected attribute "drei" in classifier "packageAleph::Gamma" cannot be used in OCL due to ambiguity. See OCL spec 5.4.1.
xmifacade: warning: operation request "hoppel(Beta)" matches at least two operations in class "packageAleph::Zwei" by polymorphism, thus they are not avialable to OCL.
Expected operation "hoppel(Beta)" in classifier "packageAleph::Zwei" not found.
xmifacade: warning: operation request "hoppel(Gamma)" matches at least two operations in class "packageAleph::Zwei" by polymorphism, thus they are not avialable to OCL.
Expected operation "hoppel(Gamma)" in classifier "packageAleph::Zwei" not found.
xmifacade: warning: operation request "hoppel(Beta)" matches at least two operations in class "packageAleph::Drei" by polymorphism, thus they are not avialable to OCL.
Expected operation "hoppel(Beta)" in classifier "packageAleph::Drei" not found.
xmifacade: warning: operation request "hoppel(Gamma)" matches at least two operations in class "packageAleph::Drei" by polymorphism, thus they are not avialable to OCL.
Expected operation "hoppel(Gamma)" in classifier "packageAleph::Drei" not found.
