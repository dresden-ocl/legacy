<?xml version="1.0"?>
<!DOCTYPE catalog SYSTEM "MappingRules.dtd">

<catalog name="OCL2SQL">
	<description>
		Describes mapping rules that help to
		generate SQL code out of OCL constraints.	
	</description>
	
	<pattern rule="constraint_body">
		<template spec="any" rem="OCL INVARIANT">
			<li>ALTER TABLE <param name="context_table"/> ADD</li>
			<li>(CONSTRAINT <param name="constraint_name"/> CHECK (NOT EXISTS</li>
			<li>(SELECT * FROM <param name="context_table"/> SELF</li>
			<li>WHERE NOT (<param name="expression"/>))))</li>
		</template>	
	</pattern>
	
	<pattern rule="literal">
		<template spec="string" rem="BASIC TYPE">
			<li><param name="value"/></li>
		</template>
		<template spec="boolean_true" rem="BASIC TYPE">
			<li>(1=1)</li>
		</template>
		<template spec="boolean_false" rem="BASIC TYPE">
			<li>(1=0)</li>
		</template>
		<template spec="enum" rem="BASIC TYPE">
			<li><param name="value"/></li>
		</template>
	</pattern>
	
	<pattern rule="parentheses_primary_expression">
		<template spec="any" rem="BASIC TYPE">
			<li>(<param name="expression"/>)</li>
		</template>
	</pattern>
	
	<pattern rule="if_expression">
		<template spec="any" rem="BASIC TYPE">
			<li>CASE WHEN <param name="if_branch"/> THEN <param name="then_branch"/> ELSE <param name="else_branch"/> END</li>
		</template>
	</pattern>
	
	<pattern rule="logical_expression_tail">
		<template spec="and" rem="BASIC TYPE">
			<li><param name="rel_exp_1"/> AND <param name="rel_exp_2"/></li>
		</template>
		<template spec="or" rem="BASIC TYPE">
			<li><param name="rel_exp_1"/> OR <param name="rel_exp_2"/></li>
		</template>
		<template spec="xor" rem="BASIC TYPE">
			<li>(<param name="rel_exp_1"/> OR <param name="rel_exp_2"/>) AND NOT (<param name="rel_exp_1"/> AND <param name="rel_exp_2"/>)</li>
		</template>
		<template spec="implies" rem="BASIC TYPE">
			<li>NOT <param name="rel_exp_1"/> OR <param name="rel_exp_2"/></li>
		</template>
	</pattern>
	
	<pattern rule="relational_expression_tail">
		<template spec="equal_IntRealStringEnum" rem="BASIC TYPE">
			<li><param name="add_exp_1"/> = <param name="add_exp_2"/></li>
		</template>
		<template spec="equal_Bool" rem="BASIC TYPE">
			<li>((<param name="add_exp_1"/> AND <param name="add_exp_2"/>) OR (NOT <param name="add_exp_1"/> AND NOT <param name="add_exp_2"/>))</li>
		</template>
		<template spec="equal_Any" rem="BASIC TYPE">
			<li>No support for equals_Any !</li>
		</template>
		<template spec="equal_Set" rem="BASIC TYPE">
			<li>No support for equals_Set !</li>
		</template>
		<template spec="equal_Bag" rem="BASIC TYPE">
			<li>No support for equals_Bag !</li>
		</template>
		<template spec="equal_Sequence" rem="BASIC TYPE">
			<li>No support for equals_Sequence !</li>
		</template>
		<template spec="nequal" rem="BASIC TYPE">
			<li><param name="add_exp_1"/> &lt;&gt; <param name="add_exp_2"/></li>
		</template>
		<template spec="gt" rem="BASIC TYPE">
			<li><param name="add_exp_1"/> &gt; <param name="add_exp_2"/></li>
		</template>
		<template spec="lt" rem="BASIC TYPE">
			<li><param name="add_exp_1"/> &lt; <param name="add_exp_2"/></li>
		</template>
		<template spec="gteq" rem="BASIC TYPE">
			<li><param name="add_exp_1"/> &gt;= <param name="add_exp_2"/></li>
		</template>
		<template spec="lteq" rem="BASIC TYPE">
			<li><param name="add_exp_1"/> &lt;= <param name="add_exp_2"/></li>
		</template>
	</pattern>
	
	<pattern rule="additive_expression_tail">
		<template spec="plus" rem="BASIC TYPE">
			<li><param name="mult_exp_1"/> + <param name="mult_exp_2"/></li>
		</template>
		<template spec="minus" rem="BASIC TYPE">
			<li><param name="mult_exp_1"/> - <param name="mult_exp_2"/></li>
		</template>		
	</pattern>
	
	<pattern rule="multiplicative_expression_tail">
		<template spec="mult" rem="BASIC TYPE">
			<li><param name="un_exp_1"/> * <param name="un_exp_2"/></li>
		</template>
		<template spec="div" rem="BASIC TYPE">
			<li><param name="un_exp_1"/> / <param name="un_exp_2"/></li>
		</template>
	</pattern>
	
	<pattern rule="unary_expression">
		<template spec="minus" rem="BASIC TYPE">
			<li>-<param name="un_exp"/></li>
		</template>
		<template spec="not" rem="BASIC TYPE" >
			<li>NOT (<param name="un_exp"/>)</li>
		</template>
	</pattern>
	
	<pattern rule="feature_call">
	
		<template spec="attribute_context" rem="CLASS AND ATTRIBUTE">
			<li><param name="context_alias"/>.<param name="column"/></li>
		</template>
		<template spec="attribute_navigation" rem="CLASS AND ATTRIBUTE">
			<li>SELECT <param name="column1"/> FROM <param name="table1"/> WHERE <param name="column2"/> IN </li>
			<li>(<param name="table2"/>)</li>
		</template>
		<template spec="allInstances" rem="CLASS AND ATTRIBUTE">
			<li>SELECT <param name="column"/> FROM <param name="table"/></li>			
		</template>
		
		<template spec="nested_context" rem="NAVIGATION">
			<li>SELECT <param name="column1"/> FROM <param name="table"/> WHERE <param name="column2"/>=<param name="context_alias"/>.<param name="context_key"/></li>
		</template>
		<template spec="nested" rem="NAVIGATION">
			<li>SELECT <param name="column1"/> FROM <param name="table"/> WHERE <param name="column2"/> IN </li>
			<li>(<param name="nested_select"/>)</li>
		</template>
		
		<template spec="forAll" rem="COMPLEX PREDICATE">
			<li connector="true">AND</li>
			<li>NOT EXISTS</li>
			<li>(SELECT <param name="column"/></li>
			<li>FROM (<param name="table1"/>)</li>
			<li>WHERE <param name="column"/> IN</li>
			<li>(SELECT <param name="column"/></li>
			<li>FROM <param name="table2"/></li>
			<li>WHERE NOT (<param name="expression"/>)))</li>
		</template>
		<template spec="includes" rem="COMPLEX PREDICATE">
			<li connector="true">AND</li>
			<li><param name="element"/> IN SELECT <param name="column"/></li>
			<li>FROM (<param name="table"/>)</li>
		</template>
		<template spec="excludes" rem="COMPLEX PREDICATE">
			<li connector="true">AND</li>
			<li><param name="element"/> NOT IN SELECT <param name="column"/></li>
			<li>FROM (<param name="table"/>)</li>
		</template>
		<template spec="includesAll" rem="COMPLEX PREDICATE">
			<li connector="true">AND</li>
			<li>NOT EXISTS</li>
			<li>SELECT <param name="column"/></li>
			<li>FROM (<param name="table1"/>)</li>
			<li>WHERE <param name="column"/> NOT IN SELECT <param name="column"/> FROM (<param name="table2"/>)</li>
		</template>
		<template spec="excludesAll" rem="COMPLEX PREDICATE">
			<li connector="true">AND</li>
			<li>NOT EXISTS</li>
			<li>SELECT <param name="column"/></li>
			<li>FROM (<param name="table1"/>)</li>
			<li>WHERE <param name="column"/> IN SELECT <param name="column"/> FROM (<param name="table2"/>)</li>
		</template>
		<template spec="isEmpty" rem="COMPLEX PREDICATE">
			<li connector="true">AND</li>
			<li>NOT EXISTS (<param name="table"/>)</li>
		</template>
		<template spec="notEmpty" rem="COMPLEX PREDICATE">
			<li connector="true">AND</li>
			<li>EXISTS (<param name="table"/>)</li>
		</template>
		<template spec="exists" rem="COMPLEX PREDICATE">
			<li connector="true">AND</li>
			<li>EXISTS</li>
			<li>SELECT <param name="column"/></li>
			<li>FROM (<param name="table1"/>)</li>
			<li>WHERE <param name="column"/> IN</li>
			<li>(SELECT <param name="column"/></li>
			<li>FROM <param name="table2"/></li>
			<li>WHERE (<param name="expression"/>)))</li>
		</template>
		<template spec="isUnique" rem="COMPLEX PREDICATE">
			<li connector="true">AND</li>
			<li>...</li>
		</template>
		<template spec="sortedby" rem="COMPLEX PREDICATE">
			<li connector="true">AND</li>
			<li>No support for sortedby !</li>
		</template>
		
		<template spec="sum" rem="BASIC VALUE">
			<li connector="true"> + </li>
			<li>SELECT CASE WHEN SUM(<param name="column"/>) IS NULL THEN 0 ELSE SUM(<param name="column"/>)</li>
			<li>FROM (<param name="table"/>)</li>
		</template>
		<template spec="size" rem="BASIC VALUE">
			<li connector="true"> + </li>
			<li>SELECT NVL(COUNT(<param name="column"/>), 0)</li>
			<li>FROM (<param name="table"/>)</li>
		</template>
		<template spec="count" rem="BASIC VALUE">
			<li connector="true"> + </li>
			<li>SELECT CASE WHEN COUNT(<param name="key"/>) IS NULL THEN 0 ELSE COUNT(<param name="key"/>)</li>
			<li>FROM (<param name="table"/>)</li>
			<li>WHERE <param name="key"/> = <param name="expression"/></li>
		</template>
		
		<template spec="select" rem="QUERY">
			<li>SELECT <param name="key"/> FROM</li>
			<li>(<param name="table1"/>)</li>
			<li>WHERE <param name="key"/> IN</li>
			<li>(SELECT <param name="key"/> FROM <param name="table2"/></li>
			<li>WHERE <param name="expression"/>)</li>
		</template>
		<template spec="reject" rem="QUERY">
			<li connector="true"> UNION </li>
			<li>SELECT <param name="key"/> FROM</li>
			<li>(<param name="table1"/>)</li>
			<li>WHERE <param name="key"/> IN</li>
			<li>(SELECT <param name="key"/> FROM <param name="table2"/></li>
			<li>WHERE NOT (<param name="expression"/>))</li>
		</template>
		<template spec="set_intersection" rem="QUERY">
			<li> (<param name="coll1"/>) INTERSECT (<param name="coll2"/>)</li>
		</template>
		<template spec="bag_intersection" rem="QUERY">
			<li> (<param name="coll1"/>) INTERSECT ALL (<param name="coll2"/>)</li>
		</template>	
		<template spec="set_including" rem="QUERY">
			<li><param name="coll"/></li>
			<li>UNION</li>
			<li>SELECT elem = <param name="element"/></li>
		</template>	
		<template spec="bag_including" rem="QUERY">
			<li><param name="coll"/></li>
			<li>UNION ALL</li>
			<li>SELECT elem = <param name="element"/></li>
		</template>
		<template spec="sequence_including" rem="QUERY">
			<li>SELECT * FROM (<param name="coll"/>)</li>
			<li>UNION</li>
			<li>SELECT elem = <param name="element"/>, snr = (SELECT MAX(snr)+1 FROM (<param name="coll"/>)</li>
		</template>	
		<template spec="excluding" rem="QUERY">
			<li>SELECT * FROM (<param name="coll"/>)</li>
			<li>WHERE NOT (<param name="column"/> = <param name="element"/>)</li>
		</template>
		<template spec="set_union" rem="QUERY">
			<li> (<param name="coll1"/>) UNION (<param name="coll2"/>)</li>
		</template>
		<template spec="bag_union" rem="QUERY">
			<li> (<param name="coll1"/>) UNION ALL (<param name="coll2"/>)</li>
		</template>
		<template spec="sequence_union" rem="QUERY">
			<li>No support for sequence union !</li>
		</template>
		<template spec="symmetricDifference" rem="QUERY">
			<li>((<param name="coll1"/>) EXCEPT (<param name="coll2"/>)) UNION ((<param name="coll1"/>) EXCEPT (<param name="coll2"/>))</li>
		</template>
		<template spec="collect" rem="QUERY">
			<li>SELECT <param name="column"/></li>
			<li>FROM <param name="table"/></li>
			<li>WHERE <param name="expression"/></li>
		</template>
			
		<template spec="basic_size" rem="BASIC VALUE">
			<li>LENGTH (<param name="operand"/>)</li>
		</template>
		<template spec="basic_concat" rem="BASIC VALUE">
			<li><param name="operand1"/> + <param name="operand2"/></li>
		</template>
		<template spec="basic_toUpper" rem="BASIC VALUE">
			<li>UPPER (<param name="operand"/>)</li>
		</template>
		<template spec="basic_toLower" rem="BASIC VALUE">
			<li>LOWER (<param name="operand"/>)</li>
		</template>
		<template spec="basic_substring" rem="BASIC VALUE">
			<li>SUBSTRING(<param name="operand"/>, <param name="start"/>, <param name="end"/> - <param name="start"/> + 1)</li>
		</template>
		
		<template spec="basic_abs" rem="BASIC VALUE">
			<li>ABS (<param name="operand"/>)</li>
		</template>
		<template spec="basic_floor" rem="BASIC VALUE">
			<li>FLOOR (<param name="operand"/>)</li>
		</template>
		<template spec="basic_max" rem="BASIC VALUE">
			<li>CASE WHEN <param name="operand1"/> &gt; <param name="operand2"/> THEN <param name="operand1"/> ELSE <param name="operand2"/> END</li>
		</template>
		<template spec="basic_min" rem="BASIC VALUE">
			<li>CASE WHEN <param name="operand1"/> &lt; <param name="operand2"/> THEN <param name="operand1"/> ELSE <param name="operand2"/> END</li>
		</template>
		<template spec="basic_round" rem="BASIC VALUE">
			<li>ROUND (<param name="operand"/>)</li>
		</template>
		<template spec="basic_div" rem="BASIC VALUE">
			<li><param name="operand1"/> / <param name="operand2"/></li>
		</template>
		<template spec="basic_mod" rem="BASIC VALUE">
			<li><param name="operand1"/> - ((<param name="operand1"/> / <param name="operand2"/>) * <param name="operand2"/></li>
		</template>
	</pattern>
	
	<pattern rule="literal_collection">
		<template spec="set" rem="QUERY">
			<li connector="true">UNION</li>
			<li>SELECT elem = <param name="value"/></li>
		</template>
		<template spec="bag" rem="QUERY">
			<li connector="true">UNION ALL</li>
			<li>SELECT elem = <param name="value"/></li>
		</template>
		<template spec="sequence" rem="QUERY">
			<li connector="true">UNION</li>
			<li>SELECT elem = <param name="value"/>, snr = <param name="seqnr"/></li>
		</template>
	</pattern>	
	
</catalog>
