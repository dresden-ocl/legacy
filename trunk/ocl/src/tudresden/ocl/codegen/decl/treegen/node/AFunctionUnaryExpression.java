/* This file was generated by SableCC (http://www.sablecc.org/). */

package tudresden.ocl.codegen.decl.treegen.node;

import java.util.*;
import tudresden.ocl.codegen.decl.treegen.analysis.*;

public final class AFunctionUnaryExpression extends PUnaryExpression
{
    private TIdentifier _identifier_;
    private final LinkedList _unaryExpression_ = new TypedLinkedList(new UnaryExpression_Cast());

    public AFunctionUnaryExpression()
    {
    }

    public AFunctionUnaryExpression(
        TIdentifier _identifier_,
        List _unaryExpression_)
    {
        setIdentifier(_identifier_);

        {
            this._unaryExpression_.clear();
            this._unaryExpression_.addAll(_unaryExpression_);
        }

    }

    public AFunctionUnaryExpression(
        TIdentifier _identifier_,
        XPUnaryExpression _unaryExpression_)
    {
        setIdentifier(_identifier_);

        if(_unaryExpression_ != null)
        {
            while(_unaryExpression_ instanceof X1PUnaryExpression)
            {
                this._unaryExpression_.addFirst(((X1PUnaryExpression) _unaryExpression_).getPUnaryExpression());
                _unaryExpression_ = ((X1PUnaryExpression) _unaryExpression_).getXPUnaryExpression();
            }
            this._unaryExpression_.addFirst(((X2PUnaryExpression) _unaryExpression_).getPUnaryExpression());
        }

    }
    public Object clone()
    {
        return new AFunctionUnaryExpression(
            (TIdentifier) cloneNode(_identifier_),
            cloneList(_unaryExpression_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFunctionUnaryExpression(this);
    }

    public TIdentifier getIdentifier()
    {
        return _identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _identifier_ = node;
    }

    public LinkedList getUnaryExpression()
    {
        return _unaryExpression_;
    }

    public void setUnaryExpression(List list)
    {
        _unaryExpression_.clear();
        _unaryExpression_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_identifier_)
            + toString(_unaryExpression_);
    }

    void removeChild(Node child)
    {
        if(_identifier_ == child)
        {
            _identifier_ = null;
            return;
        }

        if(_unaryExpression_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        for(ListIterator i = _unaryExpression_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class UnaryExpression_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PUnaryExpression node = (PUnaryExpression) o;

            if((node.parent() != null) &&
                (node.parent() != AFunctionUnaryExpression.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AFunctionUnaryExpression.this))
            {
                node.parent(AFunctionUnaryExpression.this);
            }

            return node;
        }
    }
}
