/*
Copyright (C) 2000  Steffen Zschaler

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

/*
 * RevengGUI.java
 *
 * Created on 8. August 2000, 14:27 !! Created with Forte4J, so watch out for the .form file!
 */
 
package tudresden.ocl.injection.reverseeng;

import java.io.*;

import java.util.*;

import javax.swing.tree.*;

import javax.swing.*;

/** 
 *
 * @author  sz9
 * @version 
 */
public class RevengGUI extends javax.swing.JDialog {

  private DefaultTreeModel m_dtmFileModel;
  
  /** Creates new form RevengGUI */
  public RevengGUI(java.awt.Frame parent,boolean modal) {
    super (parent, modal);
    initComponents ();
    pack ();
    
    m_jspSplitter.setDividerLocation (100);
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the FormEditor.
   */
  private void initComponents () {//GEN-BEGIN:initComponents
    m_jspSplitter = new javax.swing.JSplitPane ();
    m_jpLeft = new javax.swing.JPanel ();
    m_jtbTreeBar = new javax.swing.JToolBar ();
    m_jbUpOneLevel = new javax.swing.JButton ();
    m_jspTreeScroller = new javax.swing.JScrollPane ();
    m_jtFiles = new javax.swing.JTree ();
    FileTreeNode ftnRoot = new FileTreeNode(new File ("."));
    m_dtmFileModel = new DefaultTreeModel (ftnRoot, true);
    ftnRoot.fill (m_dtmFileModel);
    m_jspProperties = new javax.swing.JScrollPane ();
    m_jtPropertiesTable = new javax.swing.JTable ();
    getContentPane ().setLayout (new java.awt.GridBagLayout ());
    java.awt.GridBagConstraints gridBagConstraints2;
    setDefaultCloseOperation (javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    addWindowListener (new java.awt.event.WindowAdapter () {
      public void windowClosing (java.awt.event.WindowEvent evt) {
        closeDialog (evt);
      }
    }
    );

    m_jspSplitter.setRightComponent (null);
    m_jspSplitter.setLeftComponent (null);
    m_jspSplitter.setBottomComponent (null);
    m_jspSplitter.setTopComponent (null);

      m_jpLeft.setLayout (new java.awt.BorderLayout ());
  
        m_jtbTreeBar.setFloatable (false);
    
          m_jbUpOneLevel.setIcon (new javax.swing.ImageIcon (getClass ().getResource ("/tudresden/ocl/injection/reverseeng/upOneLevel.gif")));
          m_jbUpOneLevel.setPreferredSize (new java.awt.Dimension(25, 25));
          m_jbUpOneLevel.setMaximumSize (new java.awt.Dimension(25, 25));
          m_jbUpOneLevel.setMinimumSize (new java.awt.Dimension(25, 25));
      
          m_jtbTreeBar.add (m_jbUpOneLevel);
      
        m_jpLeft.add (m_jtbTreeBar, java.awt.BorderLayout.NORTH);
    
    
          m_jtFiles.setModel (m_dtmFileModel);
          m_jtFiles.setCellRenderer (new FileTreeNodeRenderer());
          m_jtFiles.addTreeWillExpandListener (new javax.swing.event.TreeWillExpandListener () {
            public void treeWillCollapse (javax.swing.event.TreeExpansionEvent evt)
            throws javax.swing.tree.ExpandVetoException {
      
            }
            public void treeWillExpand (javax.swing.event.TreeExpansionEvent evt)
            throws javax.swing.tree.ExpandVetoException {
              m_jtFilesTreeWillExpand (evt);
            }
          }
          );
      
          m_jspTreeScroller.setViewportView (m_jtFiles);
      
        m_jpLeft.add (m_jspTreeScroller, java.awt.BorderLayout.CENTER);
    
      m_jspSplitter.setLeftComponent (m_jpLeft);
  
  
        m_jtPropertiesTable.setModel (new javax.swing.table.DefaultTableModel (
        new Object [][] {
        {"Key type", null},
        {"Element type", null}
        },
        new String [] {
          "", ""
        }
        ) {
          boolean[] canEdit = new boolean [] {
            false, true
          };
    
          public boolean isCellEditable (int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
          }
        });
    
        m_jspProperties.setViewportView (m_jtPropertiesTable);
    
      m_jspSplitter.setRightComponent (m_jspProperties);
  

    gridBagConstraints2 = new java.awt.GridBagConstraints ();
    gridBagConstraints2.gridx = 0;
    gridBagConstraints2.gridy = 0;
    gridBagConstraints2.gridwidth = 0;
    gridBagConstraints2.gridheight = 0;
    gridBagConstraints2.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints2.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints2.weightx = 1.0;
    gridBagConstraints2.weighty = 1.0;
    getContentPane ().add (m_jspSplitter, gridBagConstraints2);

  }//GEN-END:initComponents

  private void m_jtFilesTreeWillExpand (javax.swing.event.TreeExpansionEvent evt) throws ExpandVetoException {//GEN-FIRST:event_m_jtFilesTreeWillExpand
    RevengTreeNode rtn = (RevengTreeNode) evt.getPath ().getLastPathComponent ();

    rtn.fill (m_dtmFileModel);
    if (! rtn.getAllowsChildren ()) {
      throw new ExpandVetoException (evt);
    }
  }//GEN-LAST:event_m_jtFilesTreeWillExpand

  /** Closes the dialog */
  private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
    setVisible (false);
    dispose ();
    System.exit (0);
  }//GEN-LAST:event_closeDialog
  
  abstract class RevengTreeNode extends DefaultMutableTreeNode {
    public RevengTreeNode() {
      super();
    }
    
    public abstract Icon getIcon (boolean fExpanded);
    public abstract void fill (DefaultTreeModel dtmModel);
  }
  
  class CollectionTreeNode extends RevengTreeNode {
    public CollectionTreeNode (CollectionDescriptor cd) {
      super();
      
      setUserObject (cd);
      setAllowsChildren(false);
    }
    
    public Icon getIcon (boolean fExpanded) {
      return javax.swing.UIManager.getIcon ("Tree.leafIcon");
    }
    
    public void fill (DefaultTreeModel dtm) {
      setAllowsChildren (false);
      
      dtm.nodeChanged (this);
    }
    
    public CollectionDescriptor getDescriptor() {
      return (CollectionDescriptor) getUserObject();
    }
    
    public String toString () {      
      CollectionDescriptor cd = getDescriptor();
      
      return "Collection<" + ((cd.getElementType() != null)?(cd.getElementType()):("Unknown Type")) + "> " + cd.getName();
    }
  }
  
  class FileTreeNode extends RevengTreeNode {
    public FileTreeNode () {
      super();
    }
    
    public FileTreeNode (File f) {
      this();
      
      setFile (f);
    }
    
    public void setFile (File f) {
      setUserObject (f);
    }
    
    public File getFile() {
      return (File) getUserObject ();
    }
    
    public Icon getIcon (boolean fExpanded) {
      if (getFile().isDirectory()) {
        if (fExpanded) {
          return javax.swing.UIManager.getIcon ("Tree.closedIcon");
        }
        else {
          return javax.swing.UIManager.getIcon ("Tree.openIcon");
        }
      }
      else {
        return javax.swing.UIManager.getIcon ("Tree.leafIcon");
      }
    }
    
    public void fill (String sDirectory, DefaultTreeModel dtmModel) {
      setFile (new File (sDirectory));
      fill (dtmModel);
    }
    
    public void fill (DefaultTreeModel dtmModel) {
      File fLister = getFile();
      
      if (fLister.isDirectory()) {
        File[] afFiles = fLister.listFiles (new FileFilter() {
          public boolean accept (File f) {
            return ((f.isDirectory()) ||
                     (f.getName().endsWith (".java")));
          }
        });

        if (afFiles.length == 0) {
          setAllowsChildren (false);
          
          dtmModel.nodeChanged (this);
        }
        else {
          List lFiles = Arrays.asList (afFiles);
          Collections.sort (lFiles, new Comparator() {
            // Sort directories before files, same type sort lexikographically
            public int compare (Object o1, Object o2) {
              File f1 = (File) o1;
              File f2 = (File) o2;
              
              if (f1.isDirectory() == f2.isDirectory()) {
                // Either two directories or two files
                return String.CASE_INSENSITIVE_ORDER.compare (f1.getName(), f2.getName());
              }
              else {
                // One directory, one file
                if (f1.isDirectory()) {
                  // f1 is the directory, which is "smaller" than the file f2.
                  return -1;
                }
                else {
                  // f2 is the directory, so f1 is "greater" than f2.
                  return 1;
                }
              }
            }
          });
          
          for (Iterator i = lFiles.iterator(); i.hasNext();) {
            add (new FileTreeNode ((File) i.next()));
          }

          dtmModel.nodeStructureChanged (this);
        } 
      }
      else {
        // Current node is java file
        try {
          AnalysisConsumer ac = AnalysisConsumer.analyse (fLister);
          
          for (Iterator i = ac.getCollections().iterator(); i.hasNext();) {
            add (new CollectionTreeNode ((CollectionDescriptor) i.next()));
          }
        }
        catch (Throwable t) {
          t.printStackTrace ();
          
          setAllowsChildren(false);
        }
      }
    }
    
    public String toString() {
      return ((getFile() != null)?
               (getFile().getName()):
               ("<>"));
    }
  }

  class FileTreeNodeRenderer extends DefaultTreeCellRenderer {
    public FileTreeNodeRenderer () {
      super();
    }
    
    public java.awt.Component getTreeCellRendererComponent (javax.swing.JTree tree,
                                                                  Object value,
                                                                  boolean sel,
                                                                  boolean expanded,
                                                                  boolean leaf,
                                                                  int row,
                                                                  boolean hasFocus) {
      super.getTreeCellRendererComponent (tree, value, sel, expanded, leaf, row, hasFocus);
      
      RevengTreeNode rtn = (RevengTreeNode) value;
      
      setIcon (rtn.getIcon (expanded));
      
      return this;
    }
  }
  
  /**
  * @param args the command line arguments
  */
  public static void main (String args[]) {
    new RevengGUI (new javax.swing.JFrame (), true).show ();
  }


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JSplitPane m_jspSplitter;
  private javax.swing.JPanel m_jpLeft;
  private javax.swing.JToolBar m_jtbTreeBar;
  private javax.swing.JButton m_jbUpOneLevel;
  private javax.swing.JScrollPane m_jspTreeScroller;
  private javax.swing.JTree m_jtFiles;
  private javax.swing.JScrollPane m_jspProperties;
  private javax.swing.JTable m_jtPropertiesTable;
  // End of variables declaration//GEN-END:variables

}
