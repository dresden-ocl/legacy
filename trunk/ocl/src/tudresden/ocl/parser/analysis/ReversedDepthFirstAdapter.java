/* This file was generated by SableCC (http://www.sable.mcgill.ca/sablecc/). */

package tudresden.ocl.parser.analysis;

import tudresden.ocl.parser.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPConstraint().apply(this);
        outStart(node);
    }

    public void inAConstraint(AConstraint node)
    {
        defaultIn(node);
    }

    public void outAConstraint(AConstraint node)
    {
        defaultOut(node);
    }

    public void caseAConstraint(AConstraint node)
    {
        inAConstraint(node);
        {
            Object temp[] = node.getConstraintBody().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PConstraintBody) temp[i]).apply(this);
            }
        }
        if(node.getContextDeclaration() != null)
        {
            node.getContextDeclaration().apply(this);
        }
        outAConstraint(node);
    }

    public void inAConstraintBody(AConstraintBody node)
    {
        defaultIn(node);
    }

    public void outAConstraintBody(AConstraintBody node)
    {
        defaultOut(node);
    }

    public void caseAConstraintBody(AConstraintBody node)
    {
        inAConstraintBody(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getStereotype() != null)
        {
            node.getStereotype().apply(this);
        }
        outAConstraintBody(node);
    }

    public void inAContextDeclaration(AContextDeclaration node)
    {
        defaultIn(node);
    }

    public void outAContextDeclaration(AContextDeclaration node)
    {
        defaultOut(node);
    }

    public void caseAContextDeclaration(AContextDeclaration node)
    {
        inAContextDeclaration(node);
        if(node.getContextBody() != null)
        {
            node.getContextBody().apply(this);
        }
        if(node.getContext() != null)
        {
            node.getContext().apply(this);
        }
        outAContextDeclaration(node);
    }

    public void inAClassifierContextBody(AClassifierContextBody node)
    {
        defaultIn(node);
    }

    public void outAClassifierContextBody(AClassifierContextBody node)
    {
        defaultOut(node);
    }

    public void caseAClassifierContextBody(AClassifierContextBody node)
    {
        inAClassifierContextBody(node);
        if(node.getClassifierContext() != null)
        {
            node.getClassifierContext().apply(this);
        }
        outAClassifierContextBody(node);
    }

    public void inAOperationContextBody(AOperationContextBody node)
    {
        defaultIn(node);
    }

    public void outAOperationContextBody(AOperationContextBody node)
    {
        defaultOut(node);
    }

    public void caseAOperationContextBody(AOperationContextBody node)
    {
        inAOperationContextBody(node);
        if(node.getOperationContext() != null)
        {
            node.getOperationContext().apply(this);
        }
        outAOperationContextBody(node);
    }

    public void inAClassifierContext(AClassifierContext node)
    {
        defaultIn(node);
    }

    public void outAClassifierContext(AClassifierContext node)
    {
        defaultOut(node);
    }

    public void caseAClassifierContext(AClassifierContext node)
    {
        inAClassifierContext(node);
        if(node.getTypeName() != null)
        {
            node.getTypeName().apply(this);
        }
        if(node.getClassifierHead() != null)
        {
            node.getClassifierHead().apply(this);
        }
        outAClassifierContext(node);
    }

    public void inAClassifierHead(AClassifierHead node)
    {
        defaultIn(node);
    }

    public void outAClassifierHead(AClassifierHead node)
    {
        defaultOut(node);
    }

    public void caseAClassifierHead(AClassifierHead node)
    {
        inAClassifierHead(node);
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAClassifierHead(node);
    }

    public void inAOperationContext(AOperationContext node)
    {
        defaultIn(node);
    }

    public void outAOperationContext(AOperationContext node)
    {
        defaultOut(node);
    }

    public void caseAOperationContext(AOperationContext node)
    {
        inAOperationContext(node);
        if(node.getReturnTypeDeclaration() != null)
        {
            node.getReturnTypeDeclaration().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getFormalParameterList() != null)
        {
            node.getFormalParameterList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getDcolon() != null)
        {
            node.getDcolon().apply(this);
        }
        if(node.getTypeName() != null)
        {
            node.getTypeName().apply(this);
        }
        outAOperationContext(node);
    }

    public void inAReturnTypeDeclaration(AReturnTypeDeclaration node)
    {
        defaultIn(node);
    }

    public void outAReturnTypeDeclaration(AReturnTypeDeclaration node)
    {
        defaultOut(node);
    }

    public void caseAReturnTypeDeclaration(AReturnTypeDeclaration node)
    {
        inAReturnTypeDeclaration(node);
        if(node.getTypeName() != null)
        {
            node.getTypeName().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        outAReturnTypeDeclaration(node);
    }

    public void inAFormalParameterList(AFormalParameterList node)
    {
        defaultIn(node);
    }

    public void outAFormalParameterList(AFormalParameterList node)
    {
        defaultOut(node);
    }

    public void caseAFormalParameterList(AFormalParameterList node)
    {
        inAFormalParameterList(node);
        {
            Object temp[] = node.getFormalParameterListTail().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PFormalParameterListTail) temp[i]).apply(this);
            }
        }
        if(node.getFormalParameter() != null)
        {
            node.getFormalParameter().apply(this);
        }
        outAFormalParameterList(node);
    }

    public void inAFormalParameterListTail(AFormalParameterListTail node)
    {
        defaultIn(node);
    }

    public void outAFormalParameterListTail(AFormalParameterListTail node)
    {
        defaultOut(node);
    }

    public void caseAFormalParameterListTail(AFormalParameterListTail node)
    {
        inAFormalParameterListTail(node);
        if(node.getFormalParameter() != null)
        {
            node.getFormalParameter().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAFormalParameterListTail(node);
    }

    public void inAFormalParameter(AFormalParameter node)
    {
        defaultIn(node);
    }

    public void outAFormalParameter(AFormalParameter node)
    {
        defaultOut(node);
    }

    public void caseAFormalParameter(AFormalParameter node)
    {
        inAFormalParameter(node);
        if(node.getTypeName() != null)
        {
            node.getTypeName().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAFormalParameter(node);
    }

    public void inAInvStereotype(AInvStereotype node)
    {
        defaultIn(node);
    }

    public void outAInvStereotype(AInvStereotype node)
    {
        defaultOut(node);
    }

    public void caseAInvStereotype(AInvStereotype node)
    {
        inAInvStereotype(node);
        if(node.getTInv() != null)
        {
            node.getTInv().apply(this);
        }
        outAInvStereotype(node);
    }

    public void inAPreStereotype(APreStereotype node)
    {
        defaultIn(node);
    }

    public void outAPreStereotype(APreStereotype node)
    {
        defaultOut(node);
    }

    public void caseAPreStereotype(APreStereotype node)
    {
        inAPreStereotype(node);
        if(node.getTPre() != null)
        {
            node.getTPre().apply(this);
        }
        outAPreStereotype(node);
    }

    public void inAPostStereotype(APostStereotype node)
    {
        defaultIn(node);
    }

    public void outAPostStereotype(APostStereotype node)
    {
        defaultOut(node);
    }

    public void caseAPostStereotype(APostStereotype node)
    {
        inAPostStereotype(node);
        if(node.getTPost() != null)
        {
            node.getTPost().apply(this);
        }
        outAPostStereotype(node);
    }

    public void inAExpression(AExpression node)
    {
        defaultIn(node);
    }

    public void outAExpression(AExpression node)
    {
        defaultOut(node);
    }

    public void caseAExpression(AExpression node)
    {
        inAExpression(node);
        if(node.getLogicalExpression() != null)
        {
            node.getLogicalExpression().apply(this);
        }
        {
            Object temp[] = node.getLetExpression().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PLetExpression) temp[i]).apply(this);
            }
        }
        outAExpression(node);
    }

    public void inAIfExpression(AIfExpression node)
    {
        defaultIn(node);
    }

    public void outAIfExpression(AIfExpression node)
    {
        defaultOut(node);
    }

    public void caseAIfExpression(AIfExpression node)
    {
        inAIfExpression(node);
        if(node.getEndif() != null)
        {
            node.getEndif().apply(this);
        }
        if(node.getElseBranch() != null)
        {
            node.getElseBranch().apply(this);
        }
        if(node.getTElse() != null)
        {
            node.getTElse().apply(this);
        }
        if(node.getThenBranch() != null)
        {
            node.getThenBranch().apply(this);
        }
        if(node.getTThen() != null)
        {
            node.getTThen().apply(this);
        }
        if(node.getIfBranch() != null)
        {
            node.getIfBranch().apply(this);
        }
        if(node.getTIf() != null)
        {
            node.getTIf().apply(this);
        }
        outAIfExpression(node);
    }

    public void inALogicalExpression(ALogicalExpression node)
    {
        defaultIn(node);
    }

    public void outALogicalExpression(ALogicalExpression node)
    {
        defaultOut(node);
    }

    public void caseALogicalExpression(ALogicalExpression node)
    {
        inALogicalExpression(node);
        {
            Object temp[] = node.getLogicalExpressionTail().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PLogicalExpressionTail) temp[i]).apply(this);
            }
        }
        if(node.getRelationalExpression() != null)
        {
            node.getRelationalExpression().apply(this);
        }
        outALogicalExpression(node);
    }

    public void inALogicalExpressionTail(ALogicalExpressionTail node)
    {
        defaultIn(node);
    }

    public void outALogicalExpressionTail(ALogicalExpressionTail node)
    {
        defaultOut(node);
    }

    public void caseALogicalExpressionTail(ALogicalExpressionTail node)
    {
        inALogicalExpressionTail(node);
        if(node.getRelationalExpression() != null)
        {
            node.getRelationalExpression().apply(this);
        }
        if(node.getLogicalOperator() != null)
        {
            node.getLogicalOperator().apply(this);
        }
        outALogicalExpressionTail(node);
    }

    public void inARelationalExpression(ARelationalExpression node)
    {
        defaultIn(node);
    }

    public void outARelationalExpression(ARelationalExpression node)
    {
        defaultOut(node);
    }

    public void caseARelationalExpression(ARelationalExpression node)
    {
        inARelationalExpression(node);
        if(node.getRelationalExpressionTail() != null)
        {
            node.getRelationalExpressionTail().apply(this);
        }
        if(node.getAdditiveExpression() != null)
        {
            node.getAdditiveExpression().apply(this);
        }
        outARelationalExpression(node);
    }

    public void inARelationalExpressionTail(ARelationalExpressionTail node)
    {
        defaultIn(node);
    }

    public void outARelationalExpressionTail(ARelationalExpressionTail node)
    {
        defaultOut(node);
    }

    public void caseARelationalExpressionTail(ARelationalExpressionTail node)
    {
        inARelationalExpressionTail(node);
        if(node.getAdditiveExpression() != null)
        {
            node.getAdditiveExpression().apply(this);
        }
        if(node.getRelationalOperator() != null)
        {
            node.getRelationalOperator().apply(this);
        }
        outARelationalExpressionTail(node);
    }

    public void inAAdditiveExpression(AAdditiveExpression node)
    {
        defaultIn(node);
    }

    public void outAAdditiveExpression(AAdditiveExpression node)
    {
        defaultOut(node);
    }

    public void caseAAdditiveExpression(AAdditiveExpression node)
    {
        inAAdditiveExpression(node);
        {
            Object temp[] = node.getAdditiveExpressionTail().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PAdditiveExpressionTail) temp[i]).apply(this);
            }
        }
        if(node.getMultiplicativeExpression() != null)
        {
            node.getMultiplicativeExpression().apply(this);
        }
        outAAdditiveExpression(node);
    }

    public void inAAdditiveExpressionTail(AAdditiveExpressionTail node)
    {
        defaultIn(node);
    }

    public void outAAdditiveExpressionTail(AAdditiveExpressionTail node)
    {
        defaultOut(node);
    }

    public void caseAAdditiveExpressionTail(AAdditiveExpressionTail node)
    {
        inAAdditiveExpressionTail(node);
        if(node.getMultiplicativeExpression() != null)
        {
            node.getMultiplicativeExpression().apply(this);
        }
        if(node.getAddOperator() != null)
        {
            node.getAddOperator().apply(this);
        }
        outAAdditiveExpressionTail(node);
    }

    public void inAMultiplicativeExpression(AMultiplicativeExpression node)
    {
        defaultIn(node);
    }

    public void outAMultiplicativeExpression(AMultiplicativeExpression node)
    {
        defaultOut(node);
    }

    public void caseAMultiplicativeExpression(AMultiplicativeExpression node)
    {
        inAMultiplicativeExpression(node);
        {
            Object temp[] = node.getMultiplicativeExpressionTail().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PMultiplicativeExpressionTail) temp[i]).apply(this);
            }
        }
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        outAMultiplicativeExpression(node);
    }

    public void inAMultiplicativeExpressionTail(AMultiplicativeExpressionTail node)
    {
        defaultIn(node);
    }

    public void outAMultiplicativeExpressionTail(AMultiplicativeExpressionTail node)
    {
        defaultOut(node);
    }

    public void caseAMultiplicativeExpressionTail(AMultiplicativeExpressionTail node)
    {
        inAMultiplicativeExpressionTail(node);
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        if(node.getMultiplyOperator() != null)
        {
            node.getMultiplyOperator().apply(this);
        }
        outAMultiplicativeExpressionTail(node);
    }

    public void inAUnaryUnaryExpression(AUnaryUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outAUnaryUnaryExpression(AUnaryUnaryExpression node)
    {
        defaultOut(node);
    }

    public void caseAUnaryUnaryExpression(AUnaryUnaryExpression node)
    {
        inAUnaryUnaryExpression(node);
        if(node.getPostfixExpression() != null)
        {
            node.getPostfixExpression().apply(this);
        }
        if(node.getUnaryOperator() != null)
        {
            node.getUnaryOperator().apply(this);
        }
        outAUnaryUnaryExpression(node);
    }

    public void inAPostfixUnaryExpression(APostfixUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outAPostfixUnaryExpression(APostfixUnaryExpression node)
    {
        defaultOut(node);
    }

    public void caseAPostfixUnaryExpression(APostfixUnaryExpression node)
    {
        inAPostfixUnaryExpression(node);
        if(node.getPostfixExpression() != null)
        {
            node.getPostfixExpression().apply(this);
        }
        outAPostfixUnaryExpression(node);
    }

    public void inAPostfixExpression(APostfixExpression node)
    {
        defaultIn(node);
    }

    public void outAPostfixExpression(APostfixExpression node)
    {
        defaultOut(node);
    }

    public void caseAPostfixExpression(APostfixExpression node)
    {
        inAPostfixExpression(node);
        {
            Object temp[] = node.getPostfixExpressionTail().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PPostfixExpressionTail) temp[i]).apply(this);
            }
        }
        if(node.getPrimaryExpression() != null)
        {
            node.getPrimaryExpression().apply(this);
        }
        outAPostfixExpression(node);
    }

    public void inAPostfixExpressionTail(APostfixExpressionTail node)
    {
        defaultIn(node);
    }

    public void outAPostfixExpressionTail(APostfixExpressionTail node)
    {
        defaultOut(node);
    }

    public void caseAPostfixExpressionTail(APostfixExpressionTail node)
    {
        inAPostfixExpressionTail(node);
        if(node.getFeatureCall() != null)
        {
            node.getFeatureCall().apply(this);
        }
        if(node.getPostfixExpressionTailBegin() != null)
        {
            node.getPostfixExpressionTailBegin().apply(this);
        }
        outAPostfixExpressionTail(node);
    }

    public void inADotPostfixExpressionTailBegin(ADotPostfixExpressionTailBegin node)
    {
        defaultIn(node);
    }

    public void outADotPostfixExpressionTailBegin(ADotPostfixExpressionTailBegin node)
    {
        defaultOut(node);
    }

    public void caseADotPostfixExpressionTailBegin(ADotPostfixExpressionTailBegin node)
    {
        inADotPostfixExpressionTailBegin(node);
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        outADotPostfixExpressionTailBegin(node);
    }

    public void inAArrowPostfixExpressionTailBegin(AArrowPostfixExpressionTailBegin node)
    {
        defaultIn(node);
    }

    public void outAArrowPostfixExpressionTailBegin(AArrowPostfixExpressionTailBegin node)
    {
        defaultOut(node);
    }

    public void caseAArrowPostfixExpressionTailBegin(AArrowPostfixExpressionTailBegin node)
    {
        inAArrowPostfixExpressionTailBegin(node);
        if(node.getArrow() != null)
        {
            node.getArrow().apply(this);
        }
        outAArrowPostfixExpressionTailBegin(node);
    }

    public void inALitColPrimaryExpression(ALitColPrimaryExpression node)
    {
        defaultIn(node);
    }

    public void outALitColPrimaryExpression(ALitColPrimaryExpression node)
    {
        defaultOut(node);
    }

    public void caseALitColPrimaryExpression(ALitColPrimaryExpression node)
    {
        inALitColPrimaryExpression(node);
        if(node.getLiteralCollection() != null)
        {
            node.getLiteralCollection().apply(this);
        }
        outALitColPrimaryExpression(node);
    }

    public void inALiteralPrimaryExpression(ALiteralPrimaryExpression node)
    {
        defaultIn(node);
    }

    public void outALiteralPrimaryExpression(ALiteralPrimaryExpression node)
    {
        defaultOut(node);
    }

    public void caseALiteralPrimaryExpression(ALiteralPrimaryExpression node)
    {
        inALiteralPrimaryExpression(node);
        if(node.getLiteral() != null)
        {
            node.getLiteral().apply(this);
        }
        outALiteralPrimaryExpression(node);
    }

    public void inAFeaturePrimaryExpression(AFeaturePrimaryExpression node)
    {
        defaultIn(node);
    }

    public void outAFeaturePrimaryExpression(AFeaturePrimaryExpression node)
    {
        defaultOut(node);
    }

    public void caseAFeaturePrimaryExpression(AFeaturePrimaryExpression node)
    {
        inAFeaturePrimaryExpression(node);
        if(node.getFeatureCallParameters() != null)
        {
            node.getFeatureCallParameters().apply(this);
        }
        if(node.getQualifiers() != null)
        {
            node.getQualifiers().apply(this);
        }
        if(node.getTimeExpression() != null)
        {
            node.getTimeExpression().apply(this);
        }
        if(node.getPathName() != null)
        {
            node.getPathName().apply(this);
        }
        outAFeaturePrimaryExpression(node);
    }

    public void inAParenthesesPrimaryExpression(AParenthesesPrimaryExpression node)
    {
        defaultIn(node);
    }

    public void outAParenthesesPrimaryExpression(AParenthesesPrimaryExpression node)
    {
        defaultOut(node);
    }

    public void caseAParenthesesPrimaryExpression(AParenthesesPrimaryExpression node)
    {
        inAParenthesesPrimaryExpression(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAParenthesesPrimaryExpression(node);
    }

    public void inAIfPrimaryExpression(AIfPrimaryExpression node)
    {
        defaultIn(node);
    }

    public void outAIfPrimaryExpression(AIfPrimaryExpression node)
    {
        defaultOut(node);
    }

    public void caseAIfPrimaryExpression(AIfPrimaryExpression node)
    {
        inAIfPrimaryExpression(node);
        if(node.getIfExpression() != null)
        {
            node.getIfExpression().apply(this);
        }
        outAIfPrimaryExpression(node);
    }

    public void inAEmptyFeatureCallParameters(AEmptyFeatureCallParameters node)
    {
        defaultIn(node);
    }

    public void outAEmptyFeatureCallParameters(AEmptyFeatureCallParameters node)
    {
        defaultOut(node);
    }

    public void caseAEmptyFeatureCallParameters(AEmptyFeatureCallParameters node)
    {
        inAEmptyFeatureCallParameters(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAEmptyFeatureCallParameters(node);
    }

    public void inAConcreteFeatureCallParameters(AConcreteFeatureCallParameters node)
    {
        defaultIn(node);
    }

    public void outAConcreteFeatureCallParameters(AConcreteFeatureCallParameters node)
    {
        defaultOut(node);
    }

    public void caseAConcreteFeatureCallParameters(AConcreteFeatureCallParameters node)
    {
        inAConcreteFeatureCallParameters(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        {
            Object temp[] = node.getFcpHelper().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PFcpHelper) temp[i]).apply(this);
            }
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAConcreteFeatureCallParameters(node);
    }

    public void inAFeatureCallParameters(AFeatureCallParameters node)
    {
        defaultIn(node);
    }

    public void outAFeatureCallParameters(AFeatureCallParameters node)
    {
        defaultOut(node);
    }

    public void caseAFeatureCallParameters(AFeatureCallParameters node)
    {
        inAFeatureCallParameters(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getActualParameterList() != null)
        {
            node.getActualParameterList().apply(this);
        }
        if(node.getDeclarator() != null)
        {
            node.getDeclarator().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAFeatureCallParameters(node);
    }

    public void inACommaFcpHelper(ACommaFcpHelper node)
    {
        defaultIn(node);
    }

    public void outACommaFcpHelper(ACommaFcpHelper node)
    {
        defaultOut(node);
    }

    public void caseACommaFcpHelper(ACommaFcpHelper node)
    {
        inACommaFcpHelper(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outACommaFcpHelper(node);
    }

    public void inAColonFcpHelper(AColonFcpHelper node)
    {
        defaultIn(node);
    }

    public void outAColonFcpHelper(AColonFcpHelper node)
    {
        defaultOut(node);
    }

    public void caseAColonFcpHelper(AColonFcpHelper node)
    {
        inAColonFcpHelper(node);
        if(node.getSimpleTypeSpecifier() != null)
        {
            node.getSimpleTypeSpecifier().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        outAColonFcpHelper(node);
    }

    public void inAIterateFcpHelper(AIterateFcpHelper node)
    {
        defaultIn(node);
    }

    public void outAIterateFcpHelper(AIterateFcpHelper node)
    {
        defaultOut(node);
    }

    public void caseAIterateFcpHelper(AIterateFcpHelper node)
    {
        inAIterateFcpHelper(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getSimpleTypeSpecifier() != null)
        {
            node.getSimpleTypeSpecifier().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAIterateFcpHelper(node);
    }

    public void inABarFcpHelper(ABarFcpHelper node)
    {
        defaultIn(node);
    }

    public void outABarFcpHelper(ABarFcpHelper node)
    {
        defaultOut(node);
    }

    public void caseABarFcpHelper(ABarFcpHelper node)
    {
        inABarFcpHelper(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getBar() != null)
        {
            node.getBar().apply(this);
        }
        outABarFcpHelper(node);
    }

    public void inALetExpression(ALetExpression node)
    {
        defaultIn(node);
    }

    public void outALetExpression(ALetExpression node)
    {
        defaultOut(node);
    }

    public void caseALetExpression(ALetExpression node)
    {
        inALetExpression(node);
        if(node.getTIn() != null)
        {
            node.getTIn().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getLetExpressionTypeDeclaration() != null)
        {
            node.getLetExpressionTypeDeclaration().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getTLet() != null)
        {
            node.getTLet().apply(this);
        }
        outALetExpression(node);
    }

    public void inALetExpressionTypeDeclaration(ALetExpressionTypeDeclaration node)
    {
        defaultIn(node);
    }

    public void outALetExpressionTypeDeclaration(ALetExpressionTypeDeclaration node)
    {
        defaultOut(node);
    }

    public void caseALetExpressionTypeDeclaration(ALetExpressionTypeDeclaration node)
    {
        inALetExpressionTypeDeclaration(node);
        if(node.getPathTypeName() != null)
        {
            node.getPathTypeName().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        outALetExpressionTypeDeclaration(node);
    }

    public void inAStringLiteral(AStringLiteral node)
    {
        defaultIn(node);
    }

    public void outAStringLiteral(AStringLiteral node)
    {
        defaultOut(node);
    }

    public void caseAStringLiteral(AStringLiteral node)
    {
        inAStringLiteral(node);
        if(node.getStringLit() != null)
        {
            node.getStringLit().apply(this);
        }
        outAStringLiteral(node);
    }

    public void inARealLiteral(ARealLiteral node)
    {
        defaultIn(node);
    }

    public void outARealLiteral(ARealLiteral node)
    {
        defaultOut(node);
    }

    public void caseARealLiteral(ARealLiteral node)
    {
        inARealLiteral(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outARealLiteral(node);
    }

    public void inAIntegerLiteral(AIntegerLiteral node)
    {
        defaultIn(node);
    }

    public void outAIntegerLiteral(AIntegerLiteral node)
    {
        defaultOut(node);
    }

    public void caseAIntegerLiteral(AIntegerLiteral node)
    {
        inAIntegerLiteral(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntegerLiteral(node);
    }

    public void inABooleanLiteral(ABooleanLiteral node)
    {
        defaultIn(node);
    }

    public void outABooleanLiteral(ABooleanLiteral node)
    {
        defaultOut(node);
    }

    public void caseABooleanLiteral(ABooleanLiteral node)
    {
        inABooleanLiteral(node);
        if(node.getBool() != null)
        {
            node.getBool().apply(this);
        }
        outABooleanLiteral(node);
    }

    public void inAEnumLiteral(AEnumLiteral node)
    {
        defaultIn(node);
    }

    public void outAEnumLiteral(AEnumLiteral node)
    {
        defaultOut(node);
    }

    public void caseAEnumLiteral(AEnumLiteral node)
    {
        inAEnumLiteral(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getChannel() != null)
        {
            node.getChannel().apply(this);
        }
        outAEnumLiteral(node);
    }

    public void inAEnumerationType(AEnumerationType node)
    {
        defaultIn(node);
    }

    public void outAEnumerationType(AEnumerationType node)
    {
        defaultOut(node);
    }

    public void caseAEnumerationType(AEnumerationType node)
    {
        inAEnumerationType(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        {
            Object temp[] = node.getEnumerationTypeTail().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PEnumerationTypeTail) temp[i]).apply(this);
            }
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getChannel() != null)
        {
            node.getChannel().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getEnum() != null)
        {
            node.getEnum().apply(this);
        }
        outAEnumerationType(node);
    }

    public void inAEnumerationTypeTail(AEnumerationTypeTail node)
    {
        defaultIn(node);
    }

    public void outAEnumerationTypeTail(AEnumerationTypeTail node)
    {
        defaultOut(node);
    }

    public void caseAEnumerationTypeTail(AEnumerationTypeTail node)
    {
        inAEnumerationTypeTail(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getChannel() != null)
        {
            node.getChannel().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAEnumerationTypeTail(node);
    }

    public void inAPathSimpleTypeSpecifier(APathSimpleTypeSpecifier node)
    {
        defaultIn(node);
    }

    public void outAPathSimpleTypeSpecifier(APathSimpleTypeSpecifier node)
    {
        defaultOut(node);
    }

    public void caseAPathSimpleTypeSpecifier(APathSimpleTypeSpecifier node)
    {
        inAPathSimpleTypeSpecifier(node);
        if(node.getPathTypeName() != null)
        {
            node.getPathTypeName().apply(this);
        }
        outAPathSimpleTypeSpecifier(node);
    }

    public void inAEnumSimpleTypeSpecifier(AEnumSimpleTypeSpecifier node)
    {
        defaultIn(node);
    }

    public void outAEnumSimpleTypeSpecifier(AEnumSimpleTypeSpecifier node)
    {
        defaultOut(node);
    }

    public void caseAEnumSimpleTypeSpecifier(AEnumSimpleTypeSpecifier node)
    {
        inAEnumSimpleTypeSpecifier(node);
        if(node.getEnumerationType() != null)
        {
            node.getEnumerationType().apply(this);
        }
        outAEnumSimpleTypeSpecifier(node);
    }

    public void inALiteralCollection(ALiteralCollection node)
    {
        defaultIn(node);
    }

    public void outALiteralCollection(ALiteralCollection node)
    {
        defaultOut(node);
    }

    public void caseALiteralCollection(ALiteralCollection node)
    {
        inALiteralCollection(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getExpressionListOrRange() != null)
        {
            node.getExpressionListOrRange().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getCollectionKind() != null)
        {
            node.getCollectionKind().apply(this);
        }
        outALiteralCollection(node);
    }

    public void inAExpressionListOrRange(AExpressionListOrRange node)
    {
        defaultIn(node);
    }

    public void outAExpressionListOrRange(AExpressionListOrRange node)
    {
        defaultOut(node);
    }

    public void caseAExpressionListOrRange(AExpressionListOrRange node)
    {
        inAExpressionListOrRange(node);
        if(node.getExpressionListOrRangeTail() != null)
        {
            node.getExpressionListOrRangeTail().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAExpressionListOrRange(node);
    }

    public void inAListExpressionListOrRangeTail(AListExpressionListOrRangeTail node)
    {
        defaultIn(node);
    }

    public void outAListExpressionListOrRangeTail(AListExpressionListOrRangeTail node)
    {
        defaultOut(node);
    }

    public void caseAListExpressionListOrRangeTail(AListExpressionListOrRangeTail node)
    {
        inAListExpressionListOrRangeTail(node);
        {
            Object temp[] = node.getExpressionListTail().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PExpressionListTail) temp[i]).apply(this);
            }
        }
        outAListExpressionListOrRangeTail(node);
    }

    public void inARangeExpressionListOrRangeTail(ARangeExpressionListOrRangeTail node)
    {
        defaultIn(node);
    }

    public void outARangeExpressionListOrRangeTail(ARangeExpressionListOrRangeTail node)
    {
        defaultOut(node);
    }

    public void caseARangeExpressionListOrRangeTail(ARangeExpressionListOrRangeTail node)
    {
        inARangeExpressionListOrRangeTail(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getDdot() != null)
        {
            node.getDdot().apply(this);
        }
        outARangeExpressionListOrRangeTail(node);
    }

    public void inAExpressionListTail(AExpressionListTail node)
    {
        defaultIn(node);
    }

    public void outAExpressionListTail(AExpressionListTail node)
    {
        defaultOut(node);
    }

    public void caseAExpressionListTail(AExpressionListTail node)
    {
        inAExpressionListTail(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAExpressionListTail(node);
    }

    public void inAFeatureCall(AFeatureCall node)
    {
        defaultIn(node);
    }

    public void outAFeatureCall(AFeatureCall node)
    {
        defaultOut(node);
    }

    public void caseAFeatureCall(AFeatureCall node)
    {
        inAFeatureCall(node);
        if(node.getFeatureCallParameters() != null)
        {
            node.getFeatureCallParameters().apply(this);
        }
        if(node.getQualifiers() != null)
        {
            node.getQualifiers().apply(this);
        }
        if(node.getTimeExpression() != null)
        {
            node.getTimeExpression().apply(this);
        }
        if(node.getPathName() != null)
        {
            node.getPathName().apply(this);
        }
        outAFeatureCall(node);
    }

    public void inAQualifiers(AQualifiers node)
    {
        defaultIn(node);
    }

    public void outAQualifiers(AQualifiers node)
    {
        defaultOut(node);
    }

    public void caseAQualifiers(AQualifiers node)
    {
        inAQualifiers(node);
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getActualParameterList() != null)
        {
            node.getActualParameterList().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        outAQualifiers(node);
    }

    public void inAStandardDeclarator(AStandardDeclarator node)
    {
        defaultIn(node);
    }

    public void outAStandardDeclarator(AStandardDeclarator node)
    {
        defaultOut(node);
    }

    public void caseAStandardDeclarator(AStandardDeclarator node)
    {
        inAStandardDeclarator(node);
        if(node.getBar() != null)
        {
            node.getBar().apply(this);
        }
        if(node.getDeclaratorTypeDeclaration() != null)
        {
            node.getDeclaratorTypeDeclaration().apply(this);
        }
        {
            Object temp[] = node.getDeclaratorTail().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PDeclaratorTail) temp[i]).apply(this);
            }
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAStandardDeclarator(node);
    }

    public void inAIterateDeclarator(AIterateDeclarator node)
    {
        defaultIn(node);
    }

    public void outAIterateDeclarator(AIterateDeclarator node)
    {
        defaultOut(node);
    }

    public void caseAIterateDeclarator(AIterateDeclarator node)
    {
        inAIterateDeclarator(node);
        if(node.getBar() != null)
        {
            node.getBar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getAccType() != null)
        {
            node.getAccType().apply(this);
        }
        if(node.getAccumulator() != null)
        {
            node.getAccumulator().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getIterType() != null)
        {
            node.getIterType().apply(this);
        }
        if(node.getIterator() != null)
        {
            node.getIterator().apply(this);
        }
        outAIterateDeclarator(node);
    }

    public void inADeclaratorTail(ADeclaratorTail node)
    {
        defaultIn(node);
    }

    public void outADeclaratorTail(ADeclaratorTail node)
    {
        defaultOut(node);
    }

    public void caseADeclaratorTail(ADeclaratorTail node)
    {
        inADeclaratorTail(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outADeclaratorTail(node);
    }

    public void inADeclaratorTypeDeclaration(ADeclaratorTypeDeclaration node)
    {
        defaultIn(node);
    }

    public void outADeclaratorTypeDeclaration(ADeclaratorTypeDeclaration node)
    {
        defaultOut(node);
    }

    public void caseADeclaratorTypeDeclaration(ADeclaratorTypeDeclaration node)
    {
        inADeclaratorTypeDeclaration(node);
        if(node.getSimpleTypeSpecifier() != null)
        {
            node.getSimpleTypeSpecifier().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        outADeclaratorTypeDeclaration(node);
    }

    public void inAPathTypeName(APathTypeName node)
    {
        defaultIn(node);
    }

    public void outAPathTypeName(APathTypeName node)
    {
        defaultOut(node);
    }

    public void caseAPathTypeName(APathTypeName node)
    {
        inAPathTypeName(node);
        {
            Object temp[] = node.getPathTypeNameTail().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PPathTypeNameTail) temp[i]).apply(this);
            }
        }
        if(node.getTypeName() != null)
        {
            node.getTypeName().apply(this);
        }
        outAPathTypeName(node);
    }

    public void inAPathTypeNameTail(APathTypeNameTail node)
    {
        defaultIn(node);
    }

    public void outAPathTypeNameTail(APathTypeNameTail node)
    {
        defaultOut(node);
    }

    public void caseAPathTypeNameTail(APathTypeNameTail node)
    {
        inAPathTypeNameTail(node);
        if(node.getTypeName() != null)
        {
            node.getTypeName().apply(this);
        }
        if(node.getDcolon() != null)
        {
            node.getDcolon().apply(this);
        }
        outAPathTypeNameTail(node);
    }

    public void inANonCollectionTypeName(ANonCollectionTypeName node)
    {
        defaultIn(node);
    }

    public void outANonCollectionTypeName(ANonCollectionTypeName node)
    {
        defaultOut(node);
    }

    public void caseANonCollectionTypeName(ANonCollectionTypeName node)
    {
        inANonCollectionTypeName(node);
        if(node.getSimpleTypeName() != null)
        {
            node.getSimpleTypeName().apply(this);
        }
        outANonCollectionTypeName(node);
    }

    public void inACollectionTypeName(ACollectionTypeName node)
    {
        defaultIn(node);
    }

    public void outACollectionTypeName(ACollectionTypeName node)
    {
        defaultOut(node);
    }

    public void caseACollectionTypeName(ACollectionTypeName node)
    {
        inACollectionTypeName(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getSimpleTypeName() != null)
        {
            node.getSimpleTypeName().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getCollectionType() != null)
        {
            node.getCollectionType().apply(this);
        }
        outACollectionTypeName(node);
    }

    public void inASetCollectionType(ASetCollectionType node)
    {
        defaultIn(node);
    }

    public void outASetCollectionType(ASetCollectionType node)
    {
        defaultOut(node);
    }

    public void caseASetCollectionType(ASetCollectionType node)
    {
        inASetCollectionType(node);
        if(node.getTSet() != null)
        {
            node.getTSet().apply(this);
        }
        outASetCollectionType(node);
    }

    public void inABagCollectionType(ABagCollectionType node)
    {
        defaultIn(node);
    }

    public void outABagCollectionType(ABagCollectionType node)
    {
        defaultOut(node);
    }

    public void caseABagCollectionType(ABagCollectionType node)
    {
        inABagCollectionType(node);
        if(node.getTBag() != null)
        {
            node.getTBag().apply(this);
        }
        outABagCollectionType(node);
    }

    public void inASequenceCollectionType(ASequenceCollectionType node)
    {
        defaultIn(node);
    }

    public void outASequenceCollectionType(ASequenceCollectionType node)
    {
        defaultOut(node);
    }

    public void caseASequenceCollectionType(ASequenceCollectionType node)
    {
        inASequenceCollectionType(node);
        if(node.getTSequence() != null)
        {
            node.getTSequence().apply(this);
        }
        outASequenceCollectionType(node);
    }

    public void inACollectionCollectionType(ACollectionCollectionType node)
    {
        defaultIn(node);
    }

    public void outACollectionCollectionType(ACollectionCollectionType node)
    {
        defaultOut(node);
    }

    public void caseACollectionCollectionType(ACollectionCollectionType node)
    {
        inACollectionCollectionType(node);
        if(node.getTCollection() != null)
        {
            node.getTCollection().apply(this);
        }
        outACollectionCollectionType(node);
    }

    public void inAPathName(APathName node)
    {
        defaultIn(node);
    }

    public void outAPathName(APathName node)
    {
        defaultOut(node);
    }

    public void caseAPathName(APathName node)
    {
        inAPathName(node);
        {
            Object temp[] = node.getPathNameTail().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PPathNameTail) temp[i]).apply(this);
            }
        }
        if(node.getPathNameBegin() != null)
        {
            node.getPathNameBegin().apply(this);
        }
        outAPathName(node);
    }

    public void inATypeNamePathNameBegin(ATypeNamePathNameBegin node)
    {
        defaultIn(node);
    }

    public void outATypeNamePathNameBegin(ATypeNamePathNameBegin node)
    {
        defaultOut(node);
    }

    public void caseATypeNamePathNameBegin(ATypeNamePathNameBegin node)
    {
        inATypeNamePathNameBegin(node);
        if(node.getTypeName() != null)
        {
            node.getTypeName().apply(this);
        }
        outATypeNamePathNameBegin(node);
    }

    public void inANamePathNameBegin(ANamePathNameBegin node)
    {
        defaultIn(node);
    }

    public void outANamePathNameBegin(ANamePathNameBegin node)
    {
        defaultOut(node);
    }

    public void caseANamePathNameBegin(ANamePathNameBegin node)
    {
        inANamePathNameBegin(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outANamePathNameBegin(node);
    }

    public void inAPathNameTail(APathNameTail node)
    {
        defaultIn(node);
    }

    public void outAPathNameTail(APathNameTail node)
    {
        defaultOut(node);
    }

    public void caseAPathNameTail(APathNameTail node)
    {
        inAPathNameTail(node);
        if(node.getPathNameEnd() != null)
        {
            node.getPathNameEnd().apply(this);
        }
        if(node.getDcolon() != null)
        {
            node.getDcolon().apply(this);
        }
        outAPathNameTail(node);
    }

    public void inATypeNamePathNameEnd(ATypeNamePathNameEnd node)
    {
        defaultIn(node);
    }

    public void outATypeNamePathNameEnd(ATypeNamePathNameEnd node)
    {
        defaultOut(node);
    }

    public void caseATypeNamePathNameEnd(ATypeNamePathNameEnd node)
    {
        inATypeNamePathNameEnd(node);
        if(node.getTypeName() != null)
        {
            node.getTypeName().apply(this);
        }
        outATypeNamePathNameEnd(node);
    }

    public void inANamePathNameEnd(ANamePathNameEnd node)
    {
        defaultIn(node);
    }

    public void outANamePathNameEnd(ANamePathNameEnd node)
    {
        defaultOut(node);
    }

    public void caseANamePathNameEnd(ANamePathNameEnd node)
    {
        inANamePathNameEnd(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outANamePathNameEnd(node);
    }

    public void inATimeExpression(ATimeExpression node)
    {
        defaultIn(node);
    }

    public void outATimeExpression(ATimeExpression node)
    {
        defaultOut(node);
    }

    public void caseATimeExpression(ATimeExpression node)
    {
        inATimeExpression(node);
        if(node.getTPre() != null)
        {
            node.getTPre().apply(this);
        }
        if(node.getAt() != null)
        {
            node.getAt().apply(this);
        }
        outATimeExpression(node);
    }

    public void inAActualParameterList(AActualParameterList node)
    {
        defaultIn(node);
    }

    public void outAActualParameterList(AActualParameterList node)
    {
        defaultOut(node);
    }

    public void caseAActualParameterList(AActualParameterList node)
    {
        inAActualParameterList(node);
        {
            Object temp[] = node.getActualParameterListTail().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PActualParameterListTail) temp[i]).apply(this);
            }
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAActualParameterList(node);
    }

    public void inAActualParameterListTail(AActualParameterListTail node)
    {
        defaultIn(node);
    }

    public void outAActualParameterListTail(AActualParameterListTail node)
    {
        defaultOut(node);
    }

    public void caseAActualParameterListTail(AActualParameterListTail node)
    {
        inAActualParameterListTail(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAActualParameterListTail(node);
    }

    public void inAAndLogicalOperator(AAndLogicalOperator node)
    {
        defaultIn(node);
    }

    public void outAAndLogicalOperator(AAndLogicalOperator node)
    {
        defaultOut(node);
    }

    public void caseAAndLogicalOperator(AAndLogicalOperator node)
    {
        inAAndLogicalOperator(node);
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        outAAndLogicalOperator(node);
    }

    public void inAOrLogicalOperator(AOrLogicalOperator node)
    {
        defaultIn(node);
    }

    public void outAOrLogicalOperator(AOrLogicalOperator node)
    {
        defaultOut(node);
    }

    public void caseAOrLogicalOperator(AOrLogicalOperator node)
    {
        inAOrLogicalOperator(node);
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        outAOrLogicalOperator(node);
    }

    public void inAXorLogicalOperator(AXorLogicalOperator node)
    {
        defaultIn(node);
    }

    public void outAXorLogicalOperator(AXorLogicalOperator node)
    {
        defaultOut(node);
    }

    public void caseAXorLogicalOperator(AXorLogicalOperator node)
    {
        inAXorLogicalOperator(node);
        if(node.getXor() != null)
        {
            node.getXor().apply(this);
        }
        outAXorLogicalOperator(node);
    }

    public void inAImpliesLogicalOperator(AImpliesLogicalOperator node)
    {
        defaultIn(node);
    }

    public void outAImpliesLogicalOperator(AImpliesLogicalOperator node)
    {
        defaultOut(node);
    }

    public void caseAImpliesLogicalOperator(AImpliesLogicalOperator node)
    {
        inAImpliesLogicalOperator(node);
        if(node.getImplies() != null)
        {
            node.getImplies().apply(this);
        }
        outAImpliesLogicalOperator(node);
    }

    public void inASetCollectionKind(ASetCollectionKind node)
    {
        defaultIn(node);
    }

    public void outASetCollectionKind(ASetCollectionKind node)
    {
        defaultOut(node);
    }

    public void caseASetCollectionKind(ASetCollectionKind node)
    {
        inASetCollectionKind(node);
        if(node.getTSet() != null)
        {
            node.getTSet().apply(this);
        }
        outASetCollectionKind(node);
    }

    public void inABagCollectionKind(ABagCollectionKind node)
    {
        defaultIn(node);
    }

    public void outABagCollectionKind(ABagCollectionKind node)
    {
        defaultOut(node);
    }

    public void caseABagCollectionKind(ABagCollectionKind node)
    {
        inABagCollectionKind(node);
        if(node.getTBag() != null)
        {
            node.getTBag().apply(this);
        }
        outABagCollectionKind(node);
    }

    public void inASequenceCollectionKind(ASequenceCollectionKind node)
    {
        defaultIn(node);
    }

    public void outASequenceCollectionKind(ASequenceCollectionKind node)
    {
        defaultOut(node);
    }

    public void caseASequenceCollectionKind(ASequenceCollectionKind node)
    {
        inASequenceCollectionKind(node);
        if(node.getTSequence() != null)
        {
            node.getTSequence().apply(this);
        }
        outASequenceCollectionKind(node);
    }

    public void inACollectionCollectionKind(ACollectionCollectionKind node)
    {
        defaultIn(node);
    }

    public void outACollectionCollectionKind(ACollectionCollectionKind node)
    {
        defaultOut(node);
    }

    public void caseACollectionCollectionKind(ACollectionCollectionKind node)
    {
        inACollectionCollectionKind(node);
        if(node.getTCollection() != null)
        {
            node.getTCollection().apply(this);
        }
        outACollectionCollectionKind(node);
    }

    public void inAEqualRelationalOperator(AEqualRelationalOperator node)
    {
        defaultIn(node);
    }

    public void outAEqualRelationalOperator(AEqualRelationalOperator node)
    {
        defaultOut(node);
    }

    public void caseAEqualRelationalOperator(AEqualRelationalOperator node)
    {
        inAEqualRelationalOperator(node);
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        outAEqualRelationalOperator(node);
    }

    public void inANEqualRelationalOperator(ANEqualRelationalOperator node)
    {
        defaultIn(node);
    }

    public void outANEqualRelationalOperator(ANEqualRelationalOperator node)
    {
        defaultOut(node);
    }

    public void caseANEqualRelationalOperator(ANEqualRelationalOperator node)
    {
        inANEqualRelationalOperator(node);
        if(node.getNEqual() != null)
        {
            node.getNEqual().apply(this);
        }
        outANEqualRelationalOperator(node);
    }

    public void inAGtRelationalOperator(AGtRelationalOperator node)
    {
        defaultIn(node);
    }

    public void outAGtRelationalOperator(AGtRelationalOperator node)
    {
        defaultOut(node);
    }

    public void caseAGtRelationalOperator(AGtRelationalOperator node)
    {
        inAGtRelationalOperator(node);
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        outAGtRelationalOperator(node);
    }

    public void inALtRelationalOperator(ALtRelationalOperator node)
    {
        defaultIn(node);
    }

    public void outALtRelationalOperator(ALtRelationalOperator node)
    {
        defaultOut(node);
    }

    public void caseALtRelationalOperator(ALtRelationalOperator node)
    {
        inALtRelationalOperator(node);
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        outALtRelationalOperator(node);
    }

    public void inAGteqRelationalOperator(AGteqRelationalOperator node)
    {
        defaultIn(node);
    }

    public void outAGteqRelationalOperator(AGteqRelationalOperator node)
    {
        defaultOut(node);
    }

    public void caseAGteqRelationalOperator(AGteqRelationalOperator node)
    {
        inAGteqRelationalOperator(node);
        if(node.getGteq() != null)
        {
            node.getGteq().apply(this);
        }
        outAGteqRelationalOperator(node);
    }

    public void inALteqRelationalOperator(ALteqRelationalOperator node)
    {
        defaultIn(node);
    }

    public void outALteqRelationalOperator(ALteqRelationalOperator node)
    {
        defaultOut(node);
    }

    public void caseALteqRelationalOperator(ALteqRelationalOperator node)
    {
        inALteqRelationalOperator(node);
        if(node.getLteq() != null)
        {
            node.getLteq().apply(this);
        }
        outALteqRelationalOperator(node);
    }

    public void inAPlusAddOperator(APlusAddOperator node)
    {
        defaultIn(node);
    }

    public void outAPlusAddOperator(APlusAddOperator node)
    {
        defaultOut(node);
    }

    public void caseAPlusAddOperator(APlusAddOperator node)
    {
        inAPlusAddOperator(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusAddOperator(node);
    }

    public void inAMinusAddOperator(AMinusAddOperator node)
    {
        defaultIn(node);
    }

    public void outAMinusAddOperator(AMinusAddOperator node)
    {
        defaultOut(node);
    }

    public void caseAMinusAddOperator(AMinusAddOperator node)
    {
        inAMinusAddOperator(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusAddOperator(node);
    }

    public void inAMultMultiplyOperator(AMultMultiplyOperator node)
    {
        defaultIn(node);
    }

    public void outAMultMultiplyOperator(AMultMultiplyOperator node)
    {
        defaultOut(node);
    }

    public void caseAMultMultiplyOperator(AMultMultiplyOperator node)
    {
        inAMultMultiplyOperator(node);
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        outAMultMultiplyOperator(node);
    }

    public void inADivMultiplyOperator(ADivMultiplyOperator node)
    {
        defaultIn(node);
    }

    public void outADivMultiplyOperator(ADivMultiplyOperator node)
    {
        defaultOut(node);
    }

    public void caseADivMultiplyOperator(ADivMultiplyOperator node)
    {
        inADivMultiplyOperator(node);
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        outADivMultiplyOperator(node);
    }

    public void inAMinusUnaryOperator(AMinusUnaryOperator node)
    {
        defaultIn(node);
    }

    public void outAMinusUnaryOperator(AMinusUnaryOperator node)
    {
        defaultOut(node);
    }

    public void caseAMinusUnaryOperator(AMinusUnaryOperator node)
    {
        inAMinusUnaryOperator(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusUnaryOperator(node);
    }

    public void inANotUnaryOperator(ANotUnaryOperator node)
    {
        defaultIn(node);
    }

    public void outANotUnaryOperator(ANotUnaryOperator node)
    {
        defaultOut(node);
    }

    public void caseANotUnaryOperator(ANotUnaryOperator node)
    {
        inANotUnaryOperator(node);
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        outANotUnaryOperator(node);
    }
}
