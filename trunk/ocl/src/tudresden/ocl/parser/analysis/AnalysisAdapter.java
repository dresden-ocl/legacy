/* This file was generated by SableCC (http://www.sable.mcgill.ca/sablecc/). */

package tudresden.ocl.parser.analysis;

import java.util.*;
import tudresden.ocl.parser.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable in;
    private Hashtable out;

    public Object getIn(Node node)
    {
        if(in == null)
        {
            return null;
        }

        return in.get(node);
    }

    public void setIn(Node node, Object in)
    {
        if(this.in == null)
        {
            this.in = new Hashtable(1);
        }

        if(in != null)
        {
            this.in.put(node, in);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(out == null)
        {
            return null;
        }

        return out.get(node);
    }

    public void setOut(Node node, Object out)
    {
        if(this.out == null)
        {
            this.out = new Hashtable(1);
        }

        if(out != null)
        {
            this.out.put(node, out);
        }
        else
        {
            this.out.remove(node);
        }
    }
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAConstraint(AConstraint node)
    {
        defaultCase(node);
    }

    public void caseAConstraintBody(AConstraintBody node)
    {
        defaultCase(node);
    }

    public void caseAContextDeclaration(AContextDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAClassifierContextBody(AClassifierContextBody node)
    {
        defaultCase(node);
    }

    public void caseAOperationContextBody(AOperationContextBody node)
    {
        defaultCase(node);
    }

    public void caseAClassifierContext(AClassifierContext node)
    {
        defaultCase(node);
    }

    public void caseAClassifierHead(AClassifierHead node)
    {
        defaultCase(node);
    }

    public void caseAOperationContext(AOperationContext node)
    {
        defaultCase(node);
    }

    public void caseAReturnTypeDeclaration(AReturnTypeDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAFormalParameterList(AFormalParameterList node)
    {
        defaultCase(node);
    }

    public void caseAFormalParameterListTail(AFormalParameterListTail node)
    {
        defaultCase(node);
    }

    public void caseAFormalParameter(AFormalParameter node)
    {
        defaultCase(node);
    }

    public void caseAInvStereotype(AInvStereotype node)
    {
        defaultCase(node);
    }

    public void caseAPreStereotype(APreStereotype node)
    {
        defaultCase(node);
    }

    public void caseAPostStereotype(APostStereotype node)
    {
        defaultCase(node);
    }

    public void caseAExpression(AExpression node)
    {
        defaultCase(node);
    }

    public void caseAIfExpression(AIfExpression node)
    {
        defaultCase(node);
    }

    public void caseALogicalExpression(ALogicalExpression node)
    {
        defaultCase(node);
    }

    public void caseALogicalExpressionTail(ALogicalExpressionTail node)
    {
        defaultCase(node);
    }

    public void caseARelationalExpression(ARelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseARelationalExpressionTail(ARelationalExpressionTail node)
    {
        defaultCase(node);
    }

    public void caseAAdditiveExpression(AAdditiveExpression node)
    {
        defaultCase(node);
    }

    public void caseAAdditiveExpressionTail(AAdditiveExpressionTail node)
    {
        defaultCase(node);
    }

    public void caseAMultiplicativeExpression(AMultiplicativeExpression node)
    {
        defaultCase(node);
    }

    public void caseAMultiplicativeExpressionTail(AMultiplicativeExpressionTail node)
    {
        defaultCase(node);
    }

    public void caseAUnaryUnaryExpression(AUnaryUnaryExpression node)
    {
        defaultCase(node);
    }

    public void caseAPostfixUnaryExpression(APostfixUnaryExpression node)
    {
        defaultCase(node);
    }

    public void caseAPostfixExpression(APostfixExpression node)
    {
        defaultCase(node);
    }

    public void caseAPostfixExpressionTail(APostfixExpressionTail node)
    {
        defaultCase(node);
    }

    public void caseADotPostfixExpressionTailBegin(ADotPostfixExpressionTailBegin node)
    {
        defaultCase(node);
    }

    public void caseAArrowPostfixExpressionTailBegin(AArrowPostfixExpressionTailBegin node)
    {
        defaultCase(node);
    }

    public void caseALitColPrimaryExpression(ALitColPrimaryExpression node)
    {
        defaultCase(node);
    }

    public void caseALiteralPrimaryExpression(ALiteralPrimaryExpression node)
    {
        defaultCase(node);
    }

    public void caseAFeaturePrimaryExpression(AFeaturePrimaryExpression node)
    {
        defaultCase(node);
    }

    public void caseAParenthesesPrimaryExpression(AParenthesesPrimaryExpression node)
    {
        defaultCase(node);
    }

    public void caseAIfPrimaryExpression(AIfPrimaryExpression node)
    {
        defaultCase(node);
    }

    public void caseAEmptyFeatureCallParameters(AEmptyFeatureCallParameters node)
    {
        defaultCase(node);
    }

    public void caseAConcreteFeatureCallParameters(AConcreteFeatureCallParameters node)
    {
        defaultCase(node);
    }

    public void caseAFeatureCallParameters(AFeatureCallParameters node)
    {
        defaultCase(node);
    }

    public void caseACommaFcpHelper(ACommaFcpHelper node)
    {
        defaultCase(node);
    }

    public void caseAColonFcpHelper(AColonFcpHelper node)
    {
        defaultCase(node);
    }

    public void caseAIterateFcpHelper(AIterateFcpHelper node)
    {
        defaultCase(node);
    }

    public void caseABarFcpHelper(ABarFcpHelper node)
    {
        defaultCase(node);
    }

    public void caseALetExpression(ALetExpression node)
    {
        defaultCase(node);
    }

    public void caseALetExpressionTypeDeclaration(ALetExpressionTypeDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAStringLiteral(AStringLiteral node)
    {
        defaultCase(node);
    }

    public void caseARealLiteral(ARealLiteral node)
    {
        defaultCase(node);
    }

    public void caseAIntegerLiteral(AIntegerLiteral node)
    {
        defaultCase(node);
    }

    public void caseABooleanLiteral(ABooleanLiteral node)
    {
        defaultCase(node);
    }

    public void caseAEnumLiteral(AEnumLiteral node)
    {
        defaultCase(node);
    }

    public void caseAEnumerationType(AEnumerationType node)
    {
        defaultCase(node);
    }

    public void caseAEnumerationTypeTail(AEnumerationTypeTail node)
    {
        defaultCase(node);
    }

    public void caseAPathSimpleTypeSpecifier(APathSimpleTypeSpecifier node)
    {
        defaultCase(node);
    }

    public void caseAEnumSimpleTypeSpecifier(AEnumSimpleTypeSpecifier node)
    {
        defaultCase(node);
    }

    public void caseALiteralCollection(ALiteralCollection node)
    {
        defaultCase(node);
    }

    public void caseAExpressionListOrRange(AExpressionListOrRange node)
    {
        defaultCase(node);
    }

    public void caseAListExpressionListOrRangeTail(AListExpressionListOrRangeTail node)
    {
        defaultCase(node);
    }

    public void caseARangeExpressionListOrRangeTail(ARangeExpressionListOrRangeTail node)
    {
        defaultCase(node);
    }

    public void caseAExpressionListTail(AExpressionListTail node)
    {
        defaultCase(node);
    }

    public void caseAFeatureCall(AFeatureCall node)
    {
        defaultCase(node);
    }

    public void caseAQualifiers(AQualifiers node)
    {
        defaultCase(node);
    }

    public void caseAStandardDeclarator(AStandardDeclarator node)
    {
        defaultCase(node);
    }

    public void caseAIterateDeclarator(AIterateDeclarator node)
    {
        defaultCase(node);
    }

    public void caseADeclaratorTail(ADeclaratorTail node)
    {
        defaultCase(node);
    }

    public void caseADeclaratorTypeDeclaration(ADeclaratorTypeDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAPathTypeName(APathTypeName node)
    {
        defaultCase(node);
    }

    public void caseAPathTypeNameTail(APathTypeNameTail node)
    {
        defaultCase(node);
    }

    public void caseANonCollectionTypeName(ANonCollectionTypeName node)
    {
        defaultCase(node);
    }

    public void caseACollectionTypeName(ACollectionTypeName node)
    {
        defaultCase(node);
    }

    public void caseASetCollectionType(ASetCollectionType node)
    {
        defaultCase(node);
    }

    public void caseABagCollectionType(ABagCollectionType node)
    {
        defaultCase(node);
    }

    public void caseASequenceCollectionType(ASequenceCollectionType node)
    {
        defaultCase(node);
    }

    public void caseACollectionCollectionType(ACollectionCollectionType node)
    {
        defaultCase(node);
    }

    public void caseAPathName(APathName node)
    {
        defaultCase(node);
    }

    public void caseATypeNamePathNameBegin(ATypeNamePathNameBegin node)
    {
        defaultCase(node);
    }

    public void caseANamePathNameBegin(ANamePathNameBegin node)
    {
        defaultCase(node);
    }

    public void caseAPathNameTail(APathNameTail node)
    {
        defaultCase(node);
    }

    public void caseATypeNamePathNameEnd(ATypeNamePathNameEnd node)
    {
        defaultCase(node);
    }

    public void caseANamePathNameEnd(ANamePathNameEnd node)
    {
        defaultCase(node);
    }

    public void caseATimeExpression(ATimeExpression node)
    {
        defaultCase(node);
    }

    public void caseAActualParameterList(AActualParameterList node)
    {
        defaultCase(node);
    }

    public void caseAActualParameterListTail(AActualParameterListTail node)
    {
        defaultCase(node);
    }

    public void caseAAndLogicalOperator(AAndLogicalOperator node)
    {
        defaultCase(node);
    }

    public void caseAOrLogicalOperator(AOrLogicalOperator node)
    {
        defaultCase(node);
    }

    public void caseAXorLogicalOperator(AXorLogicalOperator node)
    {
        defaultCase(node);
    }

    public void caseAImpliesLogicalOperator(AImpliesLogicalOperator node)
    {
        defaultCase(node);
    }

    public void caseASetCollectionKind(ASetCollectionKind node)
    {
        defaultCase(node);
    }

    public void caseABagCollectionKind(ABagCollectionKind node)
    {
        defaultCase(node);
    }

    public void caseASequenceCollectionKind(ASequenceCollectionKind node)
    {
        defaultCase(node);
    }

    public void caseACollectionCollectionKind(ACollectionCollectionKind node)
    {
        defaultCase(node);
    }

    public void caseAEqualRelationalOperator(AEqualRelationalOperator node)
    {
        defaultCase(node);
    }

    public void caseANEqualRelationalOperator(ANEqualRelationalOperator node)
    {
        defaultCase(node);
    }

    public void caseAGtRelationalOperator(AGtRelationalOperator node)
    {
        defaultCase(node);
    }

    public void caseALtRelationalOperator(ALtRelationalOperator node)
    {
        defaultCase(node);
    }

    public void caseAGteqRelationalOperator(AGteqRelationalOperator node)
    {
        defaultCase(node);
    }

    public void caseALteqRelationalOperator(ALteqRelationalOperator node)
    {
        defaultCase(node);
    }

    public void caseAPlusAddOperator(APlusAddOperator node)
    {
        defaultCase(node);
    }

    public void caseAMinusAddOperator(AMinusAddOperator node)
    {
        defaultCase(node);
    }

    public void caseAMultMultiplyOperator(AMultMultiplyOperator node)
    {
        defaultCase(node);
    }

    public void caseADivMultiplyOperator(ADivMultiplyOperator node)
    {
        defaultCase(node);
    }

    public void caseAMinusUnaryOperator(AMinusUnaryOperator node)
    {
        defaultCase(node);
    }

    public void caseANotUnaryOperator(ANotUnaryOperator node)
    {
        defaultCase(node);
    }

    public void caseTComment(TComment node)
    {
        defaultCase(node);
    }

    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    public void caseTArrow(TArrow node)
    {
        defaultCase(node);
    }

    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    public void caseTContext(TContext node)
    {
        defaultCase(node);
    }

    public void caseTEnum(TEnum node)
    {
        defaultCase(node);
    }

    public void caseTTPre(TTPre node)
    {
        defaultCase(node);
    }

    public void caseTTPost(TTPost node)
    {
        defaultCase(node);
    }

    public void caseTTInv(TTInv node)
    {
        defaultCase(node);
    }

    public void caseTEqual(TEqual node)
    {
        defaultCase(node);
    }

    public void caseTNEqual(TNEqual node)
    {
        defaultCase(node);
    }

    public void caseTLt(TLt node)
    {
        defaultCase(node);
    }

    public void caseTGt(TGt node)
    {
        defaultCase(node);
    }

    public void caseTLteq(TLteq node)
    {
        defaultCase(node);
    }

    public void caseTGteq(TGteq node)
    {
        defaultCase(node);
    }

    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    public void caseTXor(TXor node)
    {
        defaultCase(node);
    }

    public void caseTImplies(TImplies node)
    {
        defaultCase(node);
    }

    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    public void caseTLBracket(TLBracket node)
    {
        defaultCase(node);
    }

    public void caseTRBracket(TRBracket node)
    {
        defaultCase(node);
    }

    public void caseTLBrace(TLBrace node)
    {
        defaultCase(node);
    }

    public void caseTRBrace(TRBrace node)
    {
        defaultCase(node);
    }

    public void caseTSemicolon(TSemicolon node)
    {
        defaultCase(node);
    }

    public void caseTDcolon(TDcolon node)
    {
        defaultCase(node);
    }

    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    public void caseTChannel(TChannel node)
    {
        defaultCase(node);
    }

    public void caseTAt(TAt node)
    {
        defaultCase(node);
    }

    public void caseTBar(TBar node)
    {
        defaultCase(node);
    }

    public void caseTDdot(TDdot node)
    {
        defaultCase(node);
    }

    public void caseTApostroph(TApostroph node)
    {
        defaultCase(node);
    }

    public void caseTTLet(TTLet node)
    {
        defaultCase(node);
    }

    public void caseTTIn(TTIn node)
    {
        defaultCase(node);
    }

    public void caseTTIf(TTIf node)
    {
        defaultCase(node);
    }

    public void caseTTThen(TTThen node)
    {
        defaultCase(node);
    }

    public void caseTTElse(TTElse node)
    {
        defaultCase(node);
    }

    public void caseTEndif(TEndif node)
    {
        defaultCase(node);
    }

    public void caseTTSet(TTSet node)
    {
        defaultCase(node);
    }

    public void caseTTBag(TTBag node)
    {
        defaultCase(node);
    }

    public void caseTTSequence(TTSequence node)
    {
        defaultCase(node);
    }

    public void caseTTCollection(TTCollection node)
    {
        defaultCase(node);
    }

    public void caseTBool(TBool node)
    {
        defaultCase(node);
    }

    public void caseTSimpleTypeName(TSimpleTypeName node)
    {
        defaultCase(node);
    }

    public void caseTName(TName node)
    {
        defaultCase(node);
    }

    public void caseTNewLine(TNewLine node)
    {
        defaultCase(node);
    }

    public void caseTInt(TInt node)
    {
        defaultCase(node);
    }

    public void caseTReal(TReal node)
    {
        defaultCase(node);
    }

    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    public void caseTTab(TTab node)
    {
        defaultCase(node);
    }

    public void caseTStringLit(TStringLit node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(Node node)
    {
    }
}
