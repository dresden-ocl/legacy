/* This file was generated by SableCC (http://www.sable.mcgill.ca/sablecc/). */

package tudresden.ocl.parser.node;

import java.util.*;
import tudresden.ocl.parser.analysis.*;

public final class AContextDeclaration extends PContextDeclaration
{
    private TContext _context_;
    private PContextBody _contextBody_;

    public AContextDeclaration()
    {
    }

    public AContextDeclaration(
        TContext _context_,
        PContextBody _contextBody_)
    {
        setContext(_context_);

        setContextBody(_contextBody_);

    }
    public Object clone()
    {
        return new AContextDeclaration(
            (TContext) cloneNode(_context_),
            (PContextBody) cloneNode(_contextBody_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAContextDeclaration(this);
    }

    public TContext getContext()
    {
        return _context_;
    }

    public void setContext(TContext node)
    {
        if(_context_ != null)
        {
            _context_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _context_ = node;
    }

    public PContextBody getContextBody()
    {
        return _contextBody_;
    }

    public void setContextBody(PContextBody node)
    {
        if(_contextBody_ != null)
        {
            _contextBody_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _contextBody_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_context_)
            + toString(_contextBody_);
    }

    void removeChild(Node child)
    {
        if(_context_ == child)
        {
            _context_ = null;
            return;
        }

        if(_contextBody_ == child)
        {
            _contextBody_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_context_ == oldChild)
        {
            setContext((TContext) newChild);
            return;
        }

        if(_contextBody_ == oldChild)
        {
            setContextBody((PContextBody) newChild);
            return;
        }

    }
}
