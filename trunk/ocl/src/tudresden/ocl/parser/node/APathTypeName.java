/* This file was generated by SableCC (http://www.sable.mcgill.ca/sablecc/). */

package tudresden.ocl.parser.node;

import java.util.*;
import tudresden.ocl.parser.analysis.*;

public final class APathTypeName extends PPathTypeName
{
    private PTypeName _typeName_;
    private final LinkedList _pathTypeNameTail_ = new TypedLinkedList(new PathTypeNameTail_Cast());

    public APathTypeName()
    {
    }

    public APathTypeName(
        PTypeName _typeName_,
        List _pathTypeNameTail_)
    {
        setTypeName(_typeName_);

        {
            Object temp[] = _pathTypeNameTail_.toArray();
            for(int i = 0; i < temp.length; i++)
            {
                this._pathTypeNameTail_.add(temp[i]);
            }
        }

    }

    public APathTypeName(
        PTypeName _typeName_,
        XPPathTypeNameTail _pathTypeNameTail_)
    {
        setTypeName(_typeName_);

        if(_pathTypeNameTail_ != null)
        {
            while(_pathTypeNameTail_ instanceof X1PPathTypeNameTail)
            {
                this._pathTypeNameTail_.addFirst(((X1PPathTypeNameTail) _pathTypeNameTail_).getPPathTypeNameTail());
                _pathTypeNameTail_ = ((X1PPathTypeNameTail) _pathTypeNameTail_).getXPPathTypeNameTail();
            }
            this._pathTypeNameTail_.addFirst(((X2PPathTypeNameTail) _pathTypeNameTail_).getPPathTypeNameTail());
        }

    }
    public Object clone()
    {
        return new APathTypeName(
            (PTypeName) cloneNode(_typeName_),
            cloneList(_pathTypeNameTail_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPathTypeName(this);
    }

    public PTypeName getTypeName()
    {
        return _typeName_;
    }

    public void setTypeName(PTypeName node)
    {
        if(_typeName_ != null)
        {
            _typeName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _typeName_ = node;
    }

    public LinkedList getPathTypeNameTail()
    {
        return _pathTypeNameTail_;
    }

    public void setPathTypeNameTail(List list)
    {
        Object temp[] = list.toArray();
        for(int i = 0; i < temp.length; i++)
        {
            _pathTypeNameTail_.add(temp[i]);
        }
    }

    public String toString()
    {
        return ""
            + toString(_typeName_)
            + toString(_pathTypeNameTail_);
    }

    void removeChild(Node child)
    {
        if(_typeName_ == child)
        {
            _typeName_ = null;
            return;
        }

        if(_pathTypeNameTail_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_typeName_ == oldChild)
        {
            setTypeName((PTypeName) newChild);
            return;
        }

        for(ListIterator i = _pathTypeNameTail_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class PathTypeNameTail_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PPathTypeNameTail node = (PPathTypeNameTail) o;

            if((node.parent() != null) &&
                (node.parent() != APathTypeName.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != APathTypeName.this))
            {
                node.parent(APathTypeName.this);
            }

            return node;
        }
    }
}

