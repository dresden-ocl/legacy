/* This file was generated by SableCC (http://www.sable.mcgill.ca/sablecc/). */

package tudresden.ocl.parser.node;

import java.util.*;
import tudresden.ocl.parser.analysis.*;

public final class AConcreteFeatureCallParameters extends PFeatureCallParameters
{
    private TLPar _lPar_;
    private PExpression _expression_;
    private final LinkedList _fcpHelper_ = new TypedLinkedList(new FcpHelper_Cast());
    private TRPar _rPar_;

    public AConcreteFeatureCallParameters()
    {
    }

    public AConcreteFeatureCallParameters(
        TLPar _lPar_,
        PExpression _expression_,
        List _fcpHelper_,
        TRPar _rPar_)
    {
        setLPar(_lPar_);

        setExpression(_expression_);

        {
            Object temp[] = _fcpHelper_.toArray();
            for(int i = 0; i < temp.length; i++)
            {
                this._fcpHelper_.add(temp[i]);
            }
        }

        setRPar(_rPar_);

    }

    public AConcreteFeatureCallParameters(
        TLPar _lPar_,
        PExpression _expression_,
        XPFcpHelper _fcpHelper_,
        TRPar _rPar_)
    {
        setLPar(_lPar_);

        setExpression(_expression_);

        if(_fcpHelper_ != null)
        {
            while(_fcpHelper_ instanceof X1PFcpHelper)
            {
                this._fcpHelper_.addFirst(((X1PFcpHelper) _fcpHelper_).getPFcpHelper());
                _fcpHelper_ = ((X1PFcpHelper) _fcpHelper_).getXPFcpHelper();
            }
            this._fcpHelper_.addFirst(((X2PFcpHelper) _fcpHelper_).getPFcpHelper());
        }

        setRPar(_rPar_);

    }
    public Object clone()
    {
        return new AConcreteFeatureCallParameters(
            (TLPar) cloneNode(_lPar_),
            (PExpression) cloneNode(_expression_),
            cloneList(_fcpHelper_),
            (TRPar) cloneNode(_rPar_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAConcreteFeatureCallParameters(this);
    }

    public TLPar getLPar()
    {
        return _lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(_lPar_ != null)
        {
            _lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lPar_ = node;
    }

    public PExpression getExpression()
    {
        return _expression_;
    }

    public void setExpression(PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expression_ = node;
    }

    public LinkedList getFcpHelper()
    {
        return _fcpHelper_;
    }

    public void setFcpHelper(List list)
    {
        Object temp[] = list.toArray();
        for(int i = 0; i < temp.length; i++)
        {
            _fcpHelper_.add(temp[i]);
        }
    }

    public TRPar getRPar()
    {
        return _rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(_rPar_ != null)
        {
            _rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rPar_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_lPar_)
            + toString(_expression_)
            + toString(_fcpHelper_)
            + toString(_rPar_);
    }

    void removeChild(Node child)
    {
        if(_lPar_ == child)
        {
            _lPar_ = null;
            return;
        }

        if(_expression_ == child)
        {
            _expression_ = null;
            return;
        }

        if(_fcpHelper_.remove(child))
        {
            return;
        }

        if(_rPar_ == child)
        {
            _rPar_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(_expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        for(ListIterator i = _fcpHelper_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(_rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

    }

    private class FcpHelper_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PFcpHelper node = (PFcpHelper) o;

            if((node.parent() != null) &&
                (node.parent() != AConcreteFeatureCallParameters.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AConcreteFeatureCallParameters.this))
            {
                node.parent(AConcreteFeatureCallParameters.this);
            }

            return node;
        }
    }
}

