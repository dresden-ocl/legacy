/* This file was generated by SableCC (http://www.sable.mcgill.ca/sablecc/). */

package tudresden.ocl.parser.node;

import java.util.*;
import tudresden.ocl.parser.analysis.*;

public final class AAdditiveExpressionTail extends PAdditiveExpressionTail
{
    private PAddOperator _addOperator_;
    private PMultiplicativeExpression _multiplicativeExpression_;

    public AAdditiveExpressionTail()
    {
    }

    public AAdditiveExpressionTail(
        PAddOperator _addOperator_,
        PMultiplicativeExpression _multiplicativeExpression_)
    {
        setAddOperator(_addOperator_);

        setMultiplicativeExpression(_multiplicativeExpression_);

    }
    public Object clone()
    {
        return new AAdditiveExpressionTail(
            (PAddOperator) cloneNode(_addOperator_),
            (PMultiplicativeExpression) cloneNode(_multiplicativeExpression_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAdditiveExpressionTail(this);
    }

    public PAddOperator getAddOperator()
    {
        return _addOperator_;
    }

    public void setAddOperator(PAddOperator node)
    {
        if(_addOperator_ != null)
        {
            _addOperator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _addOperator_ = node;
    }

    public PMultiplicativeExpression getMultiplicativeExpression()
    {
        return _multiplicativeExpression_;
    }

    public void setMultiplicativeExpression(PMultiplicativeExpression node)
    {
        if(_multiplicativeExpression_ != null)
        {
            _multiplicativeExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _multiplicativeExpression_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_addOperator_)
            + toString(_multiplicativeExpression_);
    }

    void removeChild(Node child)
    {
        if(_addOperator_ == child)
        {
            _addOperator_ = null;
            return;
        }

        if(_multiplicativeExpression_ == child)
        {
            _multiplicativeExpression_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_addOperator_ == oldChild)
        {
            setAddOperator((PAddOperator) newChild);
            return;
        }

        if(_multiplicativeExpression_ == oldChild)
        {
            setMultiplicativeExpression((PMultiplicativeExpression) newChild);
            return;
        }

    }
}

