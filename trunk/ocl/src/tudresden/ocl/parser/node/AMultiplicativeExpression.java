/* This file was generated by SableCC (http://www.sable.mcgill.ca/sablecc/). */

package tudresden.ocl.parser.node;

import java.util.*;
import tudresden.ocl.parser.analysis.*;

public final class AMultiplicativeExpression extends PMultiplicativeExpression
{
    private PUnaryExpression _unaryExpression_;
    private final LinkedList _multiplicativeExpressionTail_ = new TypedLinkedList(new MultiplicativeExpressionTail_Cast());

    public AMultiplicativeExpression()
    {
    }

    public AMultiplicativeExpression(
        PUnaryExpression _unaryExpression_,
        List _multiplicativeExpressionTail_)
    {
        setUnaryExpression(_unaryExpression_);

        {
            Object temp[] = _multiplicativeExpressionTail_.toArray();
            for(int i = 0; i < temp.length; i++)
            {
                this._multiplicativeExpressionTail_.add(temp[i]);
            }
        }

    }

    public AMultiplicativeExpression(
        PUnaryExpression _unaryExpression_,
        XPMultiplicativeExpressionTail _multiplicativeExpressionTail_)
    {
        setUnaryExpression(_unaryExpression_);

        if(_multiplicativeExpressionTail_ != null)
        {
            while(_multiplicativeExpressionTail_ instanceof X1PMultiplicativeExpressionTail)
            {
                this._multiplicativeExpressionTail_.addFirst(((X1PMultiplicativeExpressionTail) _multiplicativeExpressionTail_).getPMultiplicativeExpressionTail());
                _multiplicativeExpressionTail_ = ((X1PMultiplicativeExpressionTail) _multiplicativeExpressionTail_).getXPMultiplicativeExpressionTail();
            }
            this._multiplicativeExpressionTail_.addFirst(((X2PMultiplicativeExpressionTail) _multiplicativeExpressionTail_).getPMultiplicativeExpressionTail());
        }

    }
    public Object clone()
    {
        return new AMultiplicativeExpression(
            (PUnaryExpression) cloneNode(_unaryExpression_),
            cloneList(_multiplicativeExpressionTail_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMultiplicativeExpression(this);
    }

    public PUnaryExpression getUnaryExpression()
    {
        return _unaryExpression_;
    }

    public void setUnaryExpression(PUnaryExpression node)
    {
        if(_unaryExpression_ != null)
        {
            _unaryExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _unaryExpression_ = node;
    }

    public LinkedList getMultiplicativeExpressionTail()
    {
        return _multiplicativeExpressionTail_;
    }

    public void setMultiplicativeExpressionTail(List list)
    {
        Object temp[] = list.toArray();
        for(int i = 0; i < temp.length; i++)
        {
            _multiplicativeExpressionTail_.add(temp[i]);
        }
    }

    public String toString()
    {
        return ""
            + toString(_unaryExpression_)
            + toString(_multiplicativeExpressionTail_);
    }

    void removeChild(Node child)
    {
        if(_unaryExpression_ == child)
        {
            _unaryExpression_ = null;
            return;
        }

        if(_multiplicativeExpressionTail_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_unaryExpression_ == oldChild)
        {
            setUnaryExpression((PUnaryExpression) newChild);
            return;
        }

        for(ListIterator i = _multiplicativeExpressionTail_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class MultiplicativeExpressionTail_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PMultiplicativeExpressionTail node = (PMultiplicativeExpressionTail) o;

            if((node.parent() != null) &&
                (node.parent() != AMultiplicativeExpression.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AMultiplicativeExpression.this))
            {
                node.parent(AMultiplicativeExpression.this);
            }

            return node;
        }
    }
}
