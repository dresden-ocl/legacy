/* This file was generated by SableCC (http://www.sable.mcgill.ca/sablecc/). */

package tudresden.ocl.parser.node;

import java.util.*;
import tudresden.ocl.parser.analysis.*;

public final class AConstraint extends PConstraint
{
    private PContextDeclaration _contextDeclaration_;
    private final LinkedList _constraintBody_ = new TypedLinkedList(new ConstraintBody_Cast());

    public AConstraint()
    {
    }

    public AConstraint(
        PContextDeclaration _contextDeclaration_,
        List _constraintBody_)
    {
        setContextDeclaration(_contextDeclaration_);

        {
            Object temp[] = _constraintBody_.toArray();
            for(int i = 0; i < temp.length; i++)
            {
                this._constraintBody_.add(temp[i]);
            }
        }

    }

    public AConstraint(
        PContextDeclaration _contextDeclaration_,
        XPConstraintBody _constraintBody_)
    {
        setContextDeclaration(_contextDeclaration_);

        if(_constraintBody_ != null)
        {
            while(_constraintBody_ instanceof X1PConstraintBody)
            {
                this._constraintBody_.addFirst(((X1PConstraintBody) _constraintBody_).getPConstraintBody());
                _constraintBody_ = ((X1PConstraintBody) _constraintBody_).getXPConstraintBody();
            }
            this._constraintBody_.addFirst(((X2PConstraintBody) _constraintBody_).getPConstraintBody());
        }

    }
    public Object clone()
    {
        return new AConstraint(
            (PContextDeclaration) cloneNode(_contextDeclaration_),
            cloneList(_constraintBody_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAConstraint(this);
    }

    public PContextDeclaration getContextDeclaration()
    {
        return _contextDeclaration_;
    }

    public void setContextDeclaration(PContextDeclaration node)
    {
        if(_contextDeclaration_ != null)
        {
            _contextDeclaration_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _contextDeclaration_ = node;
    }

    public LinkedList getConstraintBody()
    {
        return _constraintBody_;
    }

    public void setConstraintBody(List list)
    {
        Object temp[] = list.toArray();
        for(int i = 0; i < temp.length; i++)
        {
            _constraintBody_.add(temp[i]);
        }
    }

    public String toString()
    {
        return ""
            + toString(_contextDeclaration_)
            + toString(_constraintBody_);
    }

    void removeChild(Node child)
    {
        if(_contextDeclaration_ == child)
        {
            _contextDeclaration_ = null;
            return;
        }

        if(_constraintBody_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_contextDeclaration_ == oldChild)
        {
            setContextDeclaration((PContextDeclaration) newChild);
            return;
        }

        for(ListIterator i = _constraintBody_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class ConstraintBody_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PConstraintBody node = (PConstraintBody) o;

            if((node.parent() != null) &&
                (node.parent() != AConstraint.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AConstraint.this))
            {
                node.parent(AConstraint.this);
            }

            return node;
        }
    }
}

