
1. REQUIREMENTS
---------------

JDK 1.3
  Sun Microsystems, Inc.

Ant 1.4
  Build Tool
  by The Jakarta Project
     Apache Software Foundation
  http://jakarta.apache.org/ant/

SableCC 2.16.2 (sablecc.jar)
  Parser Generator
  by Etienne M. Gagnon
  http://www.sablecc.org/
  maintained in CVS

Xerces 1.4.3 (xerces.jar)
  XML Parser
  by The Apache XML Project
  http://xml.apache.org/xerces-j/
  maintained in CVS

JUnit 3.7 (junit.jar)
  Test Framework
  by Kent Beck and Erich Gamma
  http://junit.org/
  maintained in CVS

NOTES:
* JDK 1.2 will fail with field java.util.Collections.EMPTY_MAP missing.
* Ant 1.3 will fail with attribute "output" unknown for task "java" or "exec".


2. CHECK IN POLICY
------------------

All the rules below are valid regardless whether a conflict is
caused by a bug in one of the tools. If a conflict really
causes pain, I may decide to upgrade the version of the tool.

No one gets hung, when violating the rules (I even did this
myself). You'll get a friendly email.

2.1 Compile
-----------

"ant clean compile" must succeed with the following compilers:

* javac of the SUN JDK java version "1.3" and later
* jikes Version 1.06 (17 Sep 99) BUT NOT LATER

For how to enable jikes, and which versions to use, see file
jikes.properties in this directory.


NOTE:
It may be the case that the javac compiler produces out of memory exceptions.
When using the javac compiler directly,this problem can be solved by using
the -J-mx<number> switch.
When using Ant to compile the sources, one must increase the available memory
to the compiler by editing the last line of the file ant (or ant.bat respectivly)
in the bin folder of Ant's installation path in the following way:

$JAVACMD -Xms128m -Xmx128m -classpath "$LOCALCLASSPATH" -Dant.home="${ANT_HOME}" $ANT_OPTS org.apache.tools.ant.Main "$@"

The example shows how to increase the available memory to 128 mb by the first two
parameters.

2.2 Jars
--------

"ant clean jar" must succeed.

Besides compiling jar-files are created and checked for static
closure. Note, that "ant jar" does not compile test classes as
"ant compile" does.

2.3 Javadoc
-----------

"ant docs" must succeed and must not produce any warnings.

2.4 Test Suites
---------------

"ant test" must succeed.

2.5 Tabs
--------
You are free to use tabs for identing or not. If you do, a single
tab is exactly ONE level of identation.
You may mix tabs and spaces within a file, but then tab width is 2,
in words "two".




Ralf.
