
1. REQUIREMENTS
---------------

JDK 1.3
  Sun Microsystems, Inc.

Ant 1.3
  Build Tool
  by The Jakarta Project
     Apache Software Foundation
  http://jakarta.apache.org/ant/

SableCC 2.16.2 (sablecc.jar)
  Parser Generator
  by Etienne M. Gagnon
  http://www.sablecc.org/
  maintained in CVS

Xerces 1.4.3 (xerces.jar)
  XML Parser
  by The Apache XML Project
  http://xml.apache.org/xerces-j/
  maintained in CVS

JUnit 3.7 (junit.jar)
  Test Framework
  by Kent Beck and Erich Gamma
  http://junit.org/
  maintained in CVS

NOTES:
* JDK 1.2 will fail with field java.util.Collections.EMPTY_MAP missing.
* Ant 1.2 fails with strange errors when running the tests.
* Xerces 1.2.0 will fail with some SAXUnsupportedFeatureException.


2. CHECK IN POLICY
------------------

All the rules below are valid regardless whether a conflict is
caused by a bug in one of the tools. If a conflict really
causes pain, I may decide to upgrade the version of the tool.

No one gets hung, when violating the rules (I even did this
myself). You'll get a friendly email.

2.1 Compile
-----------
Every .java file in the repository must compile with

  javac of the SUN JDK java version "1.3" and later
  AND
  jikes Version 1.06 (17 Sep 99)

For how to enable jikes, and which versions to use, see file
jikes.properties in this directory.


NOTE:
It may be the case that the javac compiler produces out of memory exceptions.
When using the javac compiler directly,this problem can be solved by using
the -J-mx<number> switch.
When using Ant to compile the sources, one must increase the available memory
to the compiler by editing the last line of the file ant (or ant.bat respectivly)
in the bin folder of Ant's installation path in the following way:

$JAVACMD -Xms128m -Xmx128m -classpath "$LOCALCLASSPATH" -Dant.home="${ANT_HOME}" $ANT_OPTS org.apache.tools.ant.Main "$@"

The example shows how to increase the available memory to 128 mb by the first two
parameters.

2.2 Jars
--------
Jarfiles must be created correctly. Run

  ant clean jars

Besides compiling jar-files are created and checked for static
closure. Note, that the ant jars does not compile all classes.

2.3 Javadoc
-----------
Run

  ant docs

This must not produce any warnings, when using

  java version "1.2.2"
  AND
  any later version of the above.

2.4 Test Suites
---------------

"ant test" in this directory must run through without exceptions.

2.5 Tabs
--------
You are free to use tabs for identing or not. If you do, a single
tab is exactly ONE level of identation.
You may mix tabs and spaces within a file, but then tab width is 2,
in words "two".




Ralf.
