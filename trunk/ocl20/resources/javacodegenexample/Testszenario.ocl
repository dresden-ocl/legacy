package living

context Accomodation::getZip():String
post emptyZip: if self.zip = '' then result = '00000' else result = self.zip endif

context Person
inv nameNotEmpty: self.name <> ''

context Person
inv notHomeless: self.accomodation->size() > 0

context Person
inv registeredResidence: (self.accomodation->select(x:Accomodation|x.category=1))->size() = 1

context Person
inv iter: Set{1,2,3}->iterate( i: Integer; sum: Integer = 0 | sum + i ) = 6

context Examination
inv exPassed: let examPassed : Boolean = self.passed 
in examPassed = true implies self.mark <= 4.0

context Student::writeExamination(ex:Examination):Boolean
pre courseIsVisited: self.visitedCourses->includes(ex.course)
post passed: result = ex.passed

context Student::visitCourse(course:Course)
post courseVisited: self.visitedCourses->includes(course)
post addedC: self.visitedCourses->size() = (self.visitedCourses@pre->size() + 1)

context Insurance::calculateOffer(insuranceSum:Real):Real
post static: result = insuranceSum / self.averageYears

context City::getSomeString(like:String):String
pre testCity: like <> ''

context Accomodation::setCategory(category:Integer):Boolean
post returnValue: result=(category=self.category@pre)

context Person
inv multIt: self.accomodation->forAll(c1, c2 | c1 <> c2 implies c1.street <> c2.street)

context Person
inv nestedIt: self.accomodation->forAll(c1 | self.accomodation->forAll(c2 | c1 <> c2 implies c1.street <> c2.street))

context Accomodation
inv oneCity: self.city->size() = 1

endpackage
