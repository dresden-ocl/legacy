Changes and Bugs fixed during the different Releases
====================================================

Release 2.1 (not scheduled yet)
===============================

* A new Facade Plug-in containing a facade for all functionalities of
  Dresden OCL2 for Eclipse has been introduced.
  
* The Model and Model Instance Life-cycle Management has been improved.
  - After import, Models can now be removed again.
  - After import, Model Instances can now be removed again.
  - Constraints can now be removed from models again.
  - Defined operations and properties are now removed then their constraints are removed as well.

* A bug in the ModelRegistry was fixed.
  - Adding of Models should now handle NullPointerExceptions correctly.
 
* A bug in the UML2 Meta-Model was fixed.
  - If the top-level package is a UML model or profile directory, 
    these packages are now adapted correctly.
    
* The Java Meta-Model has been modified.
  - Java models can now refer to JAR archives if explicitly defined in a .javamodel File.

* Some bugs in the basis model instance elements were fixed.
  - Illegal arguments are now handled appropriately.
  - JavaModelInstanceCollections can now be initialized with null 
    values even if they are of the type Set or OrderedSet.

* Some bugs in the Ecore ModelInstance Type were fixed.
  - Empty model instances now get a created default name.
  - Illegal arguments are now handled appropriately.
  - Types are now resolved, even if their package name is not modeled completely
    in the Model.

* Some bugs in the Java ModelInstance Type were fixed.
  - Empty model instances now get a created default name.
  - Illegal arguments are now handled appropriately.
  - The copy mechanism for @pre values works now correctly when invoking
    empty constructors.
  
* Complete rewrite of the OCL Standard Library; some bugs were fixed.
  - invalid and null values are now created by every library method and no exceptions are thrown
  - consistent way of handling null(undefined) and invalid
  - undefined can be created for AnyType
  - TypeConstants: create BagType, etc. instead of CollectionType -> invalid and undefined collections can be created
  - OclBoolean: and(), or() and implies() accept undefined values and can return OclBooleans (standard, p. 15)
  - union(OclSequence) only on OclSequence instead of SortedCollection
  - excluding(T) now removes all appearances, not only the first
  - OclCollections can return their generic/element type
  - support for the creation of nested OclCollections
  - OclAny: oclIsUndefined() now returns invalid if the object is invalid
  - OclString: substring() returns invalid if lower index is greater than higher index

* Some bugs in the Ocl22Java Code Generator was fixed.
  - The code generation of OclAny.allInstances() now works properly again.
  - The code generation of Collection.flatten() now works properly.


GUI
---
* The Model Instance Browser has been improved.
  - Owned properties of ModelInstanceElements can now be browsed.
  

Tests
-----
* A new Modelbus Test Suite Plug-in has been introduced.

* A new OCL Standard Library Test Suite Plug-in has been introduced.

* Some test cases have been added to the Generic Model Instance Type
  Test Suite.
  - Illegal arguments are now tested.
  - Recasts between primitive type instances are now tested.


Release 2.0 (Scheduled: December 2009)
======================================
* The Pivot Model do now contain the PrimitiveTypeKind Void for the adaptation
  of a void Type for Operations without return Parameter.

* The ModelBus Architecture was refactored.
  - IModelInstances are now meta model independent.
  - The IModel interface was refactored.
    > A new method getType() was introduced.
    > A new method isInstanceOf(Type) was introduced.
  - The IModelInstance interface and the IModelObject respectively 
    IModelElement interface have been refactored and restructured completely.

* Some bugs in the UML2 Meta Model were fixed.
  - UML2 models can now contain n-ary associations.
  - Interfaces are now mapped correctly.
  - Abstract DataTypes are no longer adapted.
  - Logging now works properly.

* Some bugs in the EMF Ecore Meta Model were fixed.
  - Logging now works properly.

* New Meta Model added: Java.

* The Java Model Instance Type has been refactored completely.
  - Java instances can now also be imported, if they implement or extend Java
    Classes or Interfaces defined in the model.

* The EMF Ecore Model Instance Type has been refactored completely.

* Some bugs of the OCL-Interpreter were fixed.
  - Constraints are now interpreted for constrained 
    sub-classes as well.
  - Local Variables are now only declared locally.

* The interpreter plugins have been renamed from 
  tudresden.ocl20.interpreter.* to tudresden.ocl20.pivot.interpreter.*

* A bug in the Ocl22Java Code Generator was fixed.
  - The variables for Comparators are now right numbered.


GUI
---
* A bug in the Wizards were fixed.
  - The Model Import Wizard can now be started when the current focus is on a 
    non tree-like view.
  - The Model Instance Import Wizard can now be started when the current focus
    is on a non tree-like view.
  - The OCL Constraint Import Wizard can now be started when the current focus
    is on a non tree-like view.
  - The Java Code Generator can now be started when the current focus is on a 
    non tree-like view.

* The Model Instance Wizard has been redesigned.

* The Model Instance Browser has been redesigned.
  - ModeObjects are now also displayed for Sub-Types of selected 
    Types in the Model Browser.

* The OCL Parser Wizard was redesigned.
  - OCL Files can now also be selected using a 'Browse Workspace' button.
  - The wizard will now switch into the Model Browser after parsing constraints.

* The Interpreter View was redesigned.

* Some problems with icons and menu entries in the binary release were fixed.


Tests
-----
* A new central Test Suite Plug-in has been introduced.

* A new generic Test Suite for Meta-Models was introduced.

* A new generic Test Suite for Model Instance Types was introduced.



Release 1.2 (February 26th 2009)
================================
* The new tool Ocl2Java (ApsectJ code generation for OCL 
  constraints) was added to the release.

* The royal and loyal example was added to the release.

* Some Bugs of the OCL-Parser were fixed:
  - Enumerations are now parsed correctly

* Some Bugs of the OCL-Interpreter were fixed.
  - Operation names are now interpreted correctly
  - Collection operations should now be interpreted correctly.
  - The Variable defined by a LetExpression is now valid in the 
    scope of the LetExpression only.

* Some Bugs of the Java Standard Library were fixed.
  - Collections from model instances are now adapted correctly.
  - Sets will no longer contain the same model object multiple 
    types.

* Some Bugs for Ecore instances were fixed.
  - Enumerations are now adapted correctly.

* Some Bugs for UML2 instances were fixed. 
  - UML2 Model instance adaption does now work correctly.
  - UML2 Model instances now support tuple types.
  
  

Release 1.1 (December 9th 2008)
================================
* The UML1.5 meta model works now in the binary release.

* New meta model added: UML2.0.

* New example added: Simple-Example.

* Some Bugs of the OCL-Parser were fixed.

* Some Bugs of the OCL-Interpreter were fixed.