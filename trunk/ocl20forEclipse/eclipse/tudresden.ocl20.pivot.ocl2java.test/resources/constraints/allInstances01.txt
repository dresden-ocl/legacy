package testpackage.constraints;

@Generated
public privileged aspect InvAspect1 {

    protected static java.util.Map<String, java.util.Map> allInstances = new java.util.HashMap<String, java.util.Map>();

    /**
     * <p>Adds all instances of the class {@link testpackage.Class1} to the {@link java.util.Map} allInstances.</p>
     */
    after(testpackage.Class1 aClass) : execution(testpackage.Class1.new(..)) && this(aClass) {
    
        java.util.Map<testpackage.Class1, Object> instanceMap;
    
        instanceMap = (java.util.Map<testpackage.Class1, Object>) allInstances.get(aClass.getClass().getCanonicalName());
    
        if (instanceMap == null) {
            instanceMap = new java.util.WeakHashMap<testpackage.Class1, Object>();
        }
        // no else.
    
        instanceMap.put(aClass, null);
    
        allInstances.put(aClass.getClass().getCanonicalName(), instanceMap);
    }

    /**
     * <p>Describes all Constructors of the class {@link testpackage.Class1}.</p>
     */
    protected pointcut allClass1Constructors(testpackage.Class1 aClass):
        execution(testpackage.Class1.new(..)) && this(aClass);
    
    /**
     * <p><code>Checks an invariant on the class Class1 defined by the constraint
     * <code>context Class1
     *       inv: self[].allInstances().size().>( 0)</code></p>
     */
    after(testpackage.Class1 aClass) : allClass1Constructors(aClass) {
        /* Disable this constraint for subclasses of Class1. */
        if (aClass.getClass().getCanonicalName().equals("testpackage.Class1")) {
        if (!((new tudresden.ocl20.pivot.ocl2java.types.OclSet<testpackage.Class1>((java.util.Set<testpackage.Class1>) allInstances.get(testpackage.Class1.class.getCanonicalName()).keySet())).size() > new Integer(0))) {
        	// TODO Auto-generated code executed when constraint is violated.
        	throw new RuntimeException("Error: Constraint was violated.");
        }
        // no else.
        }
        // no else.
    }
}