group sql;

// --- OCL INVARIANT --- 
constraint_invariant(constraint_name,context,context_alias,expression) ::= <<
CREATE OR REPLACE VIEW $constraint_name$ AS
(SELECT * FROM $context$ AS $context_alias$
WHERE NOT ($expression$));
>>

constraint_comment(context,expression) ::= <<
-- Context: $context$
-- Expression: $expression$
>>

check_database_references() ::= <<
true
>>

// --- NAVIGATION (CLASS AND ATTRIBUTE) --- 
feature_call_navigation_select(object,from,alias,join,where,groupby) ::= <<
(SELECT $object$
FROM $from$ AS $alias$
$join$
$if(where)$WHERE $where$$endif$$if(groupby)$
GROUP BY $groupby$$endif$)
>>

feature_call_navigation_join(object,from,alias,join,where) ::= <<
INNER JOIN $from$ AS $alias$ ON $where$$if(join)$

$join$$endif$
>>

feature_call_navigation_where(alias1,where,alias2,object) ::= <<
$feature_call_attribute_context(alias=alias1,attribute=where)$ = $feature_call_attribute_context(alias=alias2,attribute=object)$
>>

feature_call_navigation_from(object,where,from) ::= <<
(SELECT $object$$if(where)$,$where$$endif$ FROM $from$)
>>


// --- ATTRIBUTE ACCESS (CLASS AND ATTRIBUTE) --- 
feature_call_attribute_context(alias,attribute) ::= <<
$if(alias)$$alias$.$attribute$$else$$attribute$$endif$
>>

feature_call_attribute_boolean(attribute) ::= <<
($attribute$ = 1)
>>

// ---  BOOLEAN (BASIC TYPE) --- 
literal_boolean_true() ::= <<
(1=1)
>>

literal_boolean_false() ::= <<
(1=0)
>>


// ---  ENUM (BASIC TYPE) --- 
literal_enum(value) ::= <<
'$value$'
>>


// --- INTEGER (BASIC TYPE) ---
literal_integer(value) ::= <<
$value$
>>

// --- REAL (BASIC TYPE) ---
literal_real(value) ::= <<
$value$
>>

// --- STRING (BASIC TYPE) ---
literal_string(value) ::= <<
'$value$'
>>

// --- VARIABLE (BASIC TYPE) ---
literal_variable(value) ::= <<
$value$
>>


// ---  COLLECTIONS - BAG (QUERY) --- 
literal_collection_bag(items) ::= <<
$items:literal_collection_bag_item(); separator="\nUNION ALL\n"$
>>

literal_collection_bag_item(item) ::= <<
$item$
>>


// ---  COLLECTIONS - SEQUENCE (QUERY) --- 
literal_collection_sequence(items) ::= <<
$items:literal_collection_sequence_item(); separator="\nUNION\n"$
>>

literal_collection_sequence_item(item) ::= <<
SELECT elem, seqno FROM (values ($item$, $i$) AS SEQ)(elem, seqno)
>>


// ---  COLLECTIONS - SET (QUERY) --- 
literal_collection_set(items) ::= <<
$items:literal_collection_set_item(); separator="\nUNION\n"$
>>

literal_collection_set_item(item) ::= <<
$item$
>>


// --- ARITHMETIC EXPRESSIONS (BASIC TYPE) --- 
arithmetic_expression_div(operand1,operand2) ::= <<
($operand1$ / $operand2$)
>>

arithmetic_expression_minus(operand1,operand2) ::= <<
($operand1$ - $operand2$)
>>

arithmetic_expression_mult(operand1,operand2) ::= <<
($operand1$ * $operand2$)
>>

arithmetic_expression_plus(operand1,operand2) ::= <<
($operand1$ + $operand2$)
>>


// --- IF EXPRESSION ---
if_expression(if_branch,then_branch,else_branch) ::= <<
CASE
  WHEN $if_branch$ THEN $then_branch$
  ELSE $else_branch$
END
>>


// -- ITERATOR FORALL (QUERY) ---
feature_call_forAll(operand) ::= <<
NOT EXISTS($operand$)
>>

// -- ITERATOR FORALL (QUERY) ---
feature_call_forAll_where(operand) ::= <<
NOT($operand$)
>>

// -- ITERATOR EXISTS (QUERY) ---
feature_call_exists(operand) ::= <<
EXISTS($operand$)
>>

// -- ITERATOR EXISTS (QUERY) ---
feature_call_exists_where(operand) ::= <<
$operand$
>>

// -- ITERATOR COLLECT (QUERY) ---
feature_call_collect(source,alias,object,object2,object3,from,expression) ::= <<
$expression$
>>

// -- ITERATOR REJECT (QUERY) ---
feature_call_reject(operand) ::= <<
NOT($operand$)
>>

// -- ITERATOR SELECT (QUERY) ---
feature_call_select(operand) ::= <<
$operand$
>>

// --- OCLISTYPEOF (CLASS AND ATTRIBUTE) ---
feature_call_oclistypeof(from,object,object2,alias) ::= <<
EXISTS(
  SELECT $alias$.$object$ FROM $from$ AS $alias$
  WHERE $alias$.$object$ = $object2$)
>>
  
// --- OCLISKINDOF (CLASS AND ATTRIBUTE) ---
feature_call_ocliskindof(from,from2,object,alias) ::= <<
EXISTS(
  SELECT $object$ FROM $from$
  WHERE $object$ = $alias$.$object$)
$if(from2)$
  AND NOT EXISTS(
  SELECT $object$ FROM $from2$
  WHERE $object$ = $alias$.$object$)
$endif$
>>


// --- RELATIONAL EXPRESSIONS ---


// --- EQUAL ---
relational_expression_equals_any(operand1,operand2) ::= <<
($operand1$ = $operand2$)
>>

relational_expression_equals_boolean(operand1,operand2) ::= <<
(($operand1$ AND $operand2$) OR (NOT $operand1$ AND NOT $operand2$))
>>

relational_expression_equals_integer(operand1,operand2) ::= <<
($operand1$ = $operand2$)
>>

relational_expression_equals_real(operand1,operand2) ::= <<
($operand1$ = $operand2$)
>>

relational_expression_equals_string(operand1,operand2) ::= <<
($operand1$ = $operand2$)
>>


// --- NEQUAL ---
relational_expression_nequals_any(operand1,operand2) ::= <<
NOT ($operand1$ = $operand2$)
>>

relational_expression_nequals_boolean(operand1,operand2) ::= <<
((NOT $operand1$ AND $operand2$) OR ($operand1$ AND NOT $operand2$))
>>

relational_expression_nequals_integer(operand1,operand2) ::= <<
NOT ($operand1$ = $operand2$)
>>

relational_expression_nequals_real(operand1,operand2) ::= <<
NOT ($operand1$ = $operand2$)
>>

relational_expression_nequals_string(operand1,operand2) ::= <<
NOT ($operand1$ = $operand2$)
>>


// --- GREATER ---
relational_expression_greater_any(operand1,operand2) ::= <<
($operand1$ > $operand2$)
>>

relational_expression_greater_integer(operand1,operand2) ::= <<
($operand1$ > $operand2$)
>>

relational_expression_greater_real(operand1,operand2) ::= <<
($operand1$ > $operand2$)
>>

relational_expression_greater_string(operand1,operand2) ::= <<
($operand1$ > $operand2$)
>>


// --- GREATER OR EQUAL ---
relational_expression_greaterequal_any(operand1,operand2) ::= <<
($operand1$ >= $operand2$)
>>

relational_expression_greaterequal_integer(operand1,operand2) ::= <<
($operand1$ >= $operand2$)
>>

relational_expression_greaterequal_real(operand1,operand2) ::= <<
($operand1$ >= $operand2$)
>>

relational_expression_greaterequal_string(operand1,operand2) ::= <<
($operand1$ >= $operand2$)
>>


// --- LESSER ---
relational_expression_lesser_any(operand1,operand2) ::= <<
($operand1$ < $operand2$)
>>

relational_expression_lesser_integer(operand1,operand2) ::= <<
($operand1$ < $operand2$)
>>

relational_expression_lesser_real(operand1,operand2) ::= <<
($operand1$ < $operand2$)
>>

relational_expression_lesser_string(operand1,operand2) ::= <<
($operand1$ < $operand2$)
>>


// --- LESSER OR EQUAL ---
relational_expression_lesserequal_any(operand1,operand2) ::= <<
($operand1$ <= $operand2$)
>>

relational_expression_lesserequal_integer(operand1,operand2) ::= <<
($operand1$ <= $operand2$)
>>

relational_expression_lesserequal_real(operand1,operand2) ::= <<
($operand1$ <= $operand2$)
>>

relational_expression_lesserequal_string(operand1,operand2) ::= <<
($operand1$ <= $operand2$)
>>

//
// --- UNARY EXPRESSIONS ---
//
unary_expression_minus(operand) ::= <<
-$operand$
>>

unary_expression_not(operand) ::= <<
NOT($operand$)
>>


// --- LOGICAL EXPRESSIONS ---
logical_expression_and(operand1,operand2) ::= <<
($operand1$ AND $operand2$)
>>

logical_expression_or(operand1,operand2) ::= <<
($operand1$ OR $operand2$)
>>

logical_expression_xor(operand1,operand2) ::= <<
(($operand1$ OR $operand2$) AND NOT ($operand1$ AND $operand2$))
>>

logical_expression_implies(operand1,operand2) ::= <<
(NOT $operand1$ OR $operand2$)
>>

// --- COLLECTION RELATED OPERATIONS ---
feature_call_count(object) ::= <<
CASE
  WHEN COUNT($object$) IS NULL THEN 0
  ELSE COUNT($object$)
END
>>

feature_call_min(object) ::= <<
MIN($object$)
>>

feature_call_max(object) ::= <<
MAX($object$)
>>

feature_call_size(object) ::= <<
CASE
  WHEN COUNT($object$) IS NULL THEN 0
  ELSE COUNT($object$)
END
>>

feature_call_count_select(object) ::= <<
CASE
  WHEN $object$ IS NULL THEN NULL
  ELSE 1
END
>>

feature_call_size_select(object) ::= <<
CASE
  WHEN $object$ IS NULL THEN NULL
  ELSE 1
END
>>

feature_call_sum_select(object) ::= <<
$object$
>>

feature_call_sum(object) ::= <<
CASE
  WHEN SUM($object$) IS NULL THEN 0
  ELSE SUM($object$)
END
>>

feature_call_excludes(operand1,operand2) ::= <<
$operand2$ NOT IN
  ($operand1$)
>>

feature_call_includes(operand1,operand2) ::= <<
$operand2$ IN
  ($operand1$)
>>

feature_call_excludesall(operand1,operand2) ::= <<
NOT EXISTS (
  ($operand2$)
  INTERSECT
  ($operand1$))
>>

feature_call_includesall(operand1,operand2) ::= <<
NOT EXISTS (
  ($operand2$)
  EXCEPT
  ($operand1$))
>>

feature_call_isempty(operand) ::= <<
NOT EXISTS ($operand$)
>>

feature_call_notempty(operand) ::= <<
EXISTS ($operand$)
>>

feature_call_intersection_bag(operand1,operand2) ::= <<
($operand2$ INTERSECT ALL
  $operand1$)
>>

feature_call_intersection_set(operand1,operand2) ::= <<
($operand2$ INTERSECT
  $operand1$)
>>

feature_call_including_bag(operand1,operand2) ::= <<
($operand1$ UNION ALL
  ($operand2$))
>>

feature_call_including_sequence(operand1,operand2) ::= <<
($operand1$)
  UNION
  (SELECT $operand2$, ((SELECT MAX(SEQNO) FROM ($operand1$)) + 1) AS SEQNO)
>>

feature_call_including_set(operand1,operand2) ::= <<
($operand1$ UNION
  ($operand2$))
>>

feature_call_excluding_bag(operand1,operand2,element) ::= <<
($operand1$ EXCEPT ALL
  ($element$))
>>

feature_call_excluding_sequence(operand1,operand2,element) ::= <<
SELECT $operand2$,
  (SELECT COUNT(*)+1 FROM (
    SELECT $operand2$, SEQNO
    FROM $operand2$
    WHERE NOT ($element$ = $operand2$)
  ) WHERE SEQNO < s.SEQNO) AS SEQNO
  FROM (
    SELECT $operand2$, SEQNO
    FROM $operand1$
    WHERE NOT ($element$ = $operand2$)
  )
>>

feature_call_excluding_set(operand1,operand2,element) ::= <<
($operand1$ EXCEPT
  ($operand2$))
>>

feature_call_union_bag(operand1,operand2,object) ::= <<
($operand1$ UNION ALL
  $operand2$)
>>

feature_call_union_sequence(operand1,operand2,object) ::= <<
($operand1$)
  UNION
  (SELECT $object$, (SELECT MAX(SEQNO) FROM ($operand1$)) AS SEQNO
   FROM $operand2$)
>>

feature_call_union_set(operand1,operand2,object) ::= <<
($operand1$ UNION
  $operand2$)
>>

feature_call_symmetricdifference(operand1,operand2) ::= <<
($operand1$ EXCEPT $operand2$
 $operand2$ EXCEPT $operand1$)
>>

feature_call_string_concat(operand1,operand2) ::= <<
$operand1$ || $operand2$
>>

feature_call_string_size(operand) ::= <<
LENGTH($operand$)
>>

feature_call_string_tolower(operand) ::= <<
LOWER($operand$)
>>

feature_call_string_toupper(operand) ::= <<
UPPER($operand$)
>>

feature_call_string_substring(operand,start,end) ::= <<
SUBSTRING($operand$, $start$, $end$ - $start$ + 1)
>>

feature_call_int_abs(operand1) ::= <<
ABS($operand1$)
>>

feature_call_int_floor(operand1) ::= <<
FLOOR($operand1$)
>>

feature_call_int_div(operand1,operand2) ::= <<
($operand1$ / $operand2$)
>>

feature_call_int_max(operand1,operand2) ::= <<
CASE
  WHEN $operand1$ > $operand2$ THEN $operand1$
  ELSE $operand2$
END
>>

feature_call_int_min(operand1,operand2) ::= <<
CASE
  WHEN $operand1$ < $operand2$ THEN $operand1$
  ELSE $operand2$
END
>>

feature_call_int_mod(operand1,operand2) ::= <<
$operand1$ - (($operand1$ / $operand2$) * $operand2$)
>>

feature_call_int_round(operand1) ::= <<
ROUND($operand1$)
>>