Implemented Test Packages:
==========================
* Constraint Types
  + Body Expressions
  + Definitions
  + Derive Expressions
  + Init Expressions
  + Invariants
  + Postconditions
  + Preconditions
* Expressions
  + BooleanLiteralExp
  + CollectionLiteralExpression
    - Standard Init
    - Ranges
  + EnumLiteralExp
  + IntegerLiteralExp
  + IfExp
  + IterateExp
  + (IteratorExp are tested with the standard library, because they are just
     predefined IterateExpressions)
  + LetExp
  + OperationCallExp
    + obligatory self variable
    + obligatory asSet() operation for non-collection types
    + static operations
    + special operation allInstances() (uses . Operator!!!)
    + special operation @pre
      * non allowed on static properties
      * only allowed in postconditions.
  + PropertyCallExp
    + obligatory self variable
    + static properties
    + When the name of an association-end is missing at one of the ends of an
      association, the name of the type at the association end starting with a
      lower case character is used as the role name.
  + RealLiteralExp
  + StringLiteralExp
  + TupleLiteralExp
  + TypeLiteralExp
  + VariableExp
    + self
    + argument variables if context is operation
    + result variable
* Namespace and Context
  + Context Expressions
    - Positives and Negatives (Types and Operation contexts)
    - Multiple result context unique/ordered -> Set, OrderedSet etc.
  + Package Expression
    - Positives and Negatives
* StandardLibrary      
  + OclAny
    - a.=(b), a = b
    - a.<>(b), a <> b
    - oclAsType(Type)
    - oclIsInvalid()
    - oclIsKindOf(Type)
    - oclIsNew()
      * only in postconditions valid
    - oclIsTypeOf(Type)
    - oclIsUndefined()


Planned Test Cases:
===================
* StandardLibrary      
  + OclInvalid
    - oclType() (OCL 2.1)
...    
  
    + Infix Operators (Spec Section 7.4.8)
      - +
      - -
      - *
      - /
      - <
      - >
      - <=
      - >=
    
Continue reading Standard from Chapter 11.4

Readme?
Manifest
Add to general test suite?
    
StandardLibrary:
================
False IMPLIES anything is True, anything IMPLIES True is True

The IF-expression is another exception. It will be valid as long as 
the chosen branch is valid, irrespective of the value of the other branch.