--
----------------------------------------------------------------------
-- ProgramPartner
----------------------------------------------------------------------
package tudresden::ocl20::pivot::examples::royalsandloyals

 context ProgramPartner 
 inv nrOfParticipants: numberOfCustomers = programs.participants->size()
 inv:  numberOfCustomers = programs->collect(p:LoyaltyProgram| p.participants)
                           ->size()

  context ProgramPartner 
  inv nrOfParticipants2: 
  numberOfCustomers = programs.participants->asSet()->size()

 context ProgramPartner 
   inv totalPoints: 
   deliveredServices.transaction.points->sum() < 10000

context ProgramPartner 
  inv:  deliveredServices->collect(s:Service| s.transaction)
               ->select(t:Transaction|t.oclIsTypeOf(Earning))
      		       ->collect(t:Transaction|t.points)->size()>0


  /* the following invariant states that the maximum number of points 
  that may be earned by all services of a program partner is equal 
  to 10,000 
  */
  context ProgramPartner 
    inv totalPointsEarning2: 
    deliveredServices.transaction -- all transaction 
    ->select(t:Transaction|t.oclIsTypeOf(Earning) ) -- select earning ones 
    .points->sum() -- sum all points 
    < 10000 -- sum smaller than 10,000

   context ProgramPartner 
     inv: self.programs.partners->select(p : ProgramPartner | p <> self)
             ->isEmpty()

context ProgramPartner 
	def: getBurningTransactions(): Set(Transaction) = 
			self.deliveredServices.transaction->iterate( 
 				  t : Transaction; 
 				  resultSet : Set(Transaction) = Set{} | 
 				  if t.oclIsTypeOf( Burning ) then 
 				  	resultSet->including( t ) 
 				  else 
 				  	resultSet 
 				  endif 
			)

endpackage
