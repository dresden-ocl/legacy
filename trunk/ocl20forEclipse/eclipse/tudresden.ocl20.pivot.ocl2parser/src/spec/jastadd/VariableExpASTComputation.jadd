/*
    Copyright (C) 2007  Nils (s0006383@inf.tu-dresden.de)

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/*
 * This aspect computes the variable and variable expression.
 */
public aspect VariableASTComputation {
	/*
	 * OCL-Specification:
	 * 
	 * VariableExpCS ::= simpleNameCS
	 */
	public VariableExp VariableExpAS.computeASM(Environment env) throws BuildingASMException {
		// Get the expression factory.
		IModelFactory factory = env.getExpFactory();
		
		// Compute the associated variable
		Variable var = getVariable().computeASM(env);
		
		// Put the variable into a variable expression.
		VariableExp result = factory.createVariableExp(var);
		
		// If the factory returns null, it is a little bit strange, it is an error.
		if (result == null) throw new BuildingASMException("An internal error occured while compute a variable expression", null);
		
		return result;
	}
	
	/*
	 * OCL-Specification:
	 * 
	 * VariableDeclaration ::= simpleNameCS (':' typeCS)? ('=' OclExpressionCS)?
	 */
	public Variable VariableAS.computeASM(Environment env) throws BuildingASMException {
		// Get the expression factory.
		IModelFactory factory = env.getExpFactory();
		
		// Get the name of the variable. It is also the error token.
		TokenAS token = getName();
		String name = getName().getValue();
		
		// If the variable has no type, it is an error.
		//if (!hasType()) throw new BuildingASMException("The variable declaration must have a type.", token);
		
		// Get the type of the variable.
		Type type = null;
		if (hasType()) type = getType().computeASM(env);
		
		// Compute the init expression if one exists.
		OclExpression initExpression = null;
		if (hasExpression()) {
			initExpression = getExpression().computeASM(env);
		}
		
		// Create the variable with the elements computed before.
		Variable result = null;
		try {
			result = factory.createVariable(name, type, initExpression);
		} catch(Exception ex) {
			throw new BuildingASMException(ex.getMessage(), token);
		}
		
		
		// If the factory returns null, it is a little bit strange, it is an error.
		if (result == null) throw new BuildingASMException("An internal error occured.", token);
		
		return result;	
	}
}