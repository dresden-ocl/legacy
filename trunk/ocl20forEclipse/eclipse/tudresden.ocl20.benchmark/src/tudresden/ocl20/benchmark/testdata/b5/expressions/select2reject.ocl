package tudresden::ocl20::benchmark::testdata::common

-------------------------------------
-- B5: select2reject
-------------------------------------



-- Collection Operations

-- -- DB related

-- -- -- select to reject

-- -- -- -- Empty

-- -- -- -- -- Set ------------------------------------------------


context Dummy inv:
let c:Set(Integer) = Set{} in 
   c->select(i|i<4) = c->reject(i|not(i<4))


-- -- -- -- -- Bag

context Dummy inv:
let c:Bag(Integer) = Bag{} in 
   c->select(i|i<4) = c->reject(i|not(i<4))


-- -- -- -- -- Sequence

context Dummy inv:
let c:Sequence(Integer) = Sequence{} in 
   c->select(i|i<4) = c->reject(i|not(i<4))


-- -- -- -- Singleton

-- -- -- -- -- Includes Undefined

-- -- -- -- -- -- Set ---------------------------------------------

context Dummy inv:
let c:Set(Integer) = Set{oclUndefined} in 
   c->select(i|i<4) = c->reject(i|not(i<4))


-- -- -- -- -- -- Bag

context Dummy inv:
let c:Bag(Integer) = Bag{oclUndefined} in 
   c->select(i|i<4) = c->reject(i|not(i<4))


-- -- -- -- -- -- Sequence

context Dummy inv:
let c:Sequence(Integer) = Sequence{oclUndefined} 
       in c->select(i|i<4) = c->reject(i|not(i<4))


-- -- -- -- -- Excludes Undefined

-- -- -- -- -- -- Expression e fulfilled

-- -- -- -- -- -- -- Set ------------------------------------------

context Dummy inv:
let c:Set(Integer) = Set{1} in c->select(i|i<4) = c->reject(i|not(i<4))


-- -- -- -- -- -- -- Bag

context Dummy inv:
let c:Bag(Integer) = Bag{1} in c->select(i|i<4) = c->reject(i|not(i<4))


-- -- -- -- -- -- -- Sequence

context Dummy inv:
let c:Sequence(Integer) = Sequence{1} in c->select(i|i<4) = c->reject(i|not(i<4))


-- -- -- -- -- -- Expression e not fulfilled

-- -- -- -- -- -- -- Set ------------------------------------------

context Dummy inv:
let c:Set(Integer) = Set{4} in c->select(i|i<4) = c->reject(i|not(i<4))


-- -- -- -- -- -- -- Bag

context Dummy inv:
let c:Bag(Integer) = Bag{4} in c->select(i|i<4) = c->reject(i|not(i<4))


-- -- -- -- -- -- -- Sequence

context Dummy inv:
let c:Sequence(Integer) = Sequence{4} in c->select(i|i<4) = c->reject(i|not(i<4))


-- -- -- -- Many Elements

-- -- -- -- -- Includes Undefined

-- -- -- -- -- -- Set ---------------------------------------------

context Dummy inv:
let c:Set(Integer) = Set{oclUndefined, 1, 2, 3} in 
   c->select(i|i<4) = c->reject(i|not(i<4))


-- -- -- -- -- -- Bag

-- -- -- -- -- -- -- Equal Values

context Dummy inv:
let c:Bag(Integer) = Bag{oclUndefined, 1, 2, 3, 
                  oclUndefined} in 
   c->select(i|i<4) = c->reject(i|not(i<4))


-- -- -- -- -- -- -- No Equal Values

context Dummy inv:
let c:Bag(Integer) = Bag{oclUndefined, 1, 2, 3} in 
   c->select(i|i<4) = c->reject(i|not(i<4))


-- -- -- -- -- -- Sequence

-- -- -- -- -- -- -- Equal Values

context Dummy inv:
let c:Sequence(Integer) = Sequence{oclUndefined, 1, 2, 3, 
                       oclUndefined} in 
   c->select(i|i<4) = c->reject(i|not(i<4))


-- -- -- -- -- -- -- No Equal Values

context Dummy inv:
let c:Sequence(Integer) = Sequence{oclUndefined, 1, 2, 3} in 
   c->select(i|i<4) = c->reject(i|not(i<4))


-- -- -- -- -- Excludes Undefined

-- -- -- -- -- -- Expression e fulfilled

-- -- -- -- -- -- -- Set ------------------------------------------

context Dummy inv:
let c:Set(Integer) = Set{1, 2, 3} in c->select(i|i<4) = c->reject(i|not(i<4))


-- -- -- -- -- -- -- Bag

-- -- -- -- -- -- -- -- Equal Values

context Dummy inv:
let c:Bag(Integer) = Bag{1, 2, 3, 1} in 
   c->select(i|i<4) = c->reject(i|not(i<4))


-- -- -- -- -- -- -- -- No Equal Values

context Dummy inv:
let c:Bag(Integer) = Bag{1, 2, 3} in c->select(i|i<4) = c->reject(i|not(i<4))


-- -- -- -- -- -- -- Sequence

-- -- -- -- -- -- -- -- Equal Values

context Dummy inv:
let c:Sequence(Integer) = Sequence{1, 2, 3, 1} in 
   c->select(i|i<4) = c->reject(i|not(i<4))


-- -- -- -- -- -- -- -- No Equal Values

context Dummy inv:
let c:Sequence(Integer) = Sequence{1, 2, 3} in 
   c->select(i|i<4) = c->reject(i|not(i<4))


-- -- -- -- -- -- Expression e not fulfilled

-- -- -- -- -- -- -- Set ------------------------------------------

context Dummy inv:
let c:Set(Integer) = Set{2, 3, 4, 5} in 
   c->select(i|i<4) = c->reject(i|not(i<4))


-- -- -- -- -- -- -- Bag

-- -- -- -- -- -- -- -- Equal Values (both violating)

context Dummy inv:
let c:Bag(Integer) = Bag{2, 3, 4, 5, 4} in 
   c->select(i|i<4) = c->reject(i|not(i<4))


-- -- -- -- -- -- -- -- Equal Values (both not violating)

context Dummy inv:
let c:Bag(Integer) = Bag{2, 3, 4, 5, 2} in 
   c->select(i|i<4) = c->reject(i|not(i<4))


-- -- -- -- -- -- -- -- No Equal Values

context Dummy inv:
let c:Bag(Integer) = Bag{2, 3, 4, 5} in 
   c->select(i|i<4) = c->reject(i|not(i<4))


-- -- -- -- -- -- -- Sequence

-- -- -- -- -- -- -- -- Equal Values (both violating)

context Dummy inv:
let c:Sequence(Integer) = Sequence{2, 3, 4, 5, 4} in 
   c->select(i|i<4) = c->reject(i|not(i<4))


-- -- -- -- -- -- -- -- Equal Values (both not violating)

context Dummy inv:
let c:Sequence(Integer) = Sequence{2, 3, 4, 5, 2} in 
   c->select(i|i<4) = c->reject(i|not(i<4))


-- -- -- -- -- -- -- -- No Equal Values

context Dummy inv:
let c:Sequence(Integer) = Sequence{2, 3, 4, 5} in 
   c->select(i|i<4) = c->reject(i|not(i<4))

  
  
endpackage