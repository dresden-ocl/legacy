package tudresden::ocl20::benchmark::testdata::common

-------------------------------------
-- B5: iterate2iterate_let
-------------------------------------


-- Technical Relationships

-- -- iterate with let

-- -- -- Empty

-- -- -- -- Set ---------------------------------------------------

context Dummy inv: 
	let c:Set(Integer) = Set{} in 
   c->iterate(elem:Integer; r:Bag(Integer) = Bag{1} | 
         r->including(r->size()+elem)) 
       = 
   c->iterate(elem:Integer; r:Bag(Integer) = Bag{1} |
         let res = r->including(r->size()+elem) in res)

  
-- -- -- -- Bag

context Dummy inv: 
	let c:Bag(Integer) = Bag{} in 
   c->iterate(elem:Integer; r:Bag(Integer) = Bag{1} |
         r->including(r->size()+elem)) 
       = 
   c->iterate(elem:Integer; r:Bag(Integer) = Bag{1} |
         let res = r->including(r->size()+elem) in res)

  
-- -- -- -- Sequence

context Dummy inv: 
	let c:Sequence(Integer) = Sequence{} in 
   c->iterate(elem:Integer; r:Bag(Integer) = Bag{1} | 
         r->including(r->size()+elem)) 
       = 
   c->iterate(elem:Integer; r:Bag(Integer) = Bag{1} |
         let res = r->including(r->size()+elem) in res)

  
-- -- -- Singleton

-- -- -- -- Includes Undefined

-- -- -- -- -- Set ------------------------------------------------

context Dummy inv: 
	let c:Set(Integer) = Set{ oclUndefined } in 
   c->iterate(elem:Integer; r:Bag(Integer) = Bag{1} | 
         r->including(r->size()+elem)) 
       = 
   c->iterate(elem:Integer; r:Bag(Integer) = Bag{1} |
         let res = r->including(r->size()+elem) in res)

  
-- -- -- -- -- Bag

context Dummy inv: 
	let c:Bag(Integer) = Bag{ oclUndefined } in 
   c->iterate(elem:Integer; r:Bag(Integer) = Bag{1} | 
         r->including(r->size()+elem)) 
       = 
   c->iterate(elem:Integer; r:Bag(Integer) = Bag{1} |
         let res = r->including(r->size()+elem) in res)

  
-- -- -- -- -- Sequence

context Dummy inv: 
	let c:Sequence(Integer) = Sequence{ oclUndefined } in 
   c->iterate(elem:Integer; r:Bag(Integer) = Bag{1} | 
         r->including(r->size()+elem)) 
       = 
   c->iterate(elem:Integer; r:Bag(Integer) = Bag{1} |
         let res = r->including(r->size()+elem) in res)

  
-- -- -- -- Excludes Undefined

-- -- -- -- -- Set ------------------------------------------------

context Dummy inv: 
	let c:Set(Integer) = Set{2} in 
   c->iterate(elem:Integer; r:Bag(Integer) = Bag{1} | 
         r->including(r->size()+elem)) 
       = 
   c->iterate(elem:Integer; r:Bag(Integer) = Bag{1} |
         let res = r->including(r->size()+elem) in res)

  
-- -- -- -- -- Bag

context Dummy inv: 
	let c:Bag(Integer) = Bag{2} in 
   c->iterate(elem:Integer; r:Bag(Integer) = Bag{1} | 
         r->including(r->size()+elem)) 
       = 
   c->iterate(elem:Integer; r:Bag(Integer) = Bag{1} |
         let res = r->including(r->size()+elem) in res)

  
-- -- -- -- -- Sequence

context Dummy inv: 
	let c:Sequence(Integer) = Sequence{2} in 
   c->iterate(elem:Integer; r:Bag(Integer) = Bag{1} | 
         r->including(r->size()+elem)) 
       = 
   c->iterate(elem:Integer; r:Bag(Integer) = Bag{1} |
         let res = r->including(r->size()+elem) in res)

  
-- -- -- Many Elements

-- -- -- -- Includes Undefined

-- -- -- -- -- Set ------------------------------------------------

context Dummy inv: 
	let c:Set(Integer) = Set{ oclUndefined , 2, 3, -10} in 
   c->iterate(elem:Integer; r:Bag(Integer) = Bag{1} | 
         r->including(r->size()+elem)) 
       = 
   c->iterate(elem:Integer; r:Bag(Integer) = Bag{1} |
         let res = r->including(r->size()+elem) in res)

  
-- -- -- -- -- Bag

-- -- -- -- -- -- Equal Values

context Dummy inv: 
	let c:Bag(Integer) = Bag{ oclUndefined , 2, 3, -10, 
                   oclUndefined } in 
   c->iterate(elem:Integer; r:Bag(Integer) = Bag{1} | 
         r->including(r->size()+elem)) 
       = 
   c->iterate(elem:Integer; r:Bag(Integer) = Bag{1} |
         let res = r->including(r->size()+elem) in res)

  
-- -- -- -- -- -- No Equal Values

context Dummy inv: 
	let c:Bag(Integer) = Bag{ oclUndefined , 2, 3, -10} in 
   c->iterate(elem:Integer; r:Bag(Integer) = Bag{1} | 
         r->including(r->size()+elem)) 
       = 
   c->iterate(elem:Integer; r:Bag(Integer) = Bag{1} |
         let res = r->including(r->size()+elem) in res)

  
-- -- -- -- -- Sequence

-- -- -- -- -- -- Equal Values

context Dummy inv: 
	let c:Sequence(Integer) = Sequence{ oclUndefined , 2, 3, -10, 
                        oclUndefined } in 
   c->iterate(elem:Integer; r:Bag(Integer) = Bag{1} | 
         r->including(r->size()+elem)) 
       = 
   c->iterate(elem:Integer; r:Bag(Integer) = Bag{1} |
         let res = r->including(r->size()+elem) in res)

  
-- -- -- -- -- -- No Equal Values

context Dummy inv: 
	let c:Sequence(Integer) = Sequence{ oclUndefined , 2, 3, -10} in 
   c->iterate(elem:Integer; r:Bag(Integer) = Bag{1} | 
         r->including(r->size()+elem)) 
       = 
   c->iterate(elem:Integer; r:Bag(Integer) = Bag{1} |
         let res = r->including(r->size()+elem) in res)

  
-- -- -- -- Excludes Undefined

-- -- -- -- -- Set ------------------------------------------------

context Dummy inv: 
	let c:Set(Integer) = Set{1, 2, 3, -10} in 
   c->iterate(elem:Integer; r:Bag(Integer) = Bag{1} | 
         r->including(r->size()+elem)) 
       = 
   c->iterate(elem:Integer; r:Bag(Integer) = Bag{1} |
         let res = r->including(r->size()+elem) in res)

  
-- -- -- -- -- Bag

-- -- -- -- -- -- Equal Values

context Dummy inv: 
	let c:Bag(Integer) = Bag{1, 2, 3, -10, 1} in 
   c->iterate(elem:Integer; r:Bag(Integer) = Bag{1} | 
         r->including(r->size()+elem)) 
       = 
   c->iterate(elem:Integer; r:Bag(Integer) = Bag{1} |
         let res = r->including(r->size()+elem) in res)

  
-- -- -- -- -- -- No Equal Values

context Dummy inv: 
	let c:Bag(Integer) = Bag{1, 2, 3, -10} in 
   c->iterate(elem:Integer; r:Bag(Integer) = Bag{1} | 
         r->including(r->size()+elem)) 
       = c->iterate(elem:Integer; r:Bag(Integer) = Bag{1} |
         let res = r->including(r->size()+elem) in res)

  
-- -- -- -- -- Sequence

-- -- -- -- -- -- Equal Values

context Dummy inv: 
	let c:Sequence(Integer) = Sequence{1, 2, 3, -10, 1} in 
   c->iterate(elem:Integer; r:Bag(Integer) = Bag{1} | 
         r->including(r->size()+elem)) 
       = 
   c->iterate(elem:Integer; r:Bag(Integer) = Bag{1} |
         let res = r->including(r->size()+elem) in res)

  
-- -- -- -- -- -- No Equal Values

context Dummy inv: 
	let c:Sequence(Integer) = Sequence{1, 2, 3, -10} in 
   c->iterate(elem:Integer; r:Bag(Integer) = Bag{1} | 
         r->including(r->size()+elem)) 
       = 
   c->iterate(elem:Integer; r:Bag(Integer) = Bag{1} |
         let res = r->including(r->size()+elem) in res)

  
  endpackage