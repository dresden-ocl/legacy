package tudresden::ocl20::benchmark::testdata::common

-------------------------------------
-- B5: singleton2value
-------------------------------------

-- Technical Relationships

-- -- Singleton to Value

-- -- -- Empty

-- -- -- -- Set ---------------------------------------------------

context Dummy inv: 
	let c:Set(Integer) = Set{} in 
       if c->size() = 1 then c->any(true) 
       else oclUndefined endif = 
         if c->size() = 1 then
       c->iterate(elem; r:Integer =  oclUndefined | elem) 
         else  oclUndefined endif

  -- Expected Results:
  = true

context Dummy inv: 
	let c:Set(Integer) = Set{} in 
       if c->size() = 1 then c->any(true) 
       else  oclUndefined endif = 
     c->iterate(elem;
           r:Sequence(OclAny) = Sequence{ oclUndefined,false} |
           if r->at(2) = false then Sequence{elem,true} 
           else Sequence{ oclUndefined,true} endif)->at(1)

  -- Expected Results:
  = true

-- -- -- -- Bag

context Dummy inv: 
	let c:Bag(Integer) = Bag{} in 
       if c->size() = 1 then c->any(true) 
       else  oclUndefined endif = 
         if c->size() = 1 then 
       c->iterate(elem; r:Integer =  oclUndefined | elem) 
         else  oclUndefined endif

  -- Expected Results:
  = true

context Dummy inv: 
	let c:Bag(Integer) = Bag{} in 
       if c->size() = 1 then c->any(true) 
       else  oclUndefined endif = 
     c->iterate(elem;
           r:Sequence(OclAny) = Sequence{ oclUndefined,false} |
           if r->at(2) = false then Sequence{elem,true} 
           else Sequence{ oclUndefined,true} endif)->at(1)

  -- Expected Results:
  = true

-- -- -- -- Sequence

context Dummy inv: 
let c = (Sequence) in 
       if c->size() = 1 then c->any(true) 
       else  oclUndefined endif = 
         if c->size() = 1 then 
       c->iterate(elem; r:Integer =  oclUndefined | elem) 
         else  oclUndefined endif

  -- Expected Results:
  = true

context Dummy inv: 
	let c:Sequence(Integer) = Sequence{} in 
       if c->size() = 1 then c->any(true) 
       else  oclUndefined endif = 
     c->iterate(elem;
           r:Sequence(OclAny) = Sequence{ oclUndefined,false} |
           if r->at(2) = false then Sequence{elem,true} 
           else Sequence{ oclUndefined,true} endif)->at(1)

  -- Expected Results:
  = true

-- -- -- Singleton

-- -- -- -- Includes Undefined

-- -- -- -- -- Set ------------------------------------------------

context Dummy inv: 
	let c:Set(Integer) = Set{ oclUndefined} in 
       if c->size() = 1 then c->any(true) 
       else  oclUndefined endif = 
         if c->size() = 1 then 
       c->iterate(elem; r:Integer =  oclUndefined | elem) 
         else  oclUndefined endif

  -- Expected Results:
  = true

context Dummy inv: 
	let c:Set(Integer) = Set{ oclUndefined} in 
       if c->size() = 1 then c->any(true) 
       else  oclUndefined endif = 
     c->iterate(elem;
           r:Sequence(OclAny) = Sequence{ oclUndefined,false} |
           if r->at(2) = false then Sequence{elem,true} 
           else Sequence{ oclUndefined,true} endif)->at(1)

  -- Expected Results:
  = true

-- -- -- -- -- Bag

context Dummy inv: 
	let c:Bag(Integer) = Bag{ oclUndefined} in 
       if c->size() = 1 then c->any(true) 
       else  oclUndefined endif = 
         if c->size() = 1 then 
       c->iterate(elem; r:Integer =  oclUndefined | elem) 
         else  oclUndefined endif

  -- Expected Results:
  = true

context Dummy inv: 
	let c:Bag(Integer) = Bag{ oclUndefined} in 
       if c->size() = 1 then c->any(true) 
       else  oclUndefined endif = 
     c->iterate(elem;
           r:Sequence(OclAny) = Sequence{ oclUndefined,false} |
             if r->at(2) = false then Sequence{elem,true} 
             else Sequence{ oclUndefined,true} endif)->at(1)

  -- Expected Results:
  = true

-- -- -- -- -- Sequence

context Dummy inv: 
	let c:Sequence(Integer) = Sequence{ oclUndefined} in 
       if c->size() = 1 then c->any(true) 
       else  oclUndefined endif = 
         if c->size() = 1 then 
       c->iterate(elem; r:Integer =  oclUndefined | elem) 
         else  oclUndefined endif

  -- Expected Results:
  = true

context Dummy inv: 
	let c:Sequence(Integer) = Sequence{ oclUndefined} in 
       if c->size() = 1 then c->any(true) 
       else  oclUndefined endif = 
     c->iterate(elem; 
           r:Sequence(OclAny) = Sequence{ oclUndefined,false} |
           if r->at(2) = false then Sequence{elem,true} 
           else Sequence{ oclUndefined,true} endif)->at(1)

  -- Expected Results:
  = true

-- -- -- -- Excludes Undefined

-- -- -- -- -- Set ------------------------------------------------

context Dummy inv: 
	let c:Set(Integer) = Set{2} in 
       if c->size() = 1 then c->any(true) 
       else  oclUndefined endif = 
         if c->size() = 1 then 
       c->iterate(elem; r:Integer =  oclUndefined | elem) 
         else  oclUndefined endif

  -- Expected Results:
  = true

context Dummy inv: 
	let c:Set(Integer) = Set{2} in 
       if c->size() = 1 then c->any(true) 
       else  oclUndefined endif = 
     c->iterate(elem; 
           r:Sequence(OclAny) = Sequence{ oclUndefined,false} |
           if r->at(2) = false then Sequence{elem,true} 
           else Sequence{ oclUndefined,true} endif)->at(1)

  -- Expected Results:
  = true

-- -- -- -- -- Bag

context Dummy inv: 
	let c:Bag(Integer) = Bag{2} in 
       if c->size() = 1 then c->any(true) 
       else  oclUndefined endif = 
         if c->size() = 1 then 
       c->iterate(elem; r:Integer =  oclUndefined | elem) 
         else  oclUndefined endif

  -- Expected Results:
  = true

context Dummy inv: 
	let c:Bag(Integer) = Bag{2} in 
       if c->size() = 1 then c->any(true) 
       else  oclUndefined endif = 
     c->iterate(elem; 
           r:Sequence(OclAny) = Sequence{ oclUndefined,false} |
           if r->at(2) = false then Sequence{elem,true} 
           else Sequence{ oclUndefined,true} endif)->at(1)

  -- Expected Results:
  = true

-- -- -- -- -- Sequence

context Dummy inv: 
	let c:Sequence(Integer) = Sequence{2} in 
       if c->size() = 1 then c->any(true) 
       else  oclUndefined endif = 
         if c->size() = 1 then 
       c->iterate(elem; r:Integer =  oclUndefined | elem) 
         else  oclUndefined endif

  -- Expected Results:
  = true

context Dummy inv: 
	let c:Sequence(Integer) = Sequence{2} in 
       if c->size() = 1 then c->any(true) 
       else  oclUndefined endif = 
     c->iterate(elem; 
           r:Sequence(OclAny) = Sequence{ oclUndefined,false} |
           if r->at(2) = false then Sequence{elem,true} 
           else Sequence{ oclUndefined,true} endif)->at(1)

  -- Expected Results:
  = true

-- -- -- Many Elements

-- -- -- -- Includes Undefined

-- -- -- -- -- Set ------------------------------------------------

context Dummy inv: 
	let c:Set(Integer) = Set{ oclUndefined, 2} in 
       if c->size() = 1 then c->any(true) 
       else  oclUndefined endif = 
         if c->size() = 1 then 
       c->iterate(elem; r:Integer =  oclUndefined | elem) 
         else  oclUndefined endif

  -- Expected Results:
  = true

context Dummy inv: 
	let c:Set(Integer) = Set{ oclUndefined, 2} in 
       if c->size() = 1 then c->any(true) else 
        oclUndefined endif = 
     c->iterate(elem; 
           r:Sequence(OclAny) = Sequence{ oclUndefined,false} |
           if r->at(2) = false then Sequence{elem,true} 
           else Sequence{ oclUndefined,true} endif)->at(1)

  -- Expected Results:
  = true

-- -- -- -- -- Bag

context Dummy inv: 
	let c:Bag(Integer) = Bag{ oclUndefined, 2} in 
       if c->size() = 1 then c->any(true) else 
        oclUndefined endif = 
         if c->size() = 1 then 
       c->iterate(elem; r:Integer =  oclUndefined | elem) 
         else  oclUndefined endif

  -- Expected Results:
  = true

context Dummy inv: 
	let c:Bag(Integer) = Bag{ oclUndefined, 2} in 
       if c->size() = 1 then c->any(true) 
       else  oclUndefined endif = 
     c->iterate(elem;
           r:Sequence(OclAny) = Sequence{ oclUndefined,false} |
           if r->at(2) = false then Sequence{elem,true} 
           else Sequence{ oclUndefined,true} endif)->at(1)

  -- Expected Results:
  = true

-- -- -- -- -- Sequence

context Dummy inv: 
	let c:Sequence(Integer) = Sequence{ oclUndefined, 2} in 
       if c->size() = 1 then c->any(true) 
       else  oclUndefined endif = 
         if c->size() = 1 then 
       c->iterate(elem; r:Integer =  oclUndefined | elem) 
         else  oclUndefined endif

  -- Expected Results:
  = true

context Dummy inv: 
	let c:Bag(Integer) = Sequence{ oclUndefined, 2} in 
       if c->size() = 1 then c->any(true) 
       else  oclUndefined endif = 
     c->iterate(elem;
           r:Sequence(OclAny) = Sequence{ oclUndefined,false} |
           if r->at(2) = false then Sequence{elem,true} 
           else Sequence{ oclUndefined,true} endif)->at(1)

  -- Expected Results:
  = true

-- -- -- -- Excludes Undefined

-- -- -- -- -- Set ------------------------------------------------

context Dummy inv: 
	let c:Set(Integer) = Set{1, 2} in 
       if c->size() = 1 then c->any(true) 
       else  oclUndefined endif = 
         if c->size() = 1 then 
       c->iterate(elem; r:Integer =  oclUndefined | elem) 
         else  oclUndefined endif

  -- Expected Results:
  = true

context Dummy inv: 
	let c:Set(Integer) = Set{1, 2} in 
       if c->size() = 1 then c->any(true) 
       else  oclUndefined endif = 
     c->iterate(elem;
           r:Sequence(OclAny) = Sequence{ oclUndefined,false} |
           if r->at(2) = false then Sequence{elem,true} 
           else Sequence{ oclUndefined,true} endif)->at(1)

  -- Expected Results:
  = true

-- -- -- -- -- Bag

context Dummy inv: 
	let c:Bag(Integer) = Bag{1, 2} in 
       if c->size() = 1 then c->any(true) 
       else  oclUndefined endif = 
         if c->size() = 1 then 
       c->iterate(elem; r:Integer =  oclUndefined | elem) 
         else  oclUndefined endif

  -- Expected Results:
  = true

context Dummy inv: 
	let c:Bag(Integer) = Bag{1, 2} in 
       if c->size() = 1 then c->any(true) 
       else  oclUndefined endif = 
     c->iterate(elem; 
           r:Sequence(OclAny) = Sequence{ oclUndefined,false} |
           if r->at(2) = false then Sequence{elem,true} 
           else Sequence{ oclUndefined,true} endif)->at(1)

  -- Expected Results:
  = true

-- -- -- -- -- Sequence

context Dummy inv: 
	let c:Sequence(Integer) = Sequence{1, 2} in 
       if c->size() = 1 then c->any(true) 
       else  oclUndefined endif = 
         if c->size() = 1 then 
       c->iterate(elem; r:Integer =  oclUndefined | elem) 
         else  oclUndefined endif

  -- Expected Results:
  = true

context Dummy inv: 
	let c:Sequence(Integer) = Sequence{1, 2} in 
       if c->size() = 1 then c->any(true) 
       else  oclUndefined endif = 
     c->iterate(elem; 
           r:Sequence(OclAny) = Sequence{ oclUndefined,false} |
           if r->at(2) = false then Sequence{elem,true} 
           else Sequence{ oclUndefined,true} endif)->at(1)

  -- Expected Results:
  = true

endpackage