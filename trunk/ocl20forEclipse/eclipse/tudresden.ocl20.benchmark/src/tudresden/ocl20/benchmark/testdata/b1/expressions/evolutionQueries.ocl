package tudresden::ocl20::benchmark::testdata::b1


------------------------------------------------------------------------

--?Set = Person.allInstances()->select(p:Person|p.name='Ada' or p.name='Bob' or p.name='Cyd')
--!Set{Person, Person, Person}
?Collection = Set{Person.getByName('Ada')}->collect(p:Person|p.name)
!Bag{'Ada'}
--!Bag{'Ada', 'Bob', 'Cyd'}

------------------------------------------------------------------------

--?Set{ada,bob,cyd}.name=Bag{'Ada','Bob','Cyd'}

------------------------------------------------------------------------

--?Set{ada,bob,cyd}->collectNested(p:Person|Sequence{p.name,p.civstat,p.gender,p.alive})

------------------------------------------------------------------------

--?Person.allInstances->select(p:Person|p.husband=Person.allInstances->any(p:Person|p.wife->isEmpty()).wife).name

------------------------------------------------------------------------

--?Person.allInstances->forAll(p1,p2:Person|p1<>p2 implies p1.name<>p2.name)

------------------------------------------------------------------------

--?Person.allInstances->isUnique(p:Person|p.name)

------------------------------------------------------------------------

--?Person.allInstances->forAll(p:Person|(p.gender='female' implies p.wife->isEmpty) and (p.gender='male' implies p.husband->isEmpty))

------------------------------------------------------------------------

--?Person.allInstances->select(p:Person|p.alive and p.civstat<>'widowed').civstat

------------------------------------------------------------------------

-- context Dummy inv:
	let o:OclAny=ada in o

------------------------------------------------------------------------

--?Person.allInstances->iterate(w,h:Person;res:Set(Tuple(bride:Person,bridegroom:Person))=oclEmpty(Set(Tuple(bride:Person,bridegroom:Person)))|if w.gender='female' and h.gender='male' and w.alive and h.alive and w.civstat<>'married' and h.civstat<>'married' then res->including(Tuple{bride:w,bridegroom:h}) else res endif)

------------------------------------------------------------------------

--?Set{Bag{eve},Bag{eve.spouse()},Bag{eve.spouse().spouse()},Bag{eve.spouse().spouse().spouse()},Bag{eve.spouse().spouse().spouse().spouse()},Bag{eve.spouse().spouse().spouse().spouse().spouse()}}->flatten()

------------------------------------------------------------------------	
endpackage
  