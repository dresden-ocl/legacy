--------------------------------------------------------------------
-- exported by the SQUAM OCLEditor v0.8.0.x (OCLLib to standard OCL)
--------------------------------------------------------------------
package uml 


-- Library: Reals

--	A library with examples for numbers in OCL: Integer and Real.
-- 
--	Author: Joanna Chimiak-Opoka
--	Author: Hannes MÃ¶sl
--------------------------------------------------------
-- tests (queries with boolean result)
--------------------------------------------------------
--	Examples to show arithmetic operators for the Real numbers.
-- They include unary and binary aritmetic.
context Model

inv tRealAritmeticOperators_1: let v1: Real = 2.8 in 
			  let v2: Real = 2.0 in v1 + v2 = 4.8

context Model

inv tRealAritmeticOperators_2: let v1: Real = 2.8 in 
			  let v2: Real = 2.0 in v1 - v2 - 0.8 < 0.0001

context Model

inv tRealAritmeticOperators_3: let v1: Real = 2.8 in 
			  let v2: Real = 2.0 in v1 * v2 = 5.6

context Model

inv tRealAritmeticOperators_4: let v1: Real = 2.8 in 
			  let v2: Real = 2.0 in -v1 = -2.8

context Model

inv tRealAritmeticOperators_5: let v1: Real = 2.8 in 
			  let v2: Real = 2.0 in v1 / v2 = 1.4

--	Examples to show comparison operators for the Real numbers.
-- The equality and non-equality operators are defined for OclAny, see OCLSpecial.oclx.
context Model

inv tRealComparisonOperators_1: let v1: Real = 2.8 in 
			  let v2: Real = 2.0 in v1 > v2

context Model

inv tRealComparisonOperators_2: let v1: Real = 2.8 in 
			  let v2: Real = 2.0 in v1 >= v2

context Model

inv tRealComparisonOperators_3: let v1: Real = 2.8 in 
			  let v2: Real = 2.0 in v2 < v1

context Model

inv tRealComparisonOperators_4: let v1: Real = 2.8 in 
			  let v2: Real = 2.0 in v2 <= v2

--	Testing arithmetic operations for the Real numbers.
-- 
context Model

inv tRealAritmeticOperations_1: let v1: Real = 2.8 in 
			  let v2: Real = 2.2 in (v1 = (-v1).abs())

context Model

inv tRealAritmeticOperations_2: let v1: Real = 2.8 in 
			  let v2: Real = 2.2 in (v1.min(v2) <= v1.max(v2))

context Model

inv tRealAritmeticOperations_3: let v1: Real = 2.8 in 
			  let v2: Real = 2.2 in v1.floor() = v1.round() - 1

--	Tests convertion of a number to String.
-- The generic conversion operation is defined for OclAny, see OCLSpecial.oclx.
context Model

-- FIXME: that was converted wrong (the invariant just said 'false')
inv tNumber2String: let v1 : Real = 2.8 in
	  		  let v2 : Integer = 2 in v1.toString() = '2.8' and 
	  		       v2.toString() = '2'

--	Tests operations defined for the Intgers numbers only.
-- Additionally, the division operator is included to see the difference between it and the integer division.
context Model

inv tIntegerOperations_1: let v1: Integer = 5 in
	    	  let v2: Integer = 2 in v1.div(v2) = 2

context Model

inv tIntegerOperations_2: let v1: Integer = 5 in
	    	  let v2: Integer = 2 in v1.mod(v2) = 1

context Model

inv tIntegerOperations_3: let v1: Integer = 5 in
	    	  let v2: Integer = 2 in v1 = v1.div(v2)*v2 + v1.mod(v2)

context Model

inv tIntegerOperations_4: let v1: Integer = 5 in
	    	  let v2: Integer = 2 in v1 / v2 = 2.5

context Model

inv tIntegerOperations_5: let v1: Integer = 5 in
	    	  let v2: Integer = 2 in v1 = v1/v2*v2

endpackage