--------------------------------------------------------------------
-- exported by the SQUAM OCLEditor v0.8.0.x (OCLLib to standard OCL)
--------------------------------------------------------------------
package uml 


-- Library: Sequences

--------------------------------------------------------
-- tests (queries with boolean result)
--------------------------------------------------------
--	Examples to show operations for Sequences.
-- 
context Model

inv tSequence_1: let s : Sequence(Integer) = Sequence{0..9} in s->size() = 10

context Model

inv tSequence_2: let s : Sequence(Integer) = Sequence{0..9} in s->first() < s->last()

context Model

inv tSequence_3: let s : Sequence(Integer) = Sequence{0..9} in s->insertAt(7,-6).abs()->sum() > 0

context Model

inv tSequence_4: let s : Sequence(Integer) = Sequence{0..9} in s->excluding(9)->append(9) = s

context Model

inv tSequence_5: let s : Sequence(Integer) = Sequence{0..9} in s->asSet() = Set{0,9,7,8,6,5,4,2,3,1}

--	Examples to show alternative ways of Sequence declatations.
-- 
context Model

inv tSequenceDefinitions_1: let max : Integer = 1 in Sequence{ -3..3 }     = Sequence{ -3 , -2 , -1 , 0 , 1 , 2 , 3 }

context Model

inv tSequenceDefinitions_2: let max : Integer = 1 in Sequence{ 1..1 }      = Sequence{1}

context Model

inv tSequenceDefinitions_3: let max : Integer = 1 in Sequence{ 1..max }    = Sequence{max}

context Model

inv tSequenceDefinitions_4: let max : Integer = 1 in Sequence{ 9..5 }      = Sequence{}

context Model

inv tSequenceDefinitions_5: let max : Integer = 1 in Sequence{ 3,5..7,2 }  = Sequence{3 , 5 , 6 , 7 , 2}

context Model

inv tSequenceDefinitions_6: let max : Integer = 1 in Sequence{ 3..5,7..9 } = Sequence{3, 4, 5, 7, 8, 9}

context Model

inv tSequenceDefinitions_7: let max : Integer = 1 in Sequence{ 3..(2+5) }  = Sequence{3, 4, 5, 6, 7}

context Model

inv tSequenceTwiceNested: let s : Sequence(Sequence(Sequence(Integer))) 
   			      = Sequence{Sequence{Sequence{1}, Sequence{1,2}, Sequence{1,3,5}}, Sequence{Sequence{1}}} in s->flatten() = Sequence{1,1,2,1,3,5,1}

endpackage