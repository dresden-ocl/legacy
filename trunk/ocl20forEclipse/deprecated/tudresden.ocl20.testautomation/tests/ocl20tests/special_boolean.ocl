-----------------------------
-- This test suite checks boolean operations for invalids and nulls
-- template for the tests is the Manuaul, Table 1.1 (Page 14)
-----------------------------
package uml



------------------------------------
-- Definitions of recurring stuff
------------------------------------

context Model
  -- null boolean
  def: nBool:Boolean=null
  
context Model
  -- invalid boolean
  def: iBool:Boolean=invalid


--------------------------------------
-- The Tests start here
--------------------------------------


--------------------------------------
-- NOT-Operator
--------------------------------------
context Model inv notFalse:
 (not (false)) = true
 
context Model inv notTrue:
  (not (true)) = false
  
context Model inv notNull:
  (not (self.nBool)).oclIsInvalid()
  
context Model inv notInvalid:
  (not (self.iBool)).oclIsInvalid()
  

-------------------------------------- 
-- OR - operator
-- here are both directions checked in one test, 
-- i.e. one test contains `(a or b) and (b or a)` 
-- as the OR-operator is meant to be symmetric anyway
-------------------------------------- 

context Model inv falseOrFalse:
  (false or false) = false
  
context Model inv falseOrTrue:
  (false or true) = true 
  and (true or false) = true
  
context Model inv trueOrTrue:
  (true or true) = true
  
context Model inv falseOrNull:
  (false or self.nBool).oclIsInvalid()
  and (self.nBool or false).oclIsInvalid()
  
context Model inv falseOrInvalid:
  (false or self.iBool).oclIsInvalid()
  and (self.iBool or false).oclIsInvalid()

context Model inv trueOrNull:
  (true or self.nBool)
  and (self.nBool or true)
  
context Model inv trueOrInvalid:
  (true or self.iBool)
  and (self.iBool or true)
  
context Model inv nullOrNull:
  (self.nBool or self.nBool).oclIsInvalid()
  
context Model inv nullOrInvalid:
  (self.nBool or self.iBool).oclIsInvalid()
  and (self.iBool or self.nBool).oclIsInvalid()
    
    
    
-------------------------------------- 
-- XOR - operator
-- here are both directions checked in one test, 
-- i.e. one test contains `(a xor b) and (b xor a)` 
-- as the XOR-operator is meant to be symmetric anyway
-------------------------------------- 

context Model inv falseXorFalse:
  (false xor false) = false
  
context Model inv falseXorTrue:
  (false xor true) = true 
  and (true xor false) = true
  
context Model inv trueXorTrue:
  (true xor true) = false
  
context Model inv falseXorNull:
  (false xor self.nBool).oclIsInvalid()
  and (self.nBool xor false).oclIsInvalid()
  
context Model inv falseXorInvalid:
  (false xor self.iBool).oclIsInvalid()
  and (self.iBool xor false).oclIsInvalid()

context Model inv trueXorNull:
  (true xor self.nBool).oclIsInvalid()
  and (self.nBool xor true).oclIsInvalid()
  
context Model inv trueXorInvalid:
  (true xor self.iBool).oclIsInvalid()
  and (self.iBool xor true).oclIsInvalid()
  
context Model inv nullXorNull:
  (self.nBool xor self.nBool).oclIsInvalid()
  
context Model inv nullXorInvalid:
  (self.nBool xor self.iBool).oclIsInvalid()
  and (self.iBool xor self.nBool).oclIsInvalid()
    
 
--------------------------------------   
-- AND - operator
-- here are both directions checked in one test, 
-- i.e. one test contains `(a and b) and (b and a)` 
-- as the AND-operator is meant to be symmetric anyway
---------------------------------------


context Model inv falseAndFalse:
  (false and false) = false
  
context Model inv falseAndTrue:
  (false and true) = false 
  and (true and false) = false
  
context Model inv trueAndTrue:
  (true and true) = true

context Model inv falseAndNull:
  not (false and self.nBool)
  and not (self.nBool and false)
  
context Model inv falseAndInvalid:
  not (false and self.iBool)
  and not (self.iBool and false)

context Model inv trueAndNull:
  (true and self.nBool).oclIsInvalid()
  and (self.nBool and true).oclIsInvalid()
  
context Model inv trueAndInvalid:
  (true and self.iBool).oclIsInvalid()
  and (self.iBool and true).oclIsInvalid()
  
context Model inv nullAndNull:
  (self.nBool and self.nBool).oclIsInvalid()
  
context Model inv nullAndInvalid:
  (self.nBool and self.iBool).oclIsInvalid()
  and (self.iBool and self.nBool).oclIsInvalid()


-------------------------------------- 
-- IMPLIES - operator
-------------------------------------- 

context Model inv falseImpliesFalse:
  (false implies false) = true
  
context Model inv falseImpliesTrue:
  (false implies true) = true

context Model inv falseImpliesNull:
  (false implies self.nBool) = true

context Model inv falseImpliesInvalid:
  (false implies self.iBool) = true
  
   
 
context Model inv trueImpliesFalse:
  (true implies false) = false
   
context Model inv trueImpliesTrue:
  (true implies true) = true
  
context Model inv trueImpliesNull:
  (true implies self.nBool).oclIsInvalid()

context Model inv trueImpliesInvalid:
  (true implies self.iBool).oclIsInvalid()  


context Model inv nullImpliesFalse:
  (self.nBool implies false).oclIsInvalid()
   
context Model inv nullImpliesTrue:
  (self.nBool implies true) = true
  
context Model inv nullImpliesNull:
  (self.nBool implies self.nBool).oclIsInvalid()

context Model inv nullImpliesInvalid:
  (self.nBool implies self.iBool).oclIsInvalid()  
  
  
context Model inv invalidImpliesFalse:
  (self.iBool implies false).oclIsInvalid()
   
context Model inv invalidImpliesTrue:
  (self.iBool implies true) = true
  
context Model inv invalidImpliesNull:
  (self.iBool implies self.nBool).oclIsInvalid()

context Model inv invalidImpliesInvalid:
  (self.iBool implies self.iBool).oclIsInvalid()


endpackage