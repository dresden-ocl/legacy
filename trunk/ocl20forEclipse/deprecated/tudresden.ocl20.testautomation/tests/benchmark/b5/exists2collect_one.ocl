package uml

-------------------------------------
-- B5: exists2collect_one
-------------------------------------


-- Collection Operations

-- -- Collect

-- -- -- exists to collect and one

-- -- -- -- Empty

-- -- -- -- -- Set ------------------------------------------------

context Model inv: 
	let c:Set(Integer) = Set{} in
   c->exists(i|i<4) = c->collect(i|i<4)->asSet()->one(e|e)

  
-- -- -- -- -- Bag

context Model inv: 
	let c:Bag(Integer) = Bag{} in
   c->exists(i|i<4) = c->collect(i|i<4)->asSet()->one(e|e)

  
-- -- -- -- -- Sequence

context Model inv: 
	let c:Sequence(Integer) = Sequence{} in
   c->exists(i|i<4) = c->collect(i|i<4)->asSet()->one(e|e)

  
-- -- -- -- Singleton

-- -- -- -- -- Includes Undefined

-- -- -- -- -- -- Set ---------------------------------------------

context Model inv: 
	let c:Set(Integer) = Set{ null } in
   c->exists(i|i<4) = c->collect(i|i<4)->asSet()->one(e|e)

  
-- -- -- -- -- -- Bag

context Model inv: 
	let c:Bag(Integer) = Bag{ null } in
   c->exists(i|i<4) = c->collect(i|i<4)->asSet()->one(e|e)

  
-- -- -- -- -- -- Sequence

context Model inv: 
	let c:Sequence(Integer) = Sequence{ null } in
   c->exists(i|i<4) = c->collect(i|i<4)->asSet()->one(e|e)

  
-- -- -- -- -- Excludes Undefined

-- -- -- -- -- -- Expression e fulfilled

-- -- -- -- -- -- -- Set ------------------------------------------

context Model inv: 
	let c:Set(Integer) = Set{1} in
   c->exists(i|i<4) = c->collect(i|i<4)->asSet()->one(e|e)

  
-- -- -- -- -- -- -- Bag

context Model inv: 
	let c:Bag(Integer) = Bag{1} in
   c->exists(i|i<4) = c->collect(i|i<4)->asSet()->one(e|e)

  
-- -- -- -- -- -- -- Sequence

context Model inv: 
	let c:Sequence(Integer) = Sequence{1} in
   c->exists(i|i<4) = c->collect(i|i<4)->asSet()->one(e|e)

  
-- -- -- -- -- -- Expression e not fulfilled

-- -- -- -- -- -- -- Set ---------------------------------------------

context Model inv: 
	let c:Set(Integer) = Set{4} in
   c->exists(i|i<4) = c->collect(i|i<4)->asSet()->one(e|e)

  
-- -- -- -- -- -- -- Bag

context Model inv: 
	let c:Bag(Integer) = Bag{4} in
   c->exists(i|i<4) = c->collect(i|i<4)->asSet()->one(e|e)

  
-- -- -- -- -- -- -- Sequence

context Model inv: 
	let c:Sequence(Integer) = Sequence{4} in
   c->exists(i|i<4) = c->collect(i|i<4)->asSet()->one(e|e)

  
-- -- -- -- Many Elements

-- -- -- -- -- Includes Undefined

-- -- -- -- -- -- Set ---------------------------------------------

context Model inv: 
	let c:Set(Integer) = Set{ null , 2, 3, 4} in
   c->exists(i|i<4) = c->collect(i|i<4)->asSet()->one(e|e)

  
-- -- -- -- -- -- Bag

-- -- -- -- -- -- -- Equal Values

context Model inv: 
	let c:Bag(Integer) = Bag{ null , 2, 3, 4, 
                   null } in
   c->exists(i|i<4) = c->collect(i|i<4)->asSet()->one(e|e)

  
-- -- -- -- -- -- -- No Equal Values

context Model inv: 
	let c:Bag(Integer) = Bag{ null , 2, 3, 4} in
   c->exists(i|i<4) = c->collect(i|i<4)->asSet()->one(e|e)

  
-- -- -- -- -- -- Sequence

-- -- -- -- -- -- -- Equal Values

context Model inv: 
	let c:Sequence(Integer) = Sequence{ null , 2, 3, 4, 
                        null } in
   c->exists(i|i<4) = c->collect(i|i<4)->asSet()->one(e|e)

  
-- -- -- -- -- -- -- No Equal Values

context Model inv: 
	let c:Sequence(Integer) = Sequence{ null , 2, 3, 4} in
   c->exists(i|i<4) = c->collect(i|i<4)->asSet()->one(e|e)

  
-- -- -- -- -- Excludes Undefined

-- -- -- -- -- -- Expression e fulfilled

-- -- -- -- -- -- -- Set ------------------------------------------

context Model inv: 
	let c:Set(Integer) = Set{1, 2, 3, 4} in
   c->exists(i|i<4) = c->collect(i|i<4)->asSet()->one(e|e)

  
-- -- -- -- -- -- -- Bag

-- -- -- -- -- -- -- -- Equal Values

context Model inv: 
	let c:Bag(Integer) = Bag{1, 2, 3, 4, 1} in
   c->exists(i|i<4) = c->collect(i|i<4)->asSet()->one(e|e)

  
-- -- -- -- -- -- -- -- No Equal Values

context Model inv: 
	let c:Bag(Integer) = Bag{1, 2, 3, 4} in
   c->exists(i|i<4) = c->collect(i|i<4)->asSet()->one(e|e)

  
-- -- -- -- -- -- -- Sequence

-- -- -- -- -- -- -- -- Equal Values

context Model inv: 
	let c:Sequence(Integer) = Sequence{1, 2, 3, 4, 1} in
   c->exists(i|i<4) = c->collect(i|i<4)->asSet()->one(e|e)

  
-- -- -- -- -- -- -- -- No Equal Values

context Model inv: 
	let c:Sequence(Integer) = Sequence{1, 2, 3, 4} in
   c->exists(i|i<4) = c->collect(i|i<4)->asSet()->one(e|e)

  
-- -- -- -- -- -- Expression e not fulfilled

-- -- -- -- -- -- -- Set ------------------------------------------

context Model inv: 
	let c:Set(Integer) = Set{4, 5, 6} in
   c->exists(i|i<4) = c->collect(i|i<4)->asSet()->one(e|e)

  
-- -- -- -- -- -- -- Bag

-- -- -- -- -- -- -- -- Equal Values (both violating)

context Model inv: 
	let c:Bag(Integer) = Bag{4, 5, 6, 4} in
   c->exists(i|i<4) = c->collect(i|i<4)->asSet()->one(e|e)

  
-- -- -- -- -- -- -- -- No Equal Values

context Model inv: 
	let c:Bag(Integer) = Bag{4, 5, 6} in
   c->exists(i|i<4) = c->collect(i|i<4)->asSet()->one(e|e)

  
-- -- -- -- -- -- -- Sequence

-- -- -- -- -- -- -- -- Equal Values (both violating)

context Model inv: 
	let c:Sequence(Integer) = Sequence{4, 5, 6, 4} in
   c->exists(i|i<4) = c->collect(i|i<4)->asSet()->one(e|e)

  
-- -- -- -- -- -- -- -- No Equal Values

context Model inv: 
	let c:Sequence(Integer) = Sequence{4, 5, 6} in
   c->exists(i|i<4) = c->collect(i|i<4)->asSet()->one(e|e)

  
  endpackage