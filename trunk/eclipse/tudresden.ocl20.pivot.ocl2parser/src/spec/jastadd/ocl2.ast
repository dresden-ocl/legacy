//
//    Copyright (C) 2007  Nils (s0006383@inf.tu-dresden.de)
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.


OclFileAS ::= PackagedConstraintAS*;
//PackagedConstraintAS ::= Name:PathNameAS Expression:ExpressionInOclAS*;
PackagedConstraintAS ::= Name:PathNameAS Context:ContextAS*;


//ExpressionInOclAS ::= Path1:PathNameAS Path2:PathNameAS* ConstraintAS* [OperationSignatureAS];

abstract ContextAS ::= Name:PathNameAS;
ClassifierContextAS : ContextAS ::= ClassifierConstraintAS*;
OperationContextAS : ContextAS ::= OperationSignatureAS OperationConstraintAS*;
AttrOrAssocContextAS : ContextAS ::= [Type:TypeAS] AttrOrAssocConstraintAS*; 


abstract ConstraintAS ::= [Expression:OclExpressionAS];

abstract AttrOrAssocConstraintAS : ConstraintAS;
InitAttrOrAssocConstraintAS: AttrOrAssocConstraintAS;
DeriveAttrOrAssocConstraintAS : AttrOrAssocConstraintAS;

abstract ClassifierConstraintAS : ConstraintAS ::= [Name:TokenAS];

abstract DefClassifierConstraintAS : ClassifierConstraintAS;

DefAttributeConstraintAS : DefClassifierConstraintAS ::= AttributeName:TokenAS AttributeType:TypeAS ;
DefOperationConstraintAS : DefClassifierConstraintAS ::= MethodName:TokenAS Signature:OperationSignatureAS;
InvClassifierConstraintAS : ClassifierConstraintAS;

OperationConstraintAS : ConstraintAS ::= [Name:TokenAS] OperationStereotype:TokenAS;

OperationSignatureAS ::= VariableAS* [Type:TypeAS];

abstract TypeAS;

PathNameAS : TypeAS ::= TokenAS*;
TupleTypeAS: TypeAS ::= VariableAS*;
CollectionTypeAS : TypeAS ::= Name:TokenAS Type:TypeAS;

abstract OclExpressionAS;

abstract LiteralExpAS : OclExpressionAS;
TupleLiteralExpAS : LiteralExpAS ::= Parts:TupleLiteralPartAS*;
TupleLiteralPartAS ::= Variable:VariableAS Expression:OclExpressionAS;

CollectionLiteralExpAS: LiteralExpAS ::= Name:TokenAS CollectionLiteralPartAS*;
abstract CollectionLiteralPartAS;
CollectionRangeAS : CollectionLiteralPartAS ::= First:OclExpressionAS Last:OclExpressionAS;
CollectionItemAS : CollectionLiteralPartAS ::= Item:OclExpressionAS;

abstract PrimitiveLiteralExpAS: LiteralExpAS;

BooleanLiteralExpAS : PrimitiveLiteralExpAS ::= Value:TokenAS;
StringLiteralExpAS : PrimitiveLiteralExpAS ::= Value:TokenAS;
abstract NumericalLiteralExpAS : PrimitiveLiteralExpAS;
IntegerLiteralExpAS : NumericalLiteralExpAS ::= Value:TokenAS;
RealLiteralExpAS : NumericalLiteralExpAS ::= Value:TokenAS;

LetExpAS : OclExpressionAS ::= Variable:VariableAS* In:OclExpressionAS;
IfExpAS : OclExpressionAS ::= Condition:OclExpressionAS ThenExpression:OclExpressionAS ElseExpression:OclExpressionAS;

abstract CallExpAS : OclExpressionAS ::= [Source:OclExpressionAS];
abstract LoopExpAS : CallExpAS ::= Body:OclExpressionAS;

IterateExpAS : LoopExpAS ::= [Iterator:VariableAS] Result:VariableAS;
IteratorExpAS : LoopExpAS ::= Iterators:VariableAS* Operation:TokenAS;

abstract FeatureCallExpAS : CallExpAS ::= [AtPre:TokenAS];

OperationCallExpAS : FeatureCallExpAS ::= Name:PathNameAS Argument:OclExpressionAS* <ArrowRightExpression:boolean> <DotExpression:boolean>;

PropertyCallExpAS : FeatureCallExpAS ::= PathName:PathNameAS Qualifier:OclExpressionAS*;

VariableExpAS : OclExpressionAS ::= Variable:VariableAS;

VariableAS ::= Name:TokenAS [Type:TypeAS] [Expression:OclExpressionAS];

TokenAS ::= <Value:String> <Column:int> <Line:int>;




 
