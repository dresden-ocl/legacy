/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.sablecc.node;

import java.util.*;

import org.sablecc.sablecc.analysis.*;
import org.sablecc.sablecc.node.AParsedAlt;
import org.sablecc.sablecc.node.Cast;
import org.sablecc.sablecc.node.Node;
import org.sablecc.sablecc.node.PAlt;
import org.sablecc.sablecc.node.PAltName;
import org.sablecc.sablecc.node.PAstType;
import org.sablecc.sablecc.node.PElem;
import org.sablecc.sablecc.node.Switch;
import org.sablecc.sablecc.node.TChain;
import org.sablecc.sablecc.node.TNocreate;
import org.sablecc.sablecc.node.TypedLinkedList;
import org.sablecc.sablecc.node.X1PElem;
import org.sablecc.sablecc.node.X2PElem;
import org.sablecc.sablecc.node.XPElem;



public final class AParsedAlt extends PAlt
{
    private PAltName _altName_;
    private PAstType _astType_;
    private final LinkedList _elems_ = new TypedLinkedList(new Elems_Cast());
    private TChain _chain_;
    private TNocreate _nocreate_;

    public AParsedAlt()
    {
    }

    public AParsedAlt(
        PAltName _altName_,
        PAstType _astType_,
        List _elems_,
        TChain _chain_,
        TNocreate _nocreate_)
    {
        setAltName(_altName_);

        setAstType(_astType_);

        {
            this._elems_.clear();
            this._elems_.addAll(_elems_);
        }

        setChain(_chain_);

        setNocreate(_nocreate_);

    }

    public AParsedAlt(
        PAltName _altName_,
        PAstType _astType_,
        XPElem _elems_,
        TChain _chain_,
        TNocreate _nocreate_)
    {
        setAltName(_altName_);

        setAstType(_astType_);

        if(_elems_ != null)
        {
            while(_elems_ instanceof X1PElem)
            {
                this._elems_.addFirst(((X1PElem) _elems_).getPElem());
                _elems_ = ((X1PElem) _elems_).getXPElem();
            }
            this._elems_.addFirst(((X2PElem) _elems_).getPElem());
        }

        setChain(_chain_);

        setNocreate(_nocreate_);

    }
    public Object clone()
    {
        return new AParsedAlt(
            (PAltName) cloneNode(_altName_),
            (PAstType) cloneNode(_astType_),
            cloneList(_elems_),
            (TChain) cloneNode(_chain_),
            (TNocreate) cloneNode(_nocreate_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAParsedAlt(this);
    }

    public PAltName getAltName()
    {
        return _altName_;
    }

    public void setAltName(PAltName node)
    {
        if(_altName_ != null)
        {
            _altName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _altName_ = node;
    }

    public PAstType getAstType()
    {
        return _astType_;
    }

    public void setAstType(PAstType node)
    {
        if(_astType_ != null)
        {
            _astType_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _astType_ = node;
    }

    public LinkedList getElems()
    {
        return _elems_;
    }

    public void setElems(List list)
    {
        _elems_.clear();
        _elems_.addAll(list);
    }

    public TChain getChain()
    {
        return _chain_;
    }

    public void setChain(TChain node)
    {
        if(_chain_ != null)
        {
            _chain_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _chain_ = node;
    }

    public TNocreate getNocreate()
    {
        return _nocreate_;
    }

    public void setNocreate(TNocreate node)
    {
        if(_nocreate_ != null)
        {
            _nocreate_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _nocreate_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_altName_)
            + toString(_astType_)
            + toString(_elems_)
            + toString(_chain_)
            + toString(_nocreate_);
    }

    void removeChild(Node child)
    {
        if(_altName_ == child)
        {
            _altName_ = null;
            return;
        }

        if(_astType_ == child)
        {
            _astType_ = null;
            return;
        }

        if(_elems_.remove(child))
        {
            return;
        }

        if(_chain_ == child)
        {
            _chain_ = null;
            return;
        }

        if(_nocreate_ == child)
        {
            _nocreate_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_altName_ == oldChild)
        {
            setAltName((PAltName) newChild);
            return;
        }

        if(_astType_ == oldChild)
        {
            setAstType((PAstType) newChild);
            return;
        }

        for(ListIterator i = _elems_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(_chain_ == oldChild)
        {
            setChain((TChain) newChild);
            return;
        }

        if(_nocreate_ == oldChild)
        {
            setNocreate((TNocreate) newChild);
            return;
        }

    }

    private class Elems_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PElem node = (PElem) o;

            if((node.parent() != null) &&
                (node.parent() != AParsedAlt.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AParsedAlt.this))
            {
                node.parent(AParsedAlt.this);
            }

            return node;
        }
    }
}
