/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.sablecc.analysis;

import java.util.*;

import org.sablecc.sablecc.analysis.AnalysisAdapter;
import org.sablecc.sablecc.node.*;



public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.getPGrammar().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAGrammar(AGrammar node)
    {
        defaultIn(node);
    }

    public void outAGrammar(AGrammar node)
    {
        defaultOut(node);
    }

    public void caseAGrammar(AGrammar node)
    {
        inAGrammar(node);
        if(node.getPackage() != null)
        {
            node.getPackage().apply(this);
        }
        if(node.getHelpers() != null)
        {
            node.getHelpers().apply(this);
        }
        if(node.getStates() != null)
        {
            node.getStates().apply(this);
        }
        if(node.getTokens() != null)
        {
            node.getTokens().apply(this);
        }
        if(node.getIgnTokens() != null)
        {
            node.getIgnTokens().apply(this);
        }
        if(node.getProductions() != null)
        {
            node.getProductions().apply(this);
        }
        outAGrammar(node);
    }

    public void inAPackage(APackage node)
    {
        defaultIn(node);
    }

    public void outAPackage(APackage node)
    {
        defaultOut(node);
    }

    public void caseAPackage(APackage node)
    {
        inAPackage(node);
        if(node.getPackage() != null)
        {
            node.getPackage().apply(this);
        }
        if(node.getPkgName() != null)
        {
            node.getPkgName().apply(this);
        }
        outAPackage(node);
    }

    public void inAPkgName(APkgName node)
    {
        defaultIn(node);
    }

    public void outAPkgName(APkgName node)
    {
        defaultOut(node);
    }

    public void caseAPkgName(APkgName node)
    {
        inAPkgName(node);
        if(node.getPkgId() != null)
        {
            node.getPkgId().apply(this);
        }
        {
            Object temp[] = node.getPkgIds().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PPkgNameTail) temp[i]).apply(this);
            }
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAPkgName(node);
    }

    public void inAPkgNameTail(APkgNameTail node)
    {
        defaultIn(node);
    }

    public void outAPkgNameTail(APkgNameTail node)
    {
        defaultOut(node);
    }

    public void caseAPkgNameTail(APkgNameTail node)
    {
        inAPkgNameTail(node);
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getPkgId() != null)
        {
            node.getPkgId().apply(this);
        }
        outAPkgNameTail(node);
    }

    public void inAHelpers(AHelpers node)
    {
        defaultIn(node);
    }

    public void outAHelpers(AHelpers node)
    {
        defaultOut(node);
    }

    public void caseAHelpers(AHelpers node)
    {
        inAHelpers(node);
        if(node.getHelpers() != null)
        {
            node.getHelpers().apply(this);
        }
        {
            Object temp[] = node.getHelperDefs().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PHelperDef) temp[i]).apply(this);
            }
        }
        outAHelpers(node);
    }

    public void inAHelperDef(AHelperDef node)
    {
        defaultIn(node);
    }

    public void outAHelperDef(AHelperDef node)
    {
        defaultOut(node);
    }

    public void caseAHelperDef(AHelperDef node)
    {
        inAHelperDef(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getRegExp() != null)
        {
            node.getRegExp().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAHelperDef(node);
    }

    public void inAStates(AStates node)
    {
        defaultIn(node);
    }

    public void outAStates(AStates node)
    {
        defaultOut(node);
    }

    public void caseAStates(AStates node)
    {
        inAStates(node);
        if(node.getStates() != null)
        {
            node.getStates().apply(this);
        }
        if(node.getIdList() != null)
        {
            node.getIdList().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAStates(node);
    }

    public void inAIdList(AIdList node)
    {
        defaultIn(node);
    }

    public void outAIdList(AIdList node)
    {
        defaultOut(node);
    }

    public void caseAIdList(AIdList node)
    {
        inAIdList(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            Object temp[] = node.getIds().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PIdListTail) temp[i]).apply(this);
            }
        }
        outAIdList(node);
    }

    public void inAIdListTail(AIdListTail node)
    {
        defaultIn(node);
    }

    public void outAIdListTail(AIdListTail node)
    {
        defaultOut(node);
    }

    public void caseAIdListTail(AIdListTail node)
    {
        inAIdListTail(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdListTail(node);
    }

    public void inATokens(ATokens node)
    {
        defaultIn(node);
    }

    public void outATokens(ATokens node)
    {
        defaultOut(node);
    }

    public void caseATokens(ATokens node)
    {
        inATokens(node);
        if(node.getTokens() != null)
        {
            node.getTokens().apply(this);
        }
        {
            Object temp[] = node.getTokenDefs().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PTokenDef) temp[i]).apply(this);
            }
        }
        outATokens(node);
    }

    public void inATokenDef(ATokenDef node)
    {
        defaultIn(node);
    }

    public void outATokenDef(ATokenDef node)
    {
        defaultOut(node);
    }

    public void caseATokenDef(ATokenDef node)
    {
        inATokenDef(node);
        if(node.getStateList() != null)
        {
            node.getStateList().apply(this);
        }
        if(node.getExclam() != null)
        {
            node.getExclam().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getAstType() != null)
        {
            node.getAstType().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getRegExp() != null)
        {
            node.getRegExp().apply(this);
        }
        if(node.getLookAhead() != null)
        {
            node.getLookAhead().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outATokenDef(node);
    }

    public void inAStateList(AStateList node)
    {
        defaultIn(node);
    }

    public void outAStateList(AStateList node)
    {
        defaultOut(node);
    }

    public void caseAStateList(AStateList node)
    {
        inAStateList(node);
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTransition() != null)
        {
            node.getTransition().apply(this);
        }
        {
            Object temp[] = node.getStateLists().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PStateListTail) temp[i]).apply(this);
            }
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outAStateList(node);
    }

    public void inAStateListTail(AStateListTail node)
    {
        defaultIn(node);
    }

    public void outAStateListTail(AStateListTail node)
    {
        defaultOut(node);
    }

    public void caseAStateListTail(AStateListTail node)
    {
        inAStateListTail(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTransition() != null)
        {
            node.getTransition().apply(this);
        }
        outAStateListTail(node);
    }

    public void inATransition(ATransition node)
    {
        defaultIn(node);
    }

    public void outATransition(ATransition node)
    {
        defaultOut(node);
    }

    public void caseATransition(ATransition node)
    {
        inATransition(node);
        if(node.getRArrow() != null)
        {
            node.getRArrow().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outATransition(node);
    }

    public void inAIgnTokens(AIgnTokens node)
    {
        defaultIn(node);
    }

    public void outAIgnTokens(AIgnTokens node)
    {
        defaultOut(node);
    }

    public void caseAIgnTokens(AIgnTokens node)
    {
        inAIgnTokens(node);
        if(node.getIgnored() != null)
        {
            node.getIgnored().apply(this);
        }
        if(node.getTokens() != null)
        {
            node.getTokens().apply(this);
        }
        if(node.getIdList() != null)
        {
            node.getIdList().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAIgnTokens(node);
    }

    public void inALookAhead(ALookAhead node)
    {
        defaultIn(node);
    }

    public void outALookAhead(ALookAhead node)
    {
        defaultOut(node);
    }

    public void caseALookAhead(ALookAhead node)
    {
        inALookAhead(node);
        if(node.getSlash() != null)
        {
            node.getSlash().apply(this);
        }
        if(node.getRegExp() != null)
        {
            node.getRegExp().apply(this);
        }
        outALookAhead(node);
    }

    public void inARegExp(ARegExp node)
    {
        defaultIn(node);
    }

    public void outARegExp(ARegExp node)
    {
        defaultOut(node);
    }

    public void caseARegExp(ARegExp node)
    {
        inARegExp(node);
        if(node.getConcat() != null)
        {
            node.getConcat().apply(this);
        }
        {
            Object temp[] = node.getConcats().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PRegExpTail) temp[i]).apply(this);
            }
        }
        outARegExp(node);
    }

    public void inARegExpTail(ARegExpTail node)
    {
        defaultIn(node);
    }

    public void outARegExpTail(ARegExpTail node)
    {
        defaultOut(node);
    }

    public void caseARegExpTail(ARegExpTail node)
    {
        inARegExpTail(node);
        if(node.getBar() != null)
        {
            node.getBar().apply(this);
        }
        if(node.getConcat() != null)
        {
            node.getConcat().apply(this);
        }
        outARegExpTail(node);
    }

    public void inAConcat(AConcat node)
    {
        defaultIn(node);
    }

    public void outAConcat(AConcat node)
    {
        defaultOut(node);
    }

    public void caseAConcat(AConcat node)
    {
        inAConcat(node);
        {
            Object temp[] = node.getUnExps().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PUnExp) temp[i]).apply(this);
            }
        }
        outAConcat(node);
    }

    public void inAUnExp(AUnExp node)
    {
        defaultIn(node);
    }

    public void outAUnExp(AUnExp node)
    {
        defaultOut(node);
    }

    public void caseAUnExp(AUnExp node)
    {
        inAUnExp(node);
        if(node.getBasic() != null)
        {
            node.getBasic().apply(this);
        }
        if(node.getUnOp() != null)
        {
            node.getUnOp().apply(this);
        }
        outAUnExp(node);
    }

    public void inACharBasic(ACharBasic node)
    {
        defaultIn(node);
    }

    public void outACharBasic(ACharBasic node)
    {
        defaultOut(node);
    }

    public void caseACharBasic(ACharBasic node)
    {
        inACharBasic(node);
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
        outACharBasic(node);
    }

    public void inASetBasic(ASetBasic node)
    {
        defaultIn(node);
    }

    public void outASetBasic(ASetBasic node)
    {
        defaultOut(node);
    }

    public void caseASetBasic(ASetBasic node)
    {
        inASetBasic(node);
        if(node.getSet() != null)
        {
            node.getSet().apply(this);
        }
        outASetBasic(node);
    }

    public void inAStringBasic(AStringBasic node)
    {
        defaultIn(node);
    }

    public void outAStringBasic(AStringBasic node)
    {
        defaultOut(node);
    }

    public void caseAStringBasic(AStringBasic node)
    {
        inAStringBasic(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringBasic(node);
    }

    public void inAIdBasic(AIdBasic node)
    {
        defaultIn(node);
    }

    public void outAIdBasic(AIdBasic node)
    {
        defaultOut(node);
    }

    public void caseAIdBasic(AIdBasic node)
    {
        inAIdBasic(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdBasic(node);
    }

    public void inARegExpBasic(ARegExpBasic node)
    {
        defaultIn(node);
    }

    public void outARegExpBasic(ARegExpBasic node)
    {
        defaultOut(node);
    }

    public void caseARegExpBasic(ARegExpBasic node)
    {
        inARegExpBasic(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getRegExp() != null)
        {
            node.getRegExp().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outARegExpBasic(node);
    }

    public void inACharChar(ACharChar node)
    {
        defaultIn(node);
    }

    public void outACharChar(ACharChar node)
    {
        defaultOut(node);
    }

    public void caseACharChar(ACharChar node)
    {
        inACharChar(node);
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
        outACharChar(node);
    }

    public void inADecChar(ADecChar node)
    {
        defaultIn(node);
    }

    public void outADecChar(ADecChar node)
    {
        defaultOut(node);
    }

    public void caseADecChar(ADecChar node)
    {
        inADecChar(node);
        if(node.getDecChar() != null)
        {
            node.getDecChar().apply(this);
        }
        outADecChar(node);
    }

    public void inAHexChar(AHexChar node)
    {
        defaultIn(node);
    }

    public void outAHexChar(AHexChar node)
    {
        defaultOut(node);
    }

    public void caseAHexChar(AHexChar node)
    {
        inAHexChar(node);
        if(node.getHexChar() != null)
        {
            node.getHexChar().apply(this);
        }
        outAHexChar(node);
    }

    public void inAOperationSet(AOperationSet node)
    {
        defaultIn(node);
    }

    public void outAOperationSet(AOperationSet node)
    {
        defaultOut(node);
    }

    public void caseAOperationSet(AOperationSet node)
    {
        inAOperationSet(node);
        if(node.getLBkt() != null)
        {
            node.getLBkt().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getBinOp() != null)
        {
            node.getBinOp().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getRBkt() != null)
        {
            node.getRBkt().apply(this);
        }
        outAOperationSet(node);
    }

    public void inAIntervalSet(AIntervalSet node)
    {
        defaultIn(node);
    }

    public void outAIntervalSet(AIntervalSet node)
    {
        defaultOut(node);
    }

    public void caseAIntervalSet(AIntervalSet node)
    {
        inAIntervalSet(node);
        if(node.getLBkt() != null)
        {
            node.getLBkt().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getDDot() != null)
        {
            node.getDDot().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getRBkt() != null)
        {
            node.getRBkt().apply(this);
        }
        outAIntervalSet(node);
    }

    public void inAStarUnOp(AStarUnOp node)
    {
        defaultIn(node);
    }

    public void outAStarUnOp(AStarUnOp node)
    {
        defaultOut(node);
    }

    public void caseAStarUnOp(AStarUnOp node)
    {
        inAStarUnOp(node);
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        outAStarUnOp(node);
    }

    public void inAQMarkUnOp(AQMarkUnOp node)
    {
        defaultIn(node);
    }

    public void outAQMarkUnOp(AQMarkUnOp node)
    {
        defaultOut(node);
    }

    public void caseAQMarkUnOp(AQMarkUnOp node)
    {
        inAQMarkUnOp(node);
        if(node.getQMark() != null)
        {
            node.getQMark().apply(this);
        }
        outAQMarkUnOp(node);
    }

    public void inAPlusUnOp(APlusUnOp node)
    {
        defaultIn(node);
    }

    public void outAPlusUnOp(APlusUnOp node)
    {
        defaultOut(node);
    }

    public void caseAPlusUnOp(APlusUnOp node)
    {
        inAPlusUnOp(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusUnOp(node);
    }

    public void inAPlusBinOp(APlusBinOp node)
    {
        defaultIn(node);
    }

    public void outAPlusBinOp(APlusBinOp node)
    {
        defaultOut(node);
    }

    public void caseAPlusBinOp(APlusBinOp node)
    {
        inAPlusBinOp(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusBinOp(node);
    }

    public void inAMinusBinOp(AMinusBinOp node)
    {
        defaultIn(node);
    }

    public void outAMinusBinOp(AMinusBinOp node)
    {
        defaultOut(node);
    }

    public void caseAMinusBinOp(AMinusBinOp node)
    {
        inAMinusBinOp(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusBinOp(node);
    }

    public void inAProductions(AProductions node)
    {
        defaultIn(node);
    }

    public void outAProductions(AProductions node)
    {
        defaultOut(node);
    }

    public void caseAProductions(AProductions node)
    {
        inAProductions(node);
        if(node.getProductions() != null)
        {
            node.getProductions().apply(this);
        }
        {
            Object temp[] = node.getProds().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PProd) temp[i]).apply(this);
            }
        }
        outAProductions(node);
    }

    public void inAProd(AProd node)
    {
        defaultIn(node);
    }

    public void outAProd(AProd node)
    {
        defaultOut(node);
    }

    public void caseAProd(AProd node)
    {
        inAProd(node);
        if(node.getExclam() != null)
        {
            node.getExclam().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getAstType() != null)
        {
            node.getAstType().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getAlts() != null)
        {
            node.getAlts().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAProd(node);
    }

    public void inAAlts(AAlts node)
    {
        defaultIn(node);
    }

    public void outAAlts(AAlts node)
    {
        defaultOut(node);
    }

    public void caseAAlts(AAlts node)
    {
        inAAlts(node);
        if(node.getAlt() != null)
        {
            node.getAlt().apply(this);
        }
        {
            Object temp[] = node.getAlts().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PAltsTail) temp[i]).apply(this);
            }
        }
        outAAlts(node);
    }

    public void inAAltsTail(AAltsTail node)
    {
        defaultIn(node);
    }

    public void outAAltsTail(AAltsTail node)
    {
        defaultOut(node);
    }

    public void caseAAltsTail(AAltsTail node)
    {
        inAAltsTail(node);
        if(node.getBar() != null)
        {
            node.getBar().apply(this);
        }
        if(node.getAlt() != null)
        {
            node.getAlt().apply(this);
        }
        outAAltsTail(node);
    }

    public void inAParsedAlt(AParsedAlt node)
    {
        defaultIn(node);
    }

    public void outAParsedAlt(AParsedAlt node)
    {
        defaultOut(node);
    }

    public void caseAParsedAlt(AParsedAlt node)
    {
        inAParsedAlt(node);
        if(node.getAltName() != null)
        {
            node.getAltName().apply(this);
        }
        if(node.getAstType() != null)
        {
            node.getAstType().apply(this);
        }
        {
            Object temp[] = node.getElems().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PElem) temp[i]).apply(this);
            }
        }
        if(node.getChain() != null)
        {
            node.getChain().apply(this);
        }
        if(node.getNocreate() != null)
        {
            node.getNocreate().apply(this);
        }
        outAParsedAlt(node);
    }

    public void inAIgnoredAlt(AIgnoredAlt node)
    {
        defaultIn(node);
    }

    public void outAIgnoredAlt(AIgnoredAlt node)
    {
        defaultOut(node);
    }

    public void caseAIgnoredAlt(AIgnoredAlt node)
    {
        inAIgnoredAlt(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getAltName() != null)
        {
            node.getAltName().apply(this);
        }
        {
            Object temp[] = node.getElems().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PElem) temp[i]).apply(this);
            }
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAIgnoredAlt(node);
    }

    public void inAAltName(AAltName node)
    {
        defaultIn(node);
    }

    public void outAAltName(AAltName node)
    {
        defaultOut(node);
    }

    public void caseAAltName(AAltName node)
    {
        inAAltName(node);
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outAAltName(node);
    }

    public void inAAstType(AAstType node)
    {
        defaultIn(node);
    }

    public void outAAstType(AAstType node)
    {
        defaultOut(node);
    }

    public void caseAAstType(AAstType node)
    {
        inAAstType(node);
        if(node.getLAbkt() != null)
        {
            node.getLAbkt().apply(this);
        }
        if(node.getExternalName() != null)
        {
            node.getExternalName().apply(this);
        }
        if(node.getRAbkt() != null)
        {
            node.getRAbkt().apply(this);
        }
        outAAstType(node);
    }

    public void inASimpleExternalName(ASimpleExternalName node)
    {
        defaultIn(node);
    }

    public void outASimpleExternalName(ASimpleExternalName node)
    {
        defaultOut(node);
    }

    public void caseASimpleExternalName(ASimpleExternalName node)
    {
        inASimpleExternalName(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outASimpleExternalName(node);
    }

    public void inAExtendedExternalName(AExtendedExternalName node)
    {
        defaultIn(node);
    }

    public void outAExtendedExternalName(AExtendedExternalName node)
    {
        defaultOut(node);
    }

    public void caseAExtendedExternalName(AExtendedExternalName node)
    {
        inAExtendedExternalName(node);
        if(node.getExternalName() != null)
        {
            node.getExternalName().apply(this);
        }
        outAExtendedExternalName(node);
    }

    public void inAGenericExternalName(AGenericExternalName node)
    {
        defaultIn(node);
    }

    public void outAGenericExternalName(AGenericExternalName node)
    {
        defaultOut(node);
    }

    public void caseAGenericExternalName(AGenericExternalName node)
    {
        inAGenericExternalName(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAGenericExternalName(node);
    }

    public void inAElem(AElem node)
    {
        defaultIn(node);
    }

    public void outAElem(AElem node)
    {
        defaultOut(node);
    }

    public void caseAElem(AElem node)
    {
        inAElem(node);
        if(node.getElemName() != null)
        {
            node.getElemName().apply(this);
        }
        if(node.getExclam() != null)
        {
            node.getExclam().apply(this);
        }
        if(node.getSpecifier() != null)
        {
            node.getSpecifier().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getUnOp() != null)
        {
            node.getUnOp().apply(this);
        }
        if(node.getCustomHeritage() != null)
        {
            node.getCustomHeritage().apply(this);
        }
        if(node.getMakeTree() != null)
        {
            node.getMakeTree().apply(this);
        }
        outAElem(node);
    }

    public void inAElemName(AElemName node)
    {
        defaultIn(node);
    }

    public void outAElemName(AElemName node)
    {
        defaultOut(node);
    }

    public void caseAElemName(AElemName node)
    {
        inAElemName(node);
        if(node.getLBkt() != null)
        {
            node.getLBkt().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getRBkt() != null)
        {
            node.getRBkt().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        outAElemName(node);
    }

    public void inATokenSpecifier(ATokenSpecifier node)
    {
        defaultIn(node);
    }

    public void outATokenSpecifier(ATokenSpecifier node)
    {
        defaultOut(node);
    }

    public void caseATokenSpecifier(ATokenSpecifier node)
    {
        inATokenSpecifier(node);
        if(node.getTokenSpecifier() != null)
        {
            node.getTokenSpecifier().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        outATokenSpecifier(node);
    }

    public void inAProductionSpecifier(AProductionSpecifier node)
    {
        defaultIn(node);
    }

    public void outAProductionSpecifier(AProductionSpecifier node)
    {
        defaultOut(node);
    }

    public void caseAProductionSpecifier(AProductionSpecifier node)
    {
        inAProductionSpecifier(node);
        if(node.getProductionSpecifier() != null)
        {
            node.getProductionSpecifier().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        outAProductionSpecifier(node);
    }
}
