/* This file was generated by SableCC (http://www.sablecc.org/). */

package tudresden.ocl20.pivot.ocl2parser.testcasegenerator.gen.testcasegenerator.node;

import java.util.*;
import tudresden.ocl20.pivot.ocl2parser.testcasegenerator.gen.testcasegenerator.analysis.*;

public final class AOclExpression extends POclExpression
{
    private TOclexpression _oclexpression_;
    private TOclblock _oclblock_;

    public AOclExpression()
    {
    }

    public AOclExpression(
        TOclexpression _oclexpression_,
        TOclblock _oclblock_)
    {
        setOclexpression(_oclexpression_);

        setOclblock(_oclblock_);

    }
    public Object clone()
    {
        return new AOclExpression(
            (TOclexpression) cloneNode(_oclexpression_),
            (TOclblock) cloneNode(_oclblock_));
    }

    public void apply(Switch sw) {
        ((Analysis) sw).caseAOclExpression(this);
    }

    public Object apply(SwitchWithReturn sw, Object param) throws AttrEvalException {
        return ((AnalysisWithReturn) sw).caseAOclExpression(this, param);
    }

    public TOclexpression getOclexpression()
    {
        return _oclexpression_;
    }

    public void setOclexpression(TOclexpression node)
    {
        if(_oclexpression_ != null)
        {
            _oclexpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _oclexpression_ = node;
    }

    public TOclblock getOclblock()
    {
        return _oclblock_;
    }

    public void setOclblock(TOclblock node)
    {
        if(_oclblock_ != null)
        {
            _oclblock_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _oclblock_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_oclexpression_)
            + toString(_oclblock_);
    }

    void removeChild(Node child)
    {
        if(_oclexpression_ == child)
        {
            _oclexpression_ = null;
            return;
        }

        if(_oclblock_ == child)
        {
            _oclblock_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_oclexpression_ == oldChild)
        {
            setOclexpression((TOclexpression) newChild);
            return;
        }

        if(_oclblock_ == oldChild)
        {
            setOclblock((TOclblock) newChild);
            return;
        }

    }
}
