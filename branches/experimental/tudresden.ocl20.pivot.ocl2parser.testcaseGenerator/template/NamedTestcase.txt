#testname NamedTestcase

#metamodel tudresden.ocl20.pivot.metamodels.uml
#model './testdata/Person.xmi'

#testcase PersonTest {#
	
	#oclexpression {#
		
		package LoyaltyProgram 
			context Person
				inv: age >= 18
		endpackage
	
	#}
	
	#abstractmodel {#
		model := namespace
		
		namespace := Namespace('LoyaltyProgram', constraintList)
		constraintList := List(constraint)
		constraint := Constraint(null, 'INVARIANT', oclExpression, constrainableList, null)
		constrainableList := List(Type('LoyaltyProgram::Person'))
		oclExpression := ExpressionInOcl(null, greaterEqualOperationExp, selfVariable, null, null)
		
		greaterEqualOperationExp := OperationCallExp(ageProperty, '>=', parameter)
		parameter := List(eigtheenLiteral)
		eigtheenLiteral := IntegerLiteralExp(18)
		
		ageProperty := PropertyCallExp(selfVariableExp, 'age', null)
		selfVariableExp := VariableExp(selfVariable)
		selfVariable := Variable('self', Type('LoyaltyProgram::Person'), null)
	#}
#}

#testcase MethodConstraint {#

	#oclexpression {#
		
		context Person::celebrateBirthday()
	  		post : age = age@pre +1
	   	endpackage
	
	#}
	
	#abstractmodel {#
		model := namespace
		
		namespace := Namespace('LoyaltyProgram', constraintList)
		constraintList := List(constraint)
		constraint := Constraint(null, 'POSTCONDITION', expression, constrainableList, null)
		constrainableList := List(Operation('LoyaltyProgram::Person::celebrateBirthday', null))
		
		expression := ExpressionInOcl(null, equalOperation, selfVariable, null, null)
		equalOperation := OperationCallExp(ageFirstProperty, '=', firstParameter)
		firstParameter := List(plusOperation)
		ageFirstProperty := PropertyCallExp(selfFirstVariableExp, 'age', null)
		selfFirstVariableExp := VariableExp(selfVariable)
		
		plusOperation := OperationCallExp(ageProperty, '+', parameter)
		parameter := List(oneLiteral)
		oneLiteral := IntegerLiteralExp(1)
		
		ageProperty := PropertyCallExp(selfVariableExp, ageFirstProperty, null)
		// Here we need the @pre flag
		selfVariableExp := VariableExp(selfVariable)
		selfVariable := Variable('self', Type('LoyaltyProgram::Person'), null)
	#}
#}

#testcase DefinitionConstraint {#
	
	#oclexpression {#
		
		package LoyaltyProgram
	 	 	context Person
	 			def: initial : String = name.substring(1,1)
	 	endpackage
	 
	 #}
	 
	 #abstractmodel {#
	 	model := namespace
	 	namespace := Namespace('LoyaltyProgram', constraintList)
	 	constraintList := List(constraint)
	 		 	
	 	constraint := Constraint(null, 'DEFINITION', expression, constrainableList, definedFeature)
	 	definedFeature := new Property('LoyaltyProgram::Person::initial', Type('String'))
	 	constrainableList := List(Type('LoyaltyProgram::Person'))
	 	
	 	expression := ExpressionInOcl(null, substringOperation, selfVariable, null, null)
	 	
	 	substringOperation := OperationCallExp(nameProperty, 'substring', parameter)
	 	parameter := List(firstOneLiteral, secondOneLiteral)
	 	firstOneLiteral := IntegerLiteralExp(1)
	 	secondOneLiteral := IntegerLiteralExp(1)
	 	
	 	nameProperty := PropertyCallExp(selfVariableExp, 'name', null)
	 	selfVariableExp := VariableExp(selfVariable)
	 	selfVariable := Variable('self', Type('LoyaltyProgram::Person'), null)
	 #}
#}

#testcase DefinitionConstraint2 {#
	
	#oclexpression {#
		
		package LoyaltyProgram
	 		context Person
	 			def: getNumberChildren() : Integer = 2
	 	endpackage
	 	
	 #}
	 
	 #abstractmodel {#
	 
	 	model := namespace
	 	namespace := Namespace('LoyaltyProgram', constraintList)
	 	
	 	constraintList := List(constraint)
	 	constraint := Constraint(null, 'DEFINITION', expression, constrainableList, newOperation)
	 	constrainableList := List(Type('LoyaltyProgram::Person'))
	 	
	 	expression := ExpressionInOcl(null, twoLiteralExp, selfVariable, null, null)
	 	
	 	newOperation := new Operation('LoyaltyProgram::Person::getNumberChildren', parameter)
	 	parameter := List(returnParameter)
	 	returnParameter := Parameter('', 'RETURN', Type('Integer'))
	 	
	 	twoLiteralExp := IntegerLiteralExp(2)
	 	
	 	selfVariableExp := VariableExp(selfVariable)
	 	selfVariable := Variable('self', Type('LoyaltyProgram::Person'), null)
	 #}
#}

#testcase ImplicitCollection {#
	
	#oclexpression {#
		
		package LoyaltyProgram
	 		context Person
	 			inv: age->size() = 1
	 	endpackage
	 	
	 #}
	 
	 #abstractmodel {#
	 	model := namespace
	 	
	 	namespace := Namespace('LoyaltyProgram', constraintList)
	 	constraintList := List(constraint)
	 	
	 	constraint := Constraint(null, 'INVARIANT', expression, constrainableList, null)
	 	constrainableList := List(Type('LoyaltyProgram::Person'))
	 	
	 	expression := ExpressionInOcl(null, equalOperation, selfVariable, null, null)
	 	
	 	equalOperation := OperationCallExp(sizeOperationCallExp, '=', parameter)
	 	parameter := List(oneLiteral)
	 	oneLiteral := IntegerLiteralExp(1)
	 	
	 	sizeOperationCallExp := OperationCallExp(withAsSetOperation, 'size', null)
	 	
	 	withAsSetOperation := asSet(ageProperty)
	 	
	 	ageProperty := PropertyCallExp(selfVariableExp, 'age', null)
	 	
	 	selfVariableExp := VariableExp(selfVariable)
	 	selfVariable := Variable('self', Type('LoyaltyProgram::Person'), null)
	#}
#}

#testcase Iterator {#

	#oclexpression {#
	
		package LoyaltyProgram
	 		context Person
	 			inv: cars -> forAll(car| car.color='red')
	 	endpackage
	 	
	 #}
	 
	 #abstractmodel {#
	 
	 	model := namespace
	 	
	 	namespace := Namespace('LoyaltyProgram', constraintList)
	 	constraintList := List(constraint)
	 	
	 	constraint := Constraint(null, 'INVARIANT', expression, constrainableList, null)
	 	constrainableList := List(Type('LoyaltyProgram::Person'))
	 	expression := ExpressionInOcl(null, iteratorExp, selfVariable, null, null)
	 	
	 	iteratorExp := IteratorExp(carsProperty, 'forAll', equalOperation, iteratorList)
	 	iteratorList := List(carIteratorVariable)
	 	
	 	equalOperation := OperationCallExp(colorProperty, '=', parameter)
	 	parameter := List(redLiteral)
	 	redLiteral := StringLiteralExp('red')
	 	colorProperty := PropertyCallExp(carVariableExp, 'color', null)
	 	
	 	carVariableExp := VariableExp(carIteratorVariable)
	 	carIteratorVariable := Variable('car', Type('LoyaltyProgram::Car'), null)
	 	
	 	carsProperty := PropertyCallExp(selfVariableExp, 'cars', null)
	 	selfVariableExp := VariableExp(selfVariable)
	 	selfVariable := Variable('self', Type('LoyaltyProgram::Person'), null)
	#}
#}