-- @model{../src/tudresden/ocl20/pivot/examples/living/ModelProviderClass.java}
package tudresden::ocl20::pivot::examples::living

-- If the zip of an Accomodation is empty, the result should be equal to 00000.
context Accomodation::getZip(): String
post emptyZip: 
  if self.zip = '' 
  then 
    result = '00000' 
  else 
    result = self.zip 
  endif


-- The name of a Person should not be empty.
context Person
inv nameNotEmpty: 
  self.name <> ''


-- A Person should have at least one Accomodation.
context Person
inv notHomeless: 
  self.accomodations->size() > 0


-- A Person should have exactly one Accomodation of the category 'permanent
-- residence'.
context Person
inv registeredResidence: 
  self.accomodations->select(x: Accomodation | x.category = 1)->size() = 1


-- If an examination is passes its mark should be 4.0 or better. 
context Examination
inv exPassed: 
  let examPassed: Boolean = 
    self.passed
  in 
    examPassed = true implies self.mark <= 4.0


-- If a Student writes an Examination he/she should visit the Examaniation's
-- Course and afterwards, the Examanitation should be passed.
context Student::writeExamination(ex: Examination):Boolean
pre courseIsVisited: 
  self.visitedCourses->includes(ex.course)
post passed: 
  result = ex.passed


-- If a Student visits a Course afterwards, he/she should have visited the
-- Course.
context Student::visitCourse(course: Course)
post courseVisited:
  self.visitedCourses->includes(course)
post addedCourse: 
  self.visitedCourses->size() = (self.visitedCourses@pre->size() + 1)


-- The result of a calculated offet should be the sum divided by the
-- average years.
context Insurance::calculateOffer(insuranceSum:Real): Real
post static: 
  result = insuranceSum / self.averageYears


-- The result of the method should be true if the given category has already
-- been set.
context Accomodation::setCategory(category: Integer): Boolean
post returnValue: 
  result = (category = self.category@pre)


-- Two Accomodations of a Person should be not equal if their streets are
-- not equal.
context Person
inv multIt: 
  self.accomodations->forAll(c1, c2 | (not c1.equals(c2)) 
    implies c1.street <> c2.street)


-- Two Accomodations of a Person should be not equal if their streets are
-- not equal.
context Person
inv nestedIt: 
  self.accomodations->forAll(c1 | self.accomodations
    ->forAll(c2 | (not c1.equals(c2)) implies c1.street <> c2.street))


endpackage