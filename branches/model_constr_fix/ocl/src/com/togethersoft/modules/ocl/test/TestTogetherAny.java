/* Generated by Together */

package com.togethersoft.modules.ocl.test;
import com.togethersoft.openapi.ide.IdeContext;
import com.togethersoft.openapi.rwi.RwiElement;
import com.togethersoft.openapi.rwi.RwiNode;
import com.togethersoft.openapi.util.RwiElementsUtil;
import com.togethersoft.modules.ocl.TogetherFacade;
import com.togethersoft.openapi.rwi.RwiProperty;
import com.togethersoft.modules.ocl.TogetherAny;
import tudresden.ocl.check.types.Any;
import tudresden.ocl.check.types.Type;
import tudresden.ocl.check.types.Basic;
import com.togethersoft.openapi.rwi.enum.RwiMemberEnumeration;
import com.togethersoft.openapi.rwi.enum.RwiLinkEnumeration;
import com.togethersoft.openapi.rwi.RwiLink;
import com.togethersoft.openapi.rwi.RwiShapeType;
import com.togethersoft.openapi.rwi.RwiPackage;
import com.togethersoft.openapi.rwi.enum.RwiElementEnumeration;
import com.togethersoft.openapi.rwi.RwiMember;
import com.togethersoft.openapi.rwi.RwiModel;
import com.togethersoft.openapi.rwi.RwiModelAccess;

public class TestTogetherAny extends MyTest {

    RwiElement context;
	Any selectedClassAny;
  	Any superclassOfSelectedClassAny = null;
    Any classInSamePackageAny = null;
    Any dateAny = null;


    public void run(IdeContext ideContext) {

        RwiElement[] rwiElementArray = RwiElementsUtil.getRwiElements(ideContext);
        if (rwiElementArray.length == 0  || rwiElementArray.length > 1) {
            printResult("You must select either SelectedClass or operationInSelectedClass.");
            printSummary();
            return;
        } else {
            // the test only accepts one selected element, no profound checking necessary
			context = rwiElementArray[0];

			// preparations
			selectedClassAny = new TogetherAny(context);
    	    RwiPackage rwiPackage = ((RwiNode)context).getContainingPackage();
        	RwiElementEnumeration ree = rwiPackage.elements();
	        while (ree.hasMoreElements()) {
    	        RwiElement someElement = ree.nextRwiElement();
        	    if (someElement.getProperty(RwiProperty.NAME).equals("SuperclassOfSelectedClass"))
            	    superclassOfSelectedClassAny = new TogetherAny(someElement);
	            if (someElement.getProperty(RwiProperty.NAME).equals("ClassInSamePackage"))
    	            classInSamePackageAny = new TogetherAny(someElement);
                if (someElement.getProperty(RwiProperty.NAME).equals("SelectedClass")) {
					RwiMemberEnumeration rme = ((RwiNode)someElement).members();
                    while (rme.hasMoreElements()) {
                        RwiMember rwiMember = rme.nextRwiMember();
                        if (rwiMember.getProperty(RwiProperty.NAME).equals("someDate")) {
                            RwiModel myModel = RwiModelAccess.getModel();
                            RwiNode dateNode = (RwiNode)myModel.findElement(rwiMember.getProperty(RwiProperty.TYPE_REFERENCED_ELEMENT));
                            dateAny = new TogetherAny(dateNode);
                        }
                    }
                }
	        }
        }

		if (context.getProperty(RwiProperty.NAME).equals("SelectedClass")) {
	        testNavigateQualified();
            printSummary();
            clearBuffer();
            testNavigateParameterized();
            testConformsTo();
        } else if (context.getProperty(RwiProperty.NAME).equals("selectedOperation")) {
	        testNavigateQualified();
        } else {
            printResult("You must select either SelectedClass or selectedOperation.");
        }
        printSummary();
    }


    public void testNavigateQualified() {
        printResult("--> test navigateQualified()");
		Any selectedClassAny = new TogetherAny(context);

		// navigate to member variable integerAttribute : int
        printResult("selectedClass.navigateQualified(\"isMarried\", null);  -  member of selected class");
        try {
            Type newType = selectedClassAny.navigateQualified("integerAttribute", null);
            printResult("     1 integerAttribute", newType.toString());
            if (!newType.toString().equals("Integer")) printResult("---------- FAILURE ---------");
        } catch (Exception e) {
            printResult("     1 integerAttribute", e.toString());
            printResult("---------- FAILURE ---------");
        }

		// navigate to member variable stringAttribute : String
        printResult("selectedClass.navigateQualified(\"stringAttribute\", null);  -  member of selected class");
        try {
            Type newType = selectedClassAny.navigateQualified("stringAttribute", null);
            printResult("     2 stringAttribute", newType.toString());
            if (!newType.toString().equals("String")) printResult("---------- FAILURE ---------");
        } catch (Exception e) {
            printResult("     2 stringAttribute", e.toString());
            printResult("---------- FAILURE ---------");
        }

		// navigate to member variable booleanAttribute : boolean
        printResult("selectedClass.navigateQualified(\"booleanAttribute\", null);  -  member of selected class");
        try {
            Type newType = selectedClassAny.navigateQualified("booleanAttribute", null);
            printResult("     3 booleanAttribute", newType.toString());
            if (!newType.toString().equals("Boolean")) printResult("---------- FAILURE ---------");
        } catch (Exception e) {
            printResult("     3 booleanAttribute", e.toString());
            printResult("---------- FAILURE ---------");
        }

		// navigate to member variable doubleAttribute : double
        printResult("selectedClass.navigateQualified(\"doubleAttribute\", null);  -  inherited member of selected class");
        try {
            Type newType = selectedClassAny.navigateQualified("doubleAttribute", null);
            printResult("     4 doubleAttribute", newType.toString());
            if (!newType.toString().equals("Real")) printResult("---------- FAILURE ---------");
        } catch (Exception e) {
            printResult("     4 doubleAttribute", e.toString());
            printResult("---------- FAILURE ---------");
        }

		// navigate to member variable attributeFromInterface : boolean
        printResult("selectedClass.navigateQualified(\"attributeFromInterface\", null);  -  inherited member of selected class (through interface)");
        try {
            Type newType = selectedClassAny.navigateQualified("attributeFromInterface", null);
            printResult("     5 attributeFromInterface", newType.toString());
            if (!newType.toString().equals("Boolean")) printResult("---------- FAILURE ---------");
        } catch (Exception e) {
            printResult("     5 attributeFromInterface", e.toString());
            printResult("---------- FAILURE ---------");
        }

		// navigate to lnkNamedUndirectedAssociation : NamedUndirectedAssociation
        printResult("selectedClass.navigateQualified(\"firstRolename\", null);  -  should navigate to class NamedUndirectedAssociation");
        try {
            Type newType = selectedClassAny.navigateQualified("firstRolename", null);
            printResult("     6 firstRolename", newType.toString());
            if (!newType.toString().equals("NamedUndirectedAssociation")) printResult("---------- FAILURE ---------");
        } catch (Exception e) {
            printResult("     6 firstRolename", e.toString());
            printResult("---------- FAILURE ---------");
        }

		// navigate to lnkUnnamedUndirectedAssociation : UnnamedUndirectedAssociation
        printResult("selectedClass.navigateQualified(\"unnamedUndirectedAssociation\", null);  -  should navigate to class UnnamedUndirectedAssociation");
        try {
            Type newType = selectedClassAny.navigateQualified("unnamedUndirectedAssociation", null);
            printResult("     7 unnamedUndirectedAssociation", newType.toString());
            if (!newType.toString().equals("UnnamedUndirectedAssociation")) printResult("---------- FAILURE ---------");
        } catch (Exception e) {
            printResult("     7 unnamedUndirectedAssociation", e.toString());
            printResult("---------- FAILURE ---------");
        }

		// navigate to lnkrevNamedBidirectionalAssociation : NamedBidirectionalAssociation
        printResult("selectedClass.navigateQualified(\"secondRolename\", null);  -  should navigate to class NamedBidirectionalAssociation");
        try {
            Type newType = selectedClassAny.navigateQualified("secondRolename", null);
            printResult("     8 secondRolename", newType.toString());
            if (!newType.toString().equals("NamedBidirectionalAssociation")) printResult("---------- FAILURE ---------");
        } catch (Exception e) {
            printResult("     8 secondRolename", e.toString());
            printResult("---------- FAILURE ---------");
        }

		// navigate to lnkrevUnnamedBidirectionalAssociation . UnnamedBidirectionalAssociation
        printResult("selectedClass.navigateQualified(\"unnamedBidirectionalAssociation\", null);  -  should navigate to class UnnamedBidirectionalAssociation");
        try {
            Type newType = selectedClassAny.navigateQualified("unnamedBidirectionalAssociation", null);
            printResult("     9 unnamedBidirectionalAssociation", newType.toString());
            if (!newType.toString().equals("UnnamedBidirectionalAssociation")) printResult("---------- FAILURE ---------");
        } catch (Exception e) {
            printResult("     9 unnamedBidirectionalAssociation", e.toString());
            printResult("---------- FAILURE ---------");
        }

		// navigate to someAccidentalName : int
/*        printResult("selectedClass.navigateQualified(\"someAccidentalName\", null);  -  should navigate to someAccidentalName : INTEGER\n"+
            "Wrong result due to ambiguity, see OCL Spec. 6.5.4.1");
        try {
            Type newType = selectedClassAny.navigateQualified("someAccidentalName", null);
            printResult("    10 someAccidentalName", newType.toString());
            if (!newType.toString().equals("SomeAccidentalName")) printResult("---------- FAILURE ---------");
        } catch (Exception e) {
            printResult("    10 someAccidentalName", e.toString());
            printResult("---------- FAILURE ---------");
        }
*/ 		// suspended, not supported by implementation

		// navigate to lnkCollectionCreatedByPattern : ArrayList (Type: CollectionCreatedByPattern)
        printResult("selectedClass.navigateQualified(\"collectionCreatedByPattern\", null);  -  should return a collection");
        try {
            Type newType = selectedClassAny.navigateQualified("collectionCreatedByPattern", null);
            printResult("    11 collectionCreatedByPattern", newType.toString());
            if (!newType.toString().equals("Collection(CollectionCreatedByPattern)")) printResult("---------- FAILURE ---------");
        } catch (Exception e) {
            printResult("    11 collectionCreatedByPattern", e.toString());
            printResult("---------- FAILURE ---------");
        }

		// navigate to lnkAggregationAsSimpleArray : AggregationAsSimpleArray[]
        printResult("selectedClass.navigateQualified(\"aggregationAsSimpleArray\", null);  -  should return a collection");
        try {
            Type newType = selectedClassAny.navigateQualified("aggregationAsSimpleArray", null);
            printResult("    12 aggregationAsSimpleArray", newType.toString());
            if (!newType.toString().equals("Collection(AggregationAsSimpleArray)")) printResult("---------- FAILURE ---------");
        } catch (Exception e) {
            printResult("    12 aggregationAsSimpleArray", e.toString());
            printResult("---------- FAILURE ---------");
        }

		// navigate to bidirectionalAssociationToCollection : BidirectionalAssociationToCollection
        printResult("selectedClass.navigateQualified(\"thirdRolename\", null);  -  should return a collection");
        try {
            Type newType = selectedClassAny.navigateQualified("thirdRolename", null);
            printResult("    13 thirdRolename", newType.toString());
            if (!newType.toString().equals("Collection(BidirectionalAssociationToCollection)")) printResult("---------- FAILURE ---------");
        } catch (Exception e) {
            printResult("    13 thirdRolename", e.toString());
            printResult("---------- FAILURE ---------");
        }

		// navigate to predefined property oclIsNew : Boolean
        printResult("selectedClass.navigateQualified(\"oclIsNew\", null);  -  should return Boolean");
        try {
            Type newType = selectedClassAny.navigateQualified("oclIsNew", null);
            printResult("    14 oclIsNew", newType.toString());
            if (!newType.toString().equals("Boolean")) printResult("---------- FAILURE ---------");
        } catch (Exception e) {
            printResult("    14 oclIsNew", e.toString());
            printResult("---------- FAILURE ---------");
        }
    }


   	public void testNavigateParameterized() {
        printResult("\n--> test navigateParameterized()");
		Any selectedClassAny = new TogetherAny(context);
        TogetherFacade tf = new TogetherFacade(context);

		// navigate to member variable selectedOperation() : int
        printResult("selectedClassAny.navigateParameterized(\"selectedOperation\", new Type[]{});  -  operation returns int");
        try {
            Type newType = selectedClassAny.navigateParameterized("selectedOperation", new Type[]{});
            printResult("    1 selectedOperation()", newType.toString());
            if (!newType.toString().equals("Integer")) printResult("---------- FAILURE ---------");
        } catch (Exception e) {
            printResult("    1 selectedOperation()", e.toString());
            printResult("---------- FAILURE ---------");
        }

		// navigate to member variable selectedOperation(int, String) : int
        printResult("selectedClassAny.navigateParameterized(\"testOperation\", {int, String});  -  operation returns boolean");
        try {
            Type newType = selectedClassAny.navigateParameterized("testOperation", new Type[]{Basic.INTEGER, Basic.STRING});
            printResult("    2 testOperation(int, String)", newType.toString());
            if (!newType.toString().equals("Boolean")) printResult("---------- FAILURE ---------");
        } catch (Exception e) {
            printResult("    2 testOperation(int, String)", e.toString());
            printResult("---------- FAILURE ---------");
        }

		// navigate to predefined property oclIsTypeOf(SelectedClass) : boolean
        printResult("selectedClassAny.navigateParameterized(\"oclIsTypeOf\", {Type});  -  operation returns boolean");
        try {
            Type newType = selectedClassAny.navigateParameterized("oclIsTypeOf", new Type[]{new TogetherAny(context)});
            printResult("    3 oclIsTypeOf(Type)", newType.toString());
            if (!newType.toString().equals("Boolean")) printResult("---------- FAILURE ---------");
        } catch (Exception e) {
            printResult("    3 oclIsTypeOf(Type)", e.toString());
            printResult("---------- FAILURE ---------");
        }

		// navigate to predefined property oclIsKindOf(SelectedClass) : boolean
        printResult("selectedClassAny.navigateParameterized(\"oclIsKindOf\", {Type});  -  operation returns boolean");
        try {
            Type newType = selectedClassAny.navigateParameterized("oclIsKindOf", new Type[]{selectedClassAny});
            printResult("    4 oclIsKindOf(Type)", newType.toString());
            if (!newType.toString().equals("Boolean")) printResult("---------- FAILURE ---------");
        } catch (Exception e) {
            printResult("    4 oclIsKindOf(Type)", e.toString());
            printResult("---------- FAILURE ---------");
        }

		// navigate to predefined property oclAsType(SuperclassOfSelectedClass) : SuperclassOfSelectedClass
        printResult("selectedClassAny.navigateParameterized(\"oclAsType\", {Type});  -  operation returns boolean");
        try {
            Type newType = selectedClassAny.navigateParameterized("oclAsType", new Type[]{superclassOfSelectedClassAny});
            printResult("    5 oclAsType(SuperclassOfSelectedClass)", newType.toString());
            if (!newType.toString().equals("SuperclassOfSelectedClass")) printResult("---------- FAILURE ---------");
        } catch (Exception e) {
            printResult("    5 oclAsType(SuperclassOfSelectedClass)", e.toString());
            printResult("---------- FAILURE ---------");
        }

		// navigate to operationReturnsArray : ClassInSamePackage[]
        printResult("selectedClassAny.navigateParameterized(\"operationReturnsArray\", {});  -  operation returns Array of ClassInSamePackage -> should be a collection");
        try {
            Type newType = selectedClassAny.navigateParameterized("operationReturnsArray", new Type[]{});
            printResult("    6 operationReturnsArray()", newType.toString());
            if (!newType.toString().equals("Collection(ClassInSamePackage)")) printResult("---------- FAILURE ---------");
        } catch (Exception e) {
            printResult("    6 operationReturnsArray()", e.toString());
            printResult("---------- FAILURE ---------");
        }

		// navigate to testOperation2 : ClassInSamePackage
        printResult("selectedClassAny.navigateParameterized(\"testOperation2\", {});  -  operation takes a class of the model as parameter");
        try {
            Type newType = selectedClassAny.navigateParameterized("testOperation2", new Type[]{classInSamePackageAny});
            printResult("    7 testOperation2(ClassInSamePackage)", newType.toString());
            if (!newType.toString().equals("SelectedClass")) printResult("---------- FAILURE ---------");
        } catch (Exception e) {
            printResult("    7 testOperation2(ClassInSamePackage)", e.toString());
            printResult("---------- FAILURE ---------");
        }

		// navigate to testOperation3(Date date) : void
        printResult("selectedClassAny.navigateParameterized(\"testOperation3\", {});  -  operation returns void and takes parameter Date - type from outside the model");
        try {
            Type newType = selectedClassAny.navigateParameterized("testOperation3", new Type[]{dateAny});
            printResult("    8 testOperation3(Date)", newType.toString());
            if (!newType.toString().equals("void")) printResult("---------- FAILURE ---------");
        } catch (Exception e) {
            printResult("    8 testOperation3(Date)", e.toString());
            printResult("---------- FAILURE ---------");
        }
    }

    public void testConformsTo() {
        printResult("\n--> test conformsTo()");

		// conforms to itself
        printResult("selectedClassAny.conformsTo(SelectedClass);  -  compare to itself");
        try {
            boolean result = selectedClassAny.conformsTo(selectedClassAny);
            printResult("     1 true", "" + result);
            if (!result == true) printResult("---------- FAILURE ---------");
        } catch (Exception e) {
            printResult("     1 true", e.toString());
            printResult("---------- FAILURE ---------");
        }

		// conforms to a superclass
        printResult("selectedClassAny.conformsTo(SuperclassOfSelectedClass);  -  compare to superclass");
        try {
            boolean result = selectedClassAny.conformsTo(superclassOfSelectedClassAny);
            printResult("     2 true", "" + result);
            if (!result == true) printResult("---------- FAILURE ---------");
        } catch (Exception e) {
            printResult("     2 true", e.toString());
            printResult("---------- FAILURE ---------");
        }

		// does not conform to some other class
        printResult("selectedClassAny.conformsTo(ClassInSamePackage);  -  compare to some other class");
        try {
            boolean result = selectedClassAny.conformsTo(classInSamePackageAny);
            printResult("     3 false", "" + result);
            if (!result == false) printResult("---------- FAILURE ---------");
        } catch (Exception e) {
            printResult("     3 false", e.toString());
            printResult("---------- FAILURE ---------");
        }
    }

}
