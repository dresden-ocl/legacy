/* Generated by Together */

package com.togethersoft.modules.ocl;

import com.togethersoft.openapi.ide.IdeStartup;
import com.togethersoft.openapi.ide.command.IdeCommandGroup;
import com.togethersoft.openapi.ide.command.IdeCommandItem;
import com.togethersoft.openapi.ide.command.IdeCommandManager;
import com.togethersoft.openapi.ide.command.IdeCommandManagerAccess;
import com.togethersoft.openapi.ide.command.IdeCommandConstraints;
import com.togethersoft.openapi.ide.command.IdeCommandAdapter;
import com.togethersoft.openapi.ide.command.IdeCommandEvent;
import com.togethersoft.openapi.ide.message.IdeMessageType;
import com.togethersoft.openapi.ide.message.IdeMessageManagerAccess;
import com.togethersoft.openapi.ide.inspector.IdeInspectorManager;
import com.togethersoft.openapi.ide.inspector.IdeInspectorManagerAccess;
import com.togethersoft.openapi.ide.inspector.IdeInspector;
import com.togethersoft.openapi.ide.inspector.IdeInspectorBuilder;
import com.togethersoft.openapi.ide.IdeContext;
import com.togethersoft.openapi.util.RwiElementsUtil;
import com.togethersoft.openapi.rwi.RwiProperty;
import com.togethersoft.openapi.rwi.RwiShapeType;
import com.togethersoft.openapi.rwi.RwiElement;
import com.togethersoft.openapi.ide.inspector.IdeInspectorComponent;
import com.togethersoft.openapi.ide.inspector.IdeInspectorPropertySetComponent;
import com.togethersoft.openapi.ide.inspector.IdeInspectorProperty;
import com.togethersoft.openapi.ide.inspector.util.property.RwiInspectorBooleanProperty;
import com.togethersoft.openapi.ide.inspector.Condition;
import com.togethersoft.openapi.ide.IdeActivatable;

/**
 * Creates the Injector UI.
 * 
 * Creates and integrates menu elements in the main menu and popup menu ("Tools->Instrumentation" in the main menu and "Instrumentation" in the popup menu). Also adds a property "for instrumentation" to the "Properties" inspector tab.
 * 
 * Is also the main class for the "OCL Injector" module.
 * @author Christian Nill
 */
public class OCLInjectorBuilder implements IdeActivatable, IdeInspectorBuilder {
    /**
     * contains the Javadoc tag that is being used to mark a class for instrumentation. 
     */
    public final static String SELECTED_FOR_INSTRUMENTATION = "selectedForInstrumentation";

    protected IdeCommandGroup menuGroupInstrumentation;
    protected IdeCommandItem menuItemInstrumentationMarker;
    protected IdeCommandItem menuItemInstrumentClass;
    protected IdeCommandItem menuItemCleanClass;
    protected IdeCommandItem menuItemInstrumentMarkedClasses;
    protected IdeCommandItem menuItemCleanAllClasses;


    protected IdeCommandGroup popupMenuGroupInstrumentation;
    protected IdeCommandItem popupMenuItemInstrumentationMarker;
    protected IdeCommandItem popupMenuItemInstrumentClass;
    protected IdeCommandItem popupMenuItemCleanClass;

    /**
     * Reacts on all events invoked by the menu elements created. 
     */
    private OCLInjectorCommandListener commandListener;

	// DEBUG
    // DebugHelper dh = new DebugHelper();

    /** @link dependency 
     * @stereotype call*/
    /*# OCLInjectorRunner lnkOCLInjectorRunner; */

    /**
     * Invoked by Together on startup or activation. 
     */
	public void autorun() {
        initialiseMenus();
        //get the inspector manager
        IdeInspectorManager manager = IdeInspectorManagerAccess.getInspectorManager();
        manager.addInspectorBuilder(this);
    }

    /**
     * Invoked by Together on deactivation (<i>not</i> on normal shutdown) 
     */
    public void shutdown() {
        //get the inspector manager
        IdeInspectorManager manager = IdeInspectorManagerAccess.getInspectorManager();
        manager.removeInspectorBuilder(this);
        deactivateMenus();
    }

    /**
     * Called by {@link #shutdown() shutdown()}; makes all menu elements created invisible. 
     */
    private void deactivateMenus() {
	    menuGroupInstrumentation.setVisible(false);
	    menuItemInstrumentationMarker.setVisible(false);
	    menuItemInstrumentClass.setVisible(false);
	    menuItemCleanClass.setVisible(false);
    	menuItemInstrumentMarkedClasses.setVisible(false);
    	menuItemCleanAllClasses.setVisible(false);

	    popupMenuGroupInstrumentation.setVisible(false);
    	popupMenuItemInstrumentationMarker.setVisible(false);
	    popupMenuItemInstrumentClass.setVisible(false);
	    popupMenuItemCleanClass.setVisible(false);
    }

    /**
     * Called by {@link #autorun() autorun()}; creates and initialises all menu elements necessary. 
     */
	private void initialiseMenus() {
		// That listener reacts on all commands involved
        OCLInjectorCommandListener commandListener = new OCLInjectorCommandListener();
        // IdeCommandManager holds methods for creating the menu
        IdeCommandManager icm = IdeCommandManagerAccess.getCommandManager();

		////////////////////////////////////////////////////////////////////////
        // MAIN MENU //////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////
		// main menu's group "Instrumentation"
        menuGroupInstrumentation = icm.createGroup(
            "_menuGroupInstrumentation",
            new IdeCommandConstraints(
            	IdeCommandConstraints.LOCATION + "=" + IdeCommandConstraints.MAIN_MENU_LOCATION + "," +
				IdeCommandConstraints.PARENT + "= _toolsCategory," +
                IdeCommandConstraints.PLACE_AFTER + "= _generationToolsGroup," +
                IdeCommandConstraints.CONTEXT + "=" + IdeCommandConstraints.ELEMENT_CONTEXT
            ),
            new IdeCommandAdapter()
        );
        menuGroupInstrumentation.setText("Instrumentation");
        // main menu's entry "Class marked for instrumentation"
        menuItemInstrumentationMarker = icm.createItem(
            "_menuItemInstrumentationMarker",
            new IdeCommandConstraints(
            	IdeCommandConstraints.LOCATION + "=" + IdeCommandConstraints.MAIN_MENU_LOCATION + "," +
				IdeCommandConstraints.PARENT + "= _menuGroupInstrumentation,"
            ),
            commandListener
        );
        menuItemInstrumentationMarker.setCheckbox(true);
        menuItemInstrumentationMarker.setText("Selected for instrumentation");
        menuItemInstrumentationMarker.setSeparatorAfter(true);
        // main menu's entry "(Re-)Instrument class file"
        menuItemInstrumentClass = icm.createItem(
            "_menuItemInstrumentClass",
            new IdeCommandConstraints(
            	IdeCommandConstraints.LOCATION + "=" + IdeCommandConstraints.MAIN_MENU_LOCATION + "," +
				IdeCommandConstraints.PARENT + "= _menuGroupInstrumentation,"
            ),
            commandListener
        );
        menuItemInstrumentClass.setText("Instrument selected class(es)");
        // main menu's entry "Clean class file"
        menuItemCleanClass = icm.createItem(
            "_menuItemCleanClass",
            new IdeCommandConstraints(
            	IdeCommandConstraints.LOCATION + "=" + IdeCommandConstraints.MAIN_MENU_LOCATION + "," +
				IdeCommandConstraints.PARENT + "= _menuGroupInstrumentation,"
            ),
            commandListener
        );
        menuItemCleanClass.setText("Clean selected class(es)");
        menuItemCleanClass.setSeparatorAfter(true);
        // main menu's entry "Instrument marked class files"
        menuItemInstrumentMarkedClasses = icm.createItem(
            "_menuItemInstrumentMarkedClasses",
            new IdeCommandConstraints(
            	IdeCommandConstraints.LOCATION + "=" + IdeCommandConstraints.MAIN_MENU_LOCATION + "," +
				IdeCommandConstraints.PARENT + "= _menuGroupInstrumentation,"
            ),
            commandListener
        );
        menuItemInstrumentMarkedClasses.setText("Instrument all marked classes in project");
        // main menu's entry "Clean all class files"
        menuItemCleanAllClasses = icm.createItem(
            "_menuItemCleanAllClasses",
            new IdeCommandConstraints(
            	IdeCommandConstraints.LOCATION + "=" + IdeCommandConstraints.MAIN_MENU_LOCATION + "," +
				IdeCommandConstraints.PARENT + "= _menuGroupInstrumentation,"
            ),
            commandListener
        );
        menuItemCleanAllClasses.setText("Clean all instrumented classes in project");

		////////////////////////////////////////////////////////////////////////
        // POPUP MENU //////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////
		// popup menu's group "Instrumentation"
        popupMenuGroupInstrumentation = icm.createGroup(
            "_popupMenuGroupInstrumentation",
            new IdeCommandConstraints(
            	IdeCommandConstraints.LOCATION + "=" + IdeCommandConstraints.POPUP_MENU_LOCATION + "," +
                IdeCommandConstraints.PLACE_AFTER + "= _rename," +
                IdeCommandConstraints.CONTEXT + "=" + IdeCommandConstraints.ELEMENT_CONTEXT
            ),
            commandListener
        );
        popupMenuGroupInstrumentation.setText("Instrumentation");
        // popup menu's entry "Class marked for instrumentation"
        popupMenuItemInstrumentationMarker = icm.createItem(
            "_popupMenuItemInstrumentationMarker",
            new IdeCommandConstraints(
            	IdeCommandConstraints.LOCATION + "=" + IdeCommandConstraints.POPUP_MENU_LOCATION + "," +
				IdeCommandConstraints.PARENT + "= _popupMenuGroupInstrumentation,"
            ),
            commandListener
        );
        popupMenuItemInstrumentationMarker.setCheckbox(true);
        popupMenuItemInstrumentationMarker.setChecked(false);
        popupMenuItemInstrumentationMarker.setText("Selected for instrumentation");
        popupMenuItemInstrumentationMarker.setSeparatorAfter(true);
        // popup menu's entry "(Re-)Instrument class file"
        popupMenuItemInstrumentClass = icm.createItem(
            "_popupMenuItemInstrumentClass",
            new IdeCommandConstraints(
            	IdeCommandConstraints.LOCATION + "=" + IdeCommandConstraints.POPUP_MENU_LOCATION + "," +
				IdeCommandConstraints.PARENT + "= _popupMenuGroupInstrumentation,"
            ),
            commandListener
        );
        popupMenuItemInstrumentClass.setText("Instrument class(es)");
        // popup menu's entry "Clean class file"
        popupMenuItemCleanClass = icm.createItem(
            "_popupMenuItemCleanClass",
            new IdeCommandConstraints(
            	IdeCommandConstraints.LOCATION + "=" + IdeCommandConstraints.POPUP_MENU_LOCATION + "," +
				IdeCommandConstraints.PARENT + "= _popupMenuGroupInstrumentation,"
            ),
            commandListener
        );
        popupMenuItemCleanClass.setText("Clean class(es)");
    }


    /**
     * Adds the property "for instrumentation" to the "Properties" tab of the current inspector, if the current selection on the diagram pane only consists of classes.
     * 
     * Called by Together, when creating the inspector after the selection on the diagram pane has changed.
     **/
    public IdeInspector buildInspector(IdeContext context, IdeInspector inspector) {
		RwiElement[] rwiElements = RwiElementsUtil.getRwiElements(context);

    	//checks for the shape type of all "selected" elements, should be only classes (or operations?)
	    for (int i=0; i<rwiElements.length; i++) {
    	    if (! "model".equals(rwiElements[i].getProperty(RwiProperty.MODEL_PART)) ||
        	    (! rwiElements[i].getProperty(RwiProperty.SHAPE_TYPE).equals(RwiShapeType.CLASS) ||
            	rwiElements[i].hasProperty(RwiProperty.INTERFACE)) ) {
    	        return inspector;
	    	}
	    	// create new IdeInspectorProperty
    		RwiInspectorBooleanProperty instrumentationProperty =
	            new RwiInspectorBooleanProperty(rwiElements, SELECTED_FOR_INSTRUMENTATION);
    	    instrumentationProperty.setDisplayName("for instrumentation");

			// get inspector tab (component) and add property
			IdeInspectorPropertySetComponent propertyTab = (IdeInspectorPropertySetComponent)inspector.findComponent("Properties");
			//		OCLInstrumentationVisibilityCondition cond = new OCLInstrumentationVisibilityCondition();
	        propertyTab.addProperty(instrumentationProperty, null);
        }

        return inspector;
    }
}
