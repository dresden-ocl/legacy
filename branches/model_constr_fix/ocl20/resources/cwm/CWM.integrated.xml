<?xml version = '1.0' encoding = 'ISO-8859-1' ?>
<XMI xmi.version = '1.2' xmlns:Model = 'org.omg.xmi.namespace.Model' timestamp = 'Fri May 26 10:57:24 CEST 2006'>
  <XMI.header>
    <XMI.documentation>
      <XMI.exporter>Netbeans XMI Writer</XMI.exporter>
      <XMI.exporterVersion>1.0</XMI.exporterVersion>
    </XMI.documentation>
  </XMI.header>
  <XMI.content>
    <Model:Tag xmi.id = 'a1' tagId = 'javax.jmi.packagePrefix'>
      <Model:Tag.values>javax.jmi</Model:Tag.values>
      <Model:Tag.elements>
        <Model:Package xmi.idref = 'a2'/>
      </Model:Tag.elements>
    </Model:Tag>
    <Model:Package xmi.id = 'a3' name = 'XML' annotation = 'XML is rapidly becoming a very important type of data resource, especially in the Internet environment. On the one hand, HTML is evolving to be XML-compliant; in the near future, all HTML documents can be expected to become valid XML documents. On the other hand, XML is quickly becoming the standard format for interchange of data and/or metadata (e.g., XMI). Therefore, XML documents (or streams) representing data and/or metadata can be expected to appear everywhere. &#10;&#10;The XML package contains classes and associations that represent common metadata describing XML data resources. It is based on XML 1.0 [XML]. XML Schema is an ongoing activity in the W3C. As future standards are adopted by the W3C on XML Schema, this package will be revised and extended accordingly.&#10;&#10;This section provides a description of the main features of the XML package.&#10;&#10;An XML schema contains a set of definitions and declarations, in the form of XML element type definitions. An XML element type may contain a set of XML attributes and/or a content model. An attribute can have one of the following defaults: required, implied, default, or fixed. The content model can be one of the following types: empty, any, mixed, or element. Except for the empty content model, a content model consists of constituent parts, particularly element type references. The allowed occurrence of the constituents can be one of the following types: one, zero or one, zero or more, or&#10;one or more.&#10;&#10;An any content model consists of any element types. A mixed content model consists of character data and specified element type references. An element content model consists of specified element type references and/or element content models. An element content model can be one of the following types: choice or sequence.&#10;&#10;The XML package depends on the following packages:&#10;&#10;    omg.org::CWM::ObjectModel::Core&#10;    omg.org::CWM::ObjectModel::Instance&#10;    omg.org::CWM::Foundation::DataTypes&#10;&#10;The metamodel diagram for the XML package is split into two parts. The first diagram shows the XML classes and associations, while the second shows the inheritance hierarchy.&#10;&#10;OCL Representation of XML Constraints&#10;&#10;   None'
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'>
      <Model:Namespace.contents>
        <Model:Tag xmi.id = 'a4' name = 'org.omg.xmi.namespace=CWMXML' annotation = ''
          tagId = 'org.omg.xmi.namespace'>
          <Model:Tag.values>CWMXML</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a3'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Tag xmi.id = 'a5' name = 'org.omg.mof.idl_prefix=org.omg.cwm.resource'
          annotation = '' tagId = 'org.omg.mof.idl_prefix'>
          <Model:Tag.values>org.omg.cwm.resource</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a3'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Tag xmi.id = 'a6' name = 'org.omg.mof.idl_substitute_name=XMLModule'
          annotation = '' tagId = 'org.omg.mof.idl_substitute_name'>
          <Model:Tag.values>XMLModule</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a3'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Tag xmi.id = 'a7' name = 'com.urep.jcr.java_prefix=org.omg.java.cwm.resource'
          annotation = '' tagId = 'com.urep.jcr.java_prefix'>
          <Model:Tag.values>org.omg.java.cwm.resource</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a3'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Import xmi.id = 'a8' name = 'Core' annotation = '' visibility = 'public_vis'
          isClustered = 'true'>
          <Model:Import.importedNamespace>
            <Model:Package xmi.idref = 'a9'/>
          </Model:Import.importedNamespace>
        </Model:Import>
        <Model:Import xmi.id = 'a10' name = 'Instance' annotation = '' visibility = 'public_vis'
          isClustered = 'true'>
          <Model:Import.importedNamespace>
            <Model:Package xmi.idref = 'a11'/>
          </Model:Import.importedNamespace>
        </Model:Import>
        <Model:Class xmi.id = 'a12' name = 'Schema' annotation = 'This represents an XML schema which contains a set of definitions and declarations. In XML, this is known as document type definition, or DTD, which provides a grammar for a class of documents.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a13' name = 'version' annotation = 'Identifies the version of the XML.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a14'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Attribute xmi.id = 'a15' name = 'xmlNamespace' annotation = 'Identifies the XML namespace of the Schema.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a14'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Reference xmi.id = 'a16' name = 'elementType' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a17'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a18'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a19'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a20' name = 'ElementType' annotation = 'This represents an XML element type definition. In XML, each document contains one or more elements. The element structure may, for validation purposes, be constrained using element type and attribute declarations. An element type declaration constrains the element?s content.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a21' name = 'schema' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a22'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a23'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Reference xmi.id = 'a24' name = 'attribute' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>true</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a25'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a26'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Reference xmi.id = 'a27' name = 'content' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a28'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a29'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a30'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Tag xmi.id = 'a31' name = 'org.omg.mof.idl_substitute_name=xmlAttribute'
          annotation = '' tagId = 'org.omg.mof.idl_substitute_name'>
          <Model:Tag.values>xmlAttribute</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Reference xmi.idref = 'a24'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Class xmi.id = 'a32' name = 'Attribute' annotation = 'This represents an XML attribute declaration. In XML, attributes are used to associate name-value pairs with elements. Each attribute declaration specifies the name, data type, and default value (if any) of each attribute associated with a given element type.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a33' name = 'defaultKind' annotation = 'Identifies the kind of attribute default.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:EnumerationType xmi.idref = 'a34'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Reference xmi.id = 'a35' name = 'elementType' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a36'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a37'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a38'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Tag xmi.id = 'a39' name = 'org.omg.IDL Substitute Name=XmlAttribute'
          annotation = '' tagId = 'org.omg.IDL Substitute Name'>
          <Model:Tag.values>XmlAttribute</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Class xmi.idref = 'a32'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Tag xmi.id = 'a40' name = 'org.omg.mof.idl_substitute_name=XmlAttribute'
          annotation = '' tagId = 'org.omg.mof.idl_substitute_name'>
          <Model:Tag.values>XmlAttribute</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Class xmi.idref = 'a32'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Class xmi.id = 'a28' name = 'Content' annotation = 'This represents the content model of an ElementType. In XML, each document contains one or more elements, the boundaries of which are normally delimited by start-tags and end-tags. The body between the start-tag and end-tag is called the element?s content. An element type declaration constrains the element?s content.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a41' name = 'type' annotation = 'Identifies the type of the content model.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:EnumerationType xmi.idref = 'a42'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Attribute xmi.id = 'a43' name = 'occurrence' annotation = 'Identifies the allowed occurrence of the content constituents.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:EnumerationType xmi.idref = 'a44'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Reference xmi.id = 'a45' name = 'elementType' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a20'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a46'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Reference xmi.id = 'a47' name = 'ownedElementType' annotation = ''
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a48'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a49'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a17'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a50' name = 'ElementContent' annotation = 'This represents an element content which contains only ElementTypeReferences. In XML, an element type has element content when elements of that type must contain only child elements (no character data), optionally separated by white space. In this case, the constraint includes a content model that governs the allowed types of the child elements and the order in which they are allowed to appear.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a51' name = 'order' annotation = 'Identifies the order type of the element content.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:EnumerationType xmi.idref = 'a52'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Reference xmi.id = 'a53' name = 'ownedContent' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a50'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a54'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Reference xmi.id = 'a55' name = 'ownerContent' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a50'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a56'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a28'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a57' name = 'MixedContent' annotation = 'This represents a mixed content of character data and ElementTypeReferences. In XML, an element type has mixed content when elements of that type may contain character data, optionally interspersed with child elements. In this case, the types of the child elements may be constrained, but not their order or their number of occurrences.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a58' name = 'text' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a59'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a60'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a28'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:EnumerationType xmi.id = 'a34' name = 'AttributeDefault' annotation = ''
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'>
          <Model:EnumerationType.labels>xml_required</Model:EnumerationType.labels>
          <Model:EnumerationType.labels>xml_implied</Model:EnumerationType.labels>
          <Model:EnumerationType.labels>xml_default</Model:EnumerationType.labels>
          <Model:EnumerationType.labels>xml_fixed</Model:EnumerationType.labels>
        </Model:EnumerationType>
        <Model:Tag xmi.id = 'a61' name = 'org.omg.xmi.enumerationUnprefix=xml_'
          annotation = '' tagId = 'org.omg.xmi.enumerationUnprefix'>
          <Model:Tag.values>xml_</Model:Tag.values>
          <Model:Tag.elements>
            <Model:EnumerationType xmi.idref = 'a52'/>
            <Model:EnumerationType xmi.idref = 'a44'/>
            <Model:EnumerationType xmi.idref = 'a42'/>
            <Model:EnumerationType xmi.idref = 'a34'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:EnumerationType xmi.id = 'a42' name = 'ContentType' annotation = ''
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'>
          <Model:EnumerationType.labels>xml_empty</Model:EnumerationType.labels>
          <Model:EnumerationType.labels>xml_any</Model:EnumerationType.labels>
          <Model:EnumerationType.labels>xml_mixed</Model:EnumerationType.labels>
          <Model:EnumerationType.labels>xml_element</Model:EnumerationType.labels>
        </Model:EnumerationType>
        <Model:EnumerationType xmi.id = 'a44' name = 'OccurrenceType' annotation = ''
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'>
          <Model:EnumerationType.labels>xml_one</Model:EnumerationType.labels>
          <Model:EnumerationType.labels>xml_zeroOrOne</Model:EnumerationType.labels>
          <Model:EnumerationType.labels>xml_zeroOrMore</Model:EnumerationType.labels>
          <Model:EnumerationType.labels>xml_oneOrMore</Model:EnumerationType.labels>
        </Model:EnumerationType>
        <Model:EnumerationType xmi.id = 'a52' name = 'ElementOrderType' annotation = ''
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'>
          <Model:EnumerationType.labels>xml_choice</Model:EnumerationType.labels>
          <Model:EnumerationType.labels>xml_sequence</Model:EnumerationType.labels>
        </Model:EnumerationType>
        <Model:Class xmi.id = 'a48' name = 'ElementTypeReference' annotation = 'This represents an XML element type reference. In XML, an element content or a mixed content of an element type may contain references to element type definitions.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a62' name = 'occurrence' annotation = 'Identifies the allowed occurrence of the ElementTypeReference.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:EnumerationType xmi.idref = 'a44'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Reference xmi.id = 'a63' name = 'ownerContent' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a28'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a64'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a38'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a59' name = 'Text' annotation = 'This represents character data. In XML, a mixed content of an element type may contain text.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a65' name = 'ownerContent' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a57'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a66'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a38'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a67' name = 'Element' annotation = 'This represents an instance of an ElementType.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a68'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Tag xmi.id = 'a69' name = 'org.omg.mof.idl_substitute_name=XmlElement'
          annotation = '' tagId = 'org.omg.mof.idl_substitute_name'>
          <Model:Tag.values>XmlElement</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Class xmi.idref = 'a67'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Tag xmi.id = 'a70' name = 'com.urep.jcr.java_substitute_name=XmlElement'
          annotation = '' tagId = 'com.urep.jcr.java_substitute_name'>
          <Model:Tag.values>XmlElement</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Class xmi.idref = 'a67'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Class xmi.id = 'a71' name = 'Document' annotation = 'This represents an XML document, which is a collection of XML Elements.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a72'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Association xmi.id = 'a73' name = 'ElementTypeContent' annotation = 'This association relates an ElementType with its Content.'
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'protected_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a29' name = 'content' annotation = '' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a28'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a46' name = 'elementType' annotation = ''
              isNavigable = 'true' aggregation = 'shared' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a20'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a74' name = 'OwnedElementContent' annotation = 'This association relates an ElementContent with its constituent ElementContents.'
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'protected_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a56' name = 'ownerContent' annotation = ''
              isNavigable = 'true' aggregation = 'shared' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a50'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a54' name = 'ownedContent' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a50'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a75' name = 'ContentElementTypeReference' annotation = 'This association relates a Content with its constituent ElementTypeReferences.'
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'protected_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a49' name = 'ownedElementType' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a48'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a64' name = 'ownerContent' annotation = ''
              isNavigable = 'true' aggregation = 'shared' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a28'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a76' name = 'MixedContentText' annotation = 'This association relates a MixedContent with its Text.'
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'protected_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a60' name = 'text' annotation = '' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a59'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a66' name = 'ownerContent' annotation = ''
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a57'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Tag xmi.id = 'a77' name = 'javax.jmi.packagePrefix=tudresden.ocl20.core.jmi.cwm'
          tagId = 'javax.jmi.packagePrefix'>
          <Model:Tag.values>tudresden.ocl20.core.jmi.cwm</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a3'/>
          </Model:Tag.elements>
        </Model:Tag>
      </Model:Namespace.contents>
    </Model:Package>
    <Model:Package xmi.id = 'a78' name = 'Relational' annotation = 'The Relational package describes data accessible through a relational interface such as a native RDBMS, ODBC, or JDBC. The Relational package is based on the [SQL] standard section concerning RDBMS catalogs.&#10;&#10;The scope of the top level container, Catalog, is intended to cover all the tables a user can use in a single statement. A catalog is also the unit which is managed by a data resource. A catalog contains schemas which themselves contain tables. Tables are made of columns which have an associated data type.&#10;&#10;The Relational package uses constructs in the ObjectModel package to describe the object extensions added to SQL by the [SQL] standards. &#10;&#10;The Relational package also addresses the issues of indexing, primary keys and foreign keys by extending the corresponding concepts from the Foundation packages.&#10;&#10;The Relational package depends on the following packages:&#10;&#10;    org.omg::CWM::ObjectModel::Behavioral&#10;    org.omg::CWM::ObjectModel::Core&#10;    org.omg::CWM::ObjectModel::Instance&#10;    org.omg::CWM::Foundation::DataTypes&#10;    org.omg::CWM::Foundation::KeysIndexes&#10;&#10;The Relational package references the ObjectModel and Foundation packages.&#10;&#10;OCL Representation of Relational Constraints&#10;&#10;[C-1] temporaryScope is valid only if the isTemporary is True.&#10;context Tabl e inv:&#10;self.temporaryScope.notEmpty implies self.isTemporary=True&#10;&#10;[C-2] checkOption is valid only if isReadOnly is False.&#10;context View inv:&#10;self.checkOption implies self.isReadOnly=False&#10;&#10;[C-3] scale is valid only if precision is specified.&#10;context Column inv:&#10;self.scale.nonEmpty implies self.precision.notEmpty'
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'>
      <Model:Namespace.contents>
        <Model:Tag xmi.id = 'a79' name = 'org.omg.xmi.namespace=CWMRDB' annotation = ''
          tagId = 'org.omg.xmi.namespace'>
          <Model:Tag.values>CWMRDB</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a78'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Tag xmi.id = 'a80' name = 'org.omg.mof.idl_prefix=org.omg.cwm.resource'
          annotation = '' tagId = 'org.omg.mof.idl_prefix'>
          <Model:Tag.values>org.omg.cwm.resource</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a78'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Tag xmi.id = 'a81' name = 'org.omg.mof.idl_substitute_name=RelationalModule'
          annotation = '' tagId = 'org.omg.mof.idl_substitute_name'>
          <Model:Tag.values>RelationalModule</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a78'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Tag xmi.id = 'a82' name = 'com.urep.jcr.java_prefix=org.omg.java.cwm.resource'
          annotation = '' tagId = 'com.urep.jcr.java_prefix'>
          <Model:Tag.values>org.omg.java.cwm.resource</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a78'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Import xmi.id = 'a83' name = 'Core' annotation = '' visibility = 'public_vis'
          isClustered = 'true'>
          <Model:Import.importedNamespace>
            <Model:Package xmi.idref = 'a9'/>
          </Model:Import.importedNamespace>
        </Model:Import>
        <Model:Import xmi.id = 'a84' name = 'Behavioral' annotation = '' visibility = 'public_vis'
          isClustered = 'true'>
          <Model:Import.importedNamespace>
            <Model:Package xmi.idref = 'a85'/>
          </Model:Import.importedNamespace>
        </Model:Import>
        <Model:Import xmi.id = 'a86' name = 'Instance' annotation = '' visibility = 'public_vis'
          isClustered = 'true'>
          <Model:Import.importedNamespace>
            <Model:Package xmi.idref = 'a11'/>
          </Model:Import.importedNamespace>
        </Model:Import>
        <Model:Import xmi.id = 'a87' name = 'DataTypes' annotation = '' visibility = 'public_vis'
          isClustered = 'true'>
          <Model:Import.importedNamespace>
            <Model:Package xmi.idref = 'a88'/>
          </Model:Import.importedNamespace>
        </Model:Import>
        <Model:Import xmi.id = 'a89' name = 'KeysIndexes' annotation = '' visibility = 'public_vis'
          isClustered = 'true'>
          <Model:Import.importedNamespace>
            <Model:Package xmi.idref = 'a90'/>
          </Model:Import.importedNamespace>
        </Model:Import>
        <Model:Package xmi.id = 'a91' name = 'Enumerations' annotation = 'The enumerations and datatypes used in the Relational model.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'>
          <Model:Namespace.contents>
            <Model:EnumerationType xmi.id = 'a92' name = 'ActionOrientationType' annotation = ''
              isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'>
              <Model:EnumerationType.labels>row</Model:EnumerationType.labels>
              <Model:EnumerationType.labels>statement</Model:EnumerationType.labels>
            </Model:EnumerationType>
            <Model:EnumerationType xmi.id = 'a93' name = 'ConditionTimingType' annotation = ''
              isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'>
              <Model:EnumerationType.labels>before</Model:EnumerationType.labels>
              <Model:EnumerationType.labels>after</Model:EnumerationType.labels>
            </Model:EnumerationType>
            <Model:EnumerationType xmi.id = 'a94' name = 'DeferrabilityType' annotation = ''
              isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'>
              <Model:EnumerationType.labels>initiallyDeferred</Model:EnumerationType.labels>
              <Model:EnumerationType.labels>initiallyImmediate</Model:EnumerationType.labels>
              <Model:EnumerationType.labels>notDeferrable</Model:EnumerationType.labels>
            </Model:EnumerationType>
            <Model:EnumerationType xmi.id = 'a95' name = 'EventManipulationType' annotation = ''
              isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'>
              <Model:EnumerationType.labels>insert</Model:EnumerationType.labels>
              <Model:EnumerationType.labels>delete</Model:EnumerationType.labels>
              <Model:EnumerationType.labels>update</Model:EnumerationType.labels>
            </Model:EnumerationType>
            <Model:EnumerationType xmi.id = 'a96' name = 'NullableType' annotation = ''
              isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'>
              <Model:EnumerationType.labels>columnNoNulls</Model:EnumerationType.labels>
              <Model:EnumerationType.labels>columnNullable</Model:EnumerationType.labels>
              <Model:EnumerationType.labels>columnNullableUnknown</Model:EnumerationType.labels>
            </Model:EnumerationType>
            <Model:EnumerationType xmi.id = 'a97' name = 'ProcedureType' annotation = ''
              isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'>
              <Model:EnumerationType.labels>procedure</Model:EnumerationType.labels>
              <Model:EnumerationType.labels>function</Model:EnumerationType.labels>
            </Model:EnumerationType>
            <Model:EnumerationType xmi.id = 'a98' name = 'ReferentialRuleType' annotation = ''
              isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'>
              <Model:EnumerationType.labels>importedKeyNoAction</Model:EnumerationType.labels>
              <Model:EnumerationType.labels>importedKeyCascade</Model:EnumerationType.labels>
              <Model:EnumerationType.labels>importedKeySetNull</Model:EnumerationType.labels>
              <Model:EnumerationType.labels>importedKeyRestrict</Model:EnumerationType.labels>
              <Model:EnumerationType.labels>importedKeySetDefault</Model:EnumerationType.labels>
            </Model:EnumerationType>
          </Model:Namespace.contents>
        </Model:Package>
        <Model:Class xmi.id = 'a99' name = 'Catalog' annotation = 'A Catalog is the unit of logon and identification. It also identifies the scope of SQL statements: the tables contained in a catalog can be used in a single SQL statement.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a100' name = 'defaultCharacterSetName' annotation = 'The name of the default character set used for the values in the column.&#10;This field applies only to columns whose datatype is a character string.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a14'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Attribute xmi.id = 'a101' name = 'defaultCollationName' annotation = 'The name of the default collation sequence used to sort the data values in the column.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a14'/>
              </Model:TypedElement.type>
            </Model:Attribute>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a19'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a102' name = 'Schema' annotation = 'A schema is a named collection of tables'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a19'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a103' name = 'ColumnSet' annotation = 'A set of columns, representing either the result of a query, a view or a physical table.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a30'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Tag xmi.id = 'a104' name = 'org.omg.IDL Substitute Name=RelationalColumnSet'
          annotation = '' tagId = 'org.omg.IDL Substitute Name'>
          <Model:Tag.values>RelationalColumnSet</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Class xmi.idref = 'a103'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Tag xmi.id = 'a105' name = 'org.omg.mof.idl_substitute_name=CwmColumnSet'
          annotation = '' tagId = 'org.omg.mof.idl_substitute_name'>
          <Model:Tag.values>CwmColumnSet</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Class xmi.idref = 'a103'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Class xmi.id = 'a106' name = 'NamedColumnSet' annotation = 'A catalogued set of columns, which may be Table or View.&#10;&#10;Note for typed tables: It is assumed that the typed table will own a set of columns conforming to the type they are OF. This set of columns allows the manipulation of the table by products which ignore this [SQL] extension. It also allows the columns of type REF, to be copied to a column with a SCOPE reference.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a107' name = 'optionScopeColumn' annotation = ''
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a108'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a109'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Reference xmi.id = 'a110' name = 'type' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a111'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a112'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Reference xmi.id = 'a113' name = 'usingTrigger' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a114'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a115'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a103'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a116' name = 'Table' annotation = 'A materialized NamedColumnSet.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a117' name = 'isTemporary' annotation = 'Indicates that the table content is temporary. SQL92 standards provide two types of temporary tables (local Temporary and Global Temporary). However, RDBMS products have implemented variations on this theme. It is recommended that the product manufacturers provide specific temporary information (besides the temporaryScope attribute) in their extensions. '
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a118'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Attribute xmi.id = 'a119' name = 'temporaryScope' annotation = 'This attribute is meaningful only when the isTemporary flag is True [C-1]. The scope indicates when the data of this table are available. &quot;SESSION&quot;, &quot;APPLICATION&quot; are examples of possible values. Look at the Scope attribute for Global Temporary tables in the SQL standards for more details.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a14'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Reference xmi.id = 'a120' name = 'trigger' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>true</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a114'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a121'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Attribute xmi.id = 'a122' name = 'isSystem' annotation = 'Indicates that the Table is a System Table (generally part of or view on the system catalog).'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a118'/>
              </Model:TypedElement.type>
            </Model:Attribute>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a106'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a123' name = 'View' annotation = 'A view is a non-materialized set of rows, defined by the associated query.&#10;'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a124' name = 'isReadOnly' annotation = 'Indicates whether the underlying tables can be updated through an update to this View.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a118'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Attribute xmi.id = 'a125' name = 'checkOption' annotation = 'This field is meaningful only if the view is not ReadOnly. CheckOption indicates that the RDBMS will validate that changes made to the data verify the view filtering condition and belong to the view result set.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a118'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Attribute xmi.id = 'a126' name = 'queryExpression' annotation = 'The query associated with the View.&#10;&#10;The query result must match the set of Columns associated with the View (in parent class ColumnSet)'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a127'/>
              </Model:TypedElement.type>
            </Model:Attribute>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a106'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a128' name = 'QueryColumnSet' annotation = 'The result set of a query.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a129' name = 'query' annotation = 'The query expression generating this result. The language attribute of the expression should generally begin with &quot;SQL&quot;'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a127'/>
              </Model:TypedElement.type>
            </Model:Attribute>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a103'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a130' name = 'SQLDataType' annotation = 'A SQLDataType is used to reference any datatype associated with a column'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a131' name = 'typeNumber' annotation = 'The number assigned to the datatype by the owning RDBMS'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a132'/>
              </Model:TypedElement.type>
            </Model:Attribute>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a36'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a133' name = 'SQLDistinctType' annotation = 'A datatype defined as a Distinct Type, per [SQL] standard.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a134' name = 'length' annotation = 'The length of fixed length character or byte strings. Maximum length if length is&#10;variable.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a132'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Attribute xmi.id = 'a135' name = 'precision' annotation = 'The total number of digits in the field'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a132'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Attribute xmi.id = 'a136' name = 'scale' annotation = 'The number of digits on the right of the decimal separator.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a132'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Reference xmi.id = 'a137' name = 'sqlSimpleType' annotation = ''
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a138'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a139'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a130'/>
            <Model:Class xmi.idref = 'a140'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a138' name = 'SQLSimpleType' annotation = 'A simple datatype used with an SQL column. Examples are Integer, Varchar, LOB, CLOB, etc...'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a141' name = 'characterMaximumLength' annotation = 'See [SQL], corresponding field in DATA_TYPE_DESCRIPTOR'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a132'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Attribute xmi.id = 'a142' name = 'characterOctetLength' annotation = 'See [SQL], corresponding field in DATA_TYPE_DESCRIPTOR'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a132'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Attribute xmi.id = 'a143' name = 'numericPrecision' annotation = 'See [SQL], corresponding field in DATA_TYPE_DESCRIPTOR'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a132'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Attribute xmi.id = 'a144' name = 'numericPrecisionRadix' annotation = 'See [SQL], corresponding field in DATA_TYPE_DESCRIPTOR'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a132'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Attribute xmi.id = 'a145' name = 'numericScale' annotation = 'See [SQL], corresponding field in DATA_TYPE_DESCRIPTOR'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a132'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Attribute xmi.id = 'a146' name = 'dateTimePrecision' annotation = 'See [SQL], corresponding field in DATA_TYPE_DESCRIPTOR'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a132'/>
              </Model:TypedElement.type>
            </Model:Attribute>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a130'/>
            <Model:Class xmi.idref = 'a147'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a111' name = 'SQLStructuredType' annotation = 'A Datatype defined as Structured Type, per [SQL] standard.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a148' name = 'referencingColumn' annotation = ''
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a108'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a149'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Reference xmi.id = 'a150' name = 'columnSet' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a106'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a151'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a130'/>
            <Model:Class xmi.idref = 'a30'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a108' name = 'Column' annotation = 'A column in a result set, a view, a table, or an SQLStructuredType.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a152' name = 'precision' annotation = 'The total number of digits in the field.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a132'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Attribute xmi.id = 'a153' name = 'scale' annotation = 'The number of digits on the right of the decimal separator.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a132'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Attribute xmi.id = 'a154' name = 'isNullable' annotation = 'Indicates if null values are valid in this column.&#10;&#10;Note: Default values for Column data are provided in initialValue in the UML Attribute class (the class from which the Column class inherits).'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:EnumerationType xmi.idref = 'a96'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Attribute xmi.id = 'a155' name = 'length' annotation = 'The length of fixed length character or byte strings. Maximum length if length is variable.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a132'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Attribute xmi.id = 'a156' name = 'collationName' annotation = 'The name of the collation sequence used to sort the data values in the column.&#10;This applies only to columns whose datatype is a form of character string.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a14'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Attribute xmi.id = 'a157' name = 'characterSetName' annotation = 'The name of the character set used for the values in the column.&#10;This field applies only to columns whose datatype is a character string.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a14'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Reference xmi.id = 'a158' name = 'optionScopeColumnSet' annotation = ''
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a106'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a159'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Reference xmi.id = 'a160' name = 'referencedTableType' annotation = ''
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a111'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a161'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a38'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a162' name = 'Procedure' annotation = 'This class describes Relational DBMS Stored procedures and functions.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a163' name = 'type' annotation = 'A Procedure can be either a Function or a true Procedure. This indicates whether this object returns a value or not.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:EnumerationType xmi.idref = 'a97'/>
              </Model:TypedElement.type>
            </Model:Attribute>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a164'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a114' name = 'Trigger' annotation = 'An action run by the DBMS when specified events occur on the table owning the Trigger'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a165' name = 'eventManipulation' annotation = 'Indicates what types of events are using the current Trigger.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:EnumerationType xmi.idref = 'a95'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Attribute xmi.id = 'a166' name = 'actionCondition' annotation = 'A boolean expression which defines when the trigger has to be executed'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a167'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Attribute xmi.id = 'a168' name = 'actionStatement' annotation = 'The Trigger action itself'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a169'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Attribute xmi.id = 'a170' name = 'actionOrientation' annotation = 'It indicates if the trigger is called once per statement execution or before or after each row of the table is modified.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:EnumerationType xmi.idref = 'a92'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Attribute xmi.id = 'a171' name = 'conditionTiming' annotation = 'It indicates if the trigger activity is run before or after the statement or row is modified.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:EnumerationType xmi.idref = 'a93'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Attribute xmi.id = 'a172' name = 'conditionReferenceNewTable' annotation = 'The alias for the owning table name, used in the actionStatement, to represent the state of the table after the insert/delete/update'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a14'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Attribute xmi.id = 'a173' name = 'conditionReferenceOldTable' annotation = 'The alias for the name of the owning table, used in the actionStatement, to represent the state of the table before the update/delete/insert.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a14'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Reference xmi.id = 'a174' name = 'table' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a116'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a175'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Reference xmi.id = 'a176' name = 'usedColumnSet' annotation = ''
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a106'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a177'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a17'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a178' name = 'SQLIndex' annotation = 'An Index on a table.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a179' name = 'filterCondition' annotation = 'Which subset of the table is indexed'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a14'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Attribute xmi.id = 'a180' name = 'isNullable' annotation = 'Entries in this index can be null'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a118'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Attribute xmi.id = 'a181' name = 'autoUpdate' annotation = 'The index is updated automatically'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a118'/>
              </Model:TypedElement.type>
            </Model:Attribute>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a182'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a183' name = 'UniqueConstraint' annotation = 'A condition to define uniqueness of rows in a table. An example of UniqueConstraint is a primary key'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a184' name = 'deferrability' annotation = 'Indicates if the validity of the UniqueConstraint is to be tested at each statement or at the end of a transaction.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:EnumerationType xmi.idref = 'a94'/>
              </Model:TypedElement.type>
            </Model:Attribute>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a185'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a186' name = 'ForeignKey' annotation = 'A Foreign Key associates columns from one table with columns of another table.&#10;&#10;'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a187' name = 'deleteRule' annotation = 'An enumerated type. Indicates the disposition of the data records containing the foreign key value when the record of the matching primary key is deleted.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:EnumerationType xmi.idref = 'a98'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Attribute xmi.id = 'a188' name = 'updateRule' annotation = 'Same as deleteRule for updates of the primary key data record'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:EnumerationType xmi.idref = 'a98'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Attribute xmi.id = 'a189' name = 'deferrability' annotation = 'Indicates if the validity of the ForeignKey is to be tested at each statement or at the end of a transaction.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:EnumerationType xmi.idref = 'a94'/>
              </Model:TypedElement.type>
            </Model:Attribute>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a190'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a191' name = 'SQLIndexColumn' annotation = 'Associates an index with its columns.&#10;&#10;This is really an association (link) class. It is associated with one index and one column.&#10;'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a192'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a193' name = 'PrimaryKey' annotation = 'There is only one UniqueConstraint of type PrimaryKey per Table. It is implemented specifically by each RDBMS.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a183'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a194' name = 'Row' annotation = 'An instance of a ColumnSet.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a68'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a195' name = 'ColumnValue' annotation = 'The value in a column instance.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a196'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a197' name = 'CheckConstraint' annotation = 'A rule that specifies the values allowed in one or more columns of every row of a table.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a198' name = 'deferrability' annotation = 'Indicates the timing of the constraint enforcement during multiple-user updates.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:EnumerationType xmi.idref = 'a94'/>
              </Model:TypedElement.type>
            </Model:Attribute>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a199'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a200' name = 'RowSet' annotation = 'Each instance of RowSet owns a collection of Row instances. The inherited association between Namespace (a superclass of Package) and ModelElement is used to contain Instances.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a72'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Tag xmi.id = 'a201' name = 'org.omg.mof.idl_substitute_name=CwmRowSet'
          annotation = '' tagId = 'org.omg.mof.idl_substitute_name'>
          <Model:Tag.values>CwmRowSet</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Class xmi.idref = 'a200'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Class xmi.id = 'a202' name = 'SQLParameter' annotation = 'Parameters of stored procedures.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a203'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Association xmi.id = 'a204' name = 'TriggerUsingColumnSet' annotation = 'This associates a Trigger with the NamedColumnSets it uses in its expressions.'
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'protected_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a177' name = 'usedColumnSet' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a106'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a115' name = 'usingTrigger' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a114'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a205' name = 'TableOwningTrigger' annotation = 'Associates a Table with its Triggers. The Trigger will be activated when an action is performed on the Table.'
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'protected_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a175' name = 'table' annotation = '' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a116'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a121' name = 'trigger' annotation = '' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>true</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a114'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a206' name = 'ColumnSetOfStructuredType' annotation = 'Associates structured types with NamedColumnSets defined of this type.'
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'protected_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a112' name = 'type' annotation = '' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a111'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a151' name = 'columnSet' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a106'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a207' name = 'ColumnRefStructuredType' annotation = 'Associates Columns of a StructuredType with the Type they reference in the REF clause'
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'protected_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a161' name = 'referencedTableType' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a111'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a149' name = 'referencingColumn' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a108'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a208' name = 'ColumnOptionsColumnSet' annotation = 'Associates Columns with NamedColumnSets they reference in their OPTIONS clause.'
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'protected_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a109' name = 'optionScopeColumn' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a108'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a159' name = 'optionScopeColumnSet' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a106'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a209' name = 'DistinctTypeHasSimpleType' annotation = ''
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a210' name = 'sqlDistinctType' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a133'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a139' name = 'sqlSimpleType' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a138'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Tag xmi.id = 'a211' name = 'javax.jmi.packagePrefix=tudresden.ocl20.core.jmi.cwm'
          tagId = 'javax.jmi.packagePrefix'>
          <Model:Tag.values>tudresden.ocl20.core.jmi.cwm</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a78'/>
          </Model:Tag.elements>
        </Model:Tag>
      </Model:Namespace.contents>
    </Model:Package>
    <Model:Package xmi.id = 'a90' name = 'KeysIndexes' annotation = 'The KeysIndexes package depends on the following package:&#10;&#10;    org.omg::CWM::ObjectModel::Core&#10;&#10;Keys and indexes as means for specifying instances and for identifying alternate sortings of instances are  epresented in the CWMFoundation so that they can be shared among the various data models that employ hem. The CWM Foundation defines the base concepts (uniqueness and relationships implemented as keys)  pon which more specific key structures can be built by other CWM and tool-specific packages.&#10;&#10;The concepts of key and index have been placed in the CWM Foundation because they are available in many  types of data resources. In the CWM Foundation class and association descriptions that follow, relational model  examples are frequently used when discussing the definition and usage of key and index types. This is done because of the wide-spread availability of relational systems and is thought to promote an understanding of the underlying concepts. These concepts, however, are no less applicable to other data models as well.&#10;&#10;The two central classes for representing the concept of keys are UniqueKey and KeyRelationship. UniqueKey instances correspond to the notion that keys represent the identity of instances -- similar to the relational model?s concept of a primary key or an object model?s concept of an object identity. In contrast, KeyRelationship instancescorrespond to the notion that keys embedded in an instance can be used to determine the identity of other related instances -- similar to the relational model concept of foreign key and the object model concept of a reference. Consequently, UniqueKey and KeyRelationship are best thought of as representing roles that collections of Features of Classifiers play rather than Classifiers describing the internal structure of keys. Representing keys as roles rather than structural entities provides greater flexibility and allows the reuse of  Features in multiple keys and in differing relationships to each other. Associations within the KeysIndexes package describe how UniqueKey and KeyRelationship instances describe the roles they play for various&#10;Class instances and the StructuralFeature instances they contain.&#10;&#10;OCL Representation of KeysIndexes Constraints&#10;&#10;[C-6-1]The isAscending attribute is valid only if the isSorted attribute is True.&#10;context IndexedFeature inv:&#10;self.isAscending-&gt;notEmpty implies self.index.isSorted&#10;&#10;[C-6-2] A KeyRelationship instance must be owned by one and only one Class&#10;instance.&#10;context KeyRelationship inv:&#10;(self.namespace-&gt;size = 1) and self.namespace.oclIsKindOf(Class)&#10;&#10;[C-6-3] An UniqueKey instance must be owned by one and only one Class instance.&#10;context UniqueKey inv:&#10;(self.namespace-&gt;size = 1) and self.namespace.oclIsKindOf(Class)'
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'>
      <Model:Namespace.contents>
        <Model:Tag xmi.id = 'a212' name = 'org.omg.xmi.namespace=CWM' annotation = ''
          tagId = 'org.omg.xmi.namespace'>
          <Model:Tag.values>CWM</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a90'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Tag xmi.id = 'a213' name = 'org.omg.mof.idl_prefix=org.omg.cwm.foundation'
          annotation = '' tagId = 'org.omg.mof.idl_prefix'>
          <Model:Tag.values>org.omg.cwm.foundation</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a90'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Tag xmi.id = 'a214' name = 'org.omg.mof.idl_substitute_name=KeysIndexesModule'
          annotation = '' tagId = 'org.omg.mof.idl_substitute_name'>
          <Model:Tag.values>KeysIndexesModule</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a90'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Tag xmi.id = 'a215' name = 'com.urep.jcr.java_prefix=org.omg.java.cwm.foundation'
          annotation = '' tagId = 'com.urep.jcr.java_prefix'>
          <Model:Tag.values>org.omg.java.cwm.foundation</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a90'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Import xmi.id = 'a216' name = 'Core' annotation = '' visibility = 'public_vis'
          isClustered = 'true'>
          <Model:Import.importedNamespace>
            <Model:Package xmi.idref = 'a9'/>
          </Model:Import.importedNamespace>
        </Model:Import>
        <Model:Class xmi.id = 'a185' name = 'UniqueKey' annotation = 'A UniqueKey represents a collection of features of some Class that, taken together, uniquely identify instances of the Class. Instances of UniqueKey for which all features are required to have non-null values are candidates for use as primary keys such as those defined by relational DBMSs.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a217' name = 'feature' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>true</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a218'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a219'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Reference xmi.id = 'a220' name = 'keyRelationship' annotation = ''
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a190'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a221'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a17'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a182' name = 'Index' annotation = 'Instances of the Index class represent the ordering of the instances of some other Class, and the Index is said to &quot;span&quot; the Class. Indexes normally have an ordered set of attributes of the Class instance they span that make up the &quot;key&quot; of the index; this set of relationships is represented by the IndexedFeature class that indicates how the attributes are used by the Index instance.&#10;&#10;The Index class is intended primarily as a starting point for tools that require the notion&#10;of an index.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a222' name = 'isPartitioning' annotation = 'If True, this Index instance is used as a partitioning index.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a118'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Attribute xmi.id = 'a223' name = 'isSorted' annotation = 'If True, the Index instance is maintained in a sorted order.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a118'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Attribute xmi.id = 'a224' name = 'isUnique' annotation = 'The isUnique attribute is True if the Index instance guarantees all of its instances have a unique key value.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a118'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Reference xmi.id = 'a225' name = 'indexedFeature' annotation = ''
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>true</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a192'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a226'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Reference xmi.id = 'a227' name = 'spannedClass' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a30'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a228'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a17'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a190' name = 'KeyRelationship' annotation = 'KeyRelationship instances represent relationships between UniqueKey instances and the Class(es) that reference them. This class is intended as a starting point for the creation of &quot;foreign key&quot; and other associative relationships.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a229' name = 'feature' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>true</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a218'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a230'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Reference xmi.id = 'a231' name = 'uniqueKey' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a185'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a232'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a17'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a192' name = 'IndexedFeature' annotation = 'Instances of the IndexedFeature class map StructuralFeature instances of the spanned Class instance to the Index instances that employ them as (part of) their key. Attributes of IndexedFeature instances indicate how specific StructuralFeature instance are used in Index keys.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a233' name = 'isAscending' annotation = 'The isAscending attribute is true if the feature is sorted in ascending order and false, if descending order.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a118'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Reference xmi.id = 'a234' name = 'feature' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a218'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a235'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Reference xmi.id = 'a236' name = 'index' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a182'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a237'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a17'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Association xmi.id = 'a238' name = 'IndexedFeatures' annotation = 'The IndexedFeatures association links StructuralFeature instances to information about how they participate in the keys of Index instances.'
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a235' name = 'feature' annotation = '' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a218'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a239' name = 'indexedFeature' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a192'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a240' name = 'IndexedFeatureInfo' annotation = 'The IndexedFeatureInfo association connects an Index instance to information about how the StructuralFeature instances that are constituents of the Index?s key are used by the Index.'
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'protected_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a237' name = 'index' annotation = '' isNavigable = 'true'
              aggregation = 'composite' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a182'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a226' name = 'indexedFeature' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>true</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a192'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a241' name = 'KeyRelationshipFeatures' annotation = 'The KeyRelationshipFeatures association links KeyRelationship instances with the&#10;StructuralFeature instances that comprise their key.'
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a230' name = 'feature' annotation = '' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>true</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a218'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a242' name = 'keyRelationship' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a190'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a243' name = 'UniqueFeature' annotation = 'The UniqueFeature association identifies the Feature instances of a Class instance that confer uniqueness. The ordered constraint is used to determine the order of StructuralFeature instances in the UniqueKey instance.'
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a219' name = 'feature' annotation = '' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>true</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a218'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a244' name = 'uniqueKey' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a185'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a245' name = 'UniqueKeyRelationship' annotation = 'The UniqueKeyRelationship association links a KeyRelationship with the UniqueKey with which it is paired. For example, in relational model terms, this association links a foreign key -- the KeyRelationship instance -- with the primary key -- the UniqueKey instance -- with which it is paired.'
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'protected_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a221' name = 'keyRelationship' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a190'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a232' name = 'uniqueKey' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a185'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a246' name = 'IndexSpansClass' annotation = 'Associates indexes with the classes they span. This relationship is separate from the ownership of indexes, to allow modeling of systems where an index is NOT owned by the object it spans. In most situations, however, the spanned and owning Class instances will be the same.'
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a228' name = 'spannedClass' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a30'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a247' name = 'index' annotation = '' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a182'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Tag xmi.id = 'a248' name = 'javax.jmi.packagePrefix=tudresden.ocl20.core.jmi.cwm'
          tagId = 'javax.jmi.packagePrefix'>
          <Model:Tag.values>tudresden.ocl20.core.jmi.cwm</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a90'/>
          </Model:Tag.elements>
        </Model:Tag>
      </Model:Namespace.contents>
    </Model:Package>
    <Model:Package xmi.id = 'a88' name = 'DataTypes' annotation = 'The DataTypes package depends on the following packages:&#10;&#10;    org.omg::CWM::ObjectModel::Core&#10;&#10;The CWM DataTypes metamodel supports definition of metamodel constructs that modelers can use to create the specific data types they need. Although the CWM Foundation itself does not contain specific data type definitions, a number of data type definitions for widely used environments are provided (in the CWM Data Types chapter) as examples of the appropriate usage of CWM Foundation classes for creating&#10;data type definitions.&#10;&#10;OCL Representation of DataTypes Constraints&#10;&#10;[C-4-1] A TypeAlias instance cannot alias itself.&#10;context TypeAlias inv:&#10;self.type &lt;&gt; self&#10;&#10;[C-4-2] A Union can have at most one default UnionMember instance.&#10;context Union inv:&#10;self.allFeatures-&gt;select(isDefault)-&gt;size &lt;= 1&#10;'
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'>
      <Model:Namespace.contents>
        <Model:Tag xmi.id = 'a249' name = 'org.omg.xmi.namespace=CWM' annotation = ''
          tagId = 'org.omg.xmi.namespace'>
          <Model:Tag.values>CWM</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a88'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Tag xmi.id = 'a250' name = 'org.omg.mof.idl_prefix=org.omg.cwm.foundation'
          annotation = '' tagId = 'org.omg.mof.idl_prefix'>
          <Model:Tag.values>org.omg.cwm.foundation</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a88'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Tag xmi.id = 'a251' name = 'org.omg.mof.idl_substitute_name=DataTypesModule'
          annotation = '' tagId = 'org.omg.mof.idl_substitute_name'>
          <Model:Tag.values>DataTypesModule</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a88'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Tag xmi.id = 'a252' name = 'com.urep.jcr.java_prefix=org.omg.java.cwm.foundation'
          annotation = '' tagId = 'com.urep.jcr.java_prefix'>
          <Model:Tag.values>org.omg.java.cwm.foundation</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a88'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Import xmi.id = 'a253' name = 'Core' annotation = '' visibility = 'public_vis'
          isClustered = 'true'>
          <Model:Import.importedNamespace>
            <Model:Package xmi.idref = 'a9'/>
          </Model:Import.importedNamespace>
        </Model:Import>
        <Model:Class xmi.id = 'a254' name = 'Enumeration' annotation = 'The Enumeration class is intended as a starting point from which enumerated data types can be created. An enumerated data type is a collection of identifiers often used as the permitted states that some other attribute or property of the enumerated type may take.&#10;&#10;The isOrdered attribute of an Enumeration instance is used to determine if the ordered constraint on the EnumerationLiterals association is relevant for the enumeration. The particular ordering of EnumerationLiteral instances is obtained from the ordered constraint on the association even if the value attributes of the EnumerationLiteral instances contain non-null values that might be used to determine ordering. This is done to provide more flexible ordering semantics.&#10;&#10;An instance of Enumeration is also required to create a range data type. Refer to the EnumerationLiteral class for details.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a255' name = 'isOrdered' annotation = 'If True, the ordered constraint on the EnumerationLiterals association is relevant. Otherwise, the ordering of EnumerationLiteral instances is considered unspecified.&#10;'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a118'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Reference xmi.id = 'a256' name = 'literal' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a257'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a258'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a147'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a257' name = 'EnumerationLiteral' annotation = 'EnumerationLiteral instances describe the enumeration identifiers, and possibly the&#10;values, associated with an enumerated data type. Enumeration identifiers are contained&#10;in the name attribute derived from the EnumerationLiteral instance?s ModelElement superclass.&#10;&#10;EnumerationLiteral instances may also be used to define expression-based values such as ranges. To do so, simply state the membership expression in the instance?s value. For example, a range literal can be created by setting the value attribute to &quot;m..n&quot;, where m represents the lower bound of the range, and n, the upper bound. In this way, ranges and other more complicated expressions can be intermixed with simple&#10;enumeration literals. For example, an enumeration might contain the literals &quot;1&quot;, &quot;2&quot;, &quot;4..7&quot;, and &quot;&gt; 10&quot;.&#10;&#10;Consequently, a simple range data type can be created with an Enumeration instance that owns a single EnumerationLiteral instance. For example, a data type for positive integers could be created as shown in the following instance diagram. A model attribute of this data type might then be declared as &quot;posInt : PositiveInteger&quot;.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a259' name = 'value' annotation = 'The value associated with an enumeration identifier can be stored here. The attribute is optional because enumeration literals are not required to have a specific, displayable value. This is indicated by either an empty value attribute or a value attribute value whose expression body attribute is a zero-length string.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a260'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Reference xmi.id = 'a261' name = 'enumeration' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a254'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a262'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a17'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Tag xmi.id = 'a263' name = 'org.omg.IDL Substitute Name=umlValue'
          annotation = '' tagId = 'org.omg.IDL Substitute Name'>
          <Model:Tag.values>umlValue</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Attribute xmi.idref = 'a259'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Class xmi.id = 'a127' name = 'QueryExpression' annotation = 'QueryExpression instances contain query statements in language-dependent form.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a169'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Tag xmi.id = 'a264' name = 'org.omg.CORBA Declaration=typedef Foundation.DataTypes.ProcedureExpression QueryExpression;'
          annotation = '' tagId = 'org.omg.CORBA Declaration'>
          <Model:Tag.values>typedef Foundation.DataTypes.ProcedureExpression QueryExpression;</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Class xmi.idref = 'a127'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Class xmi.id = 'a140' name = 'TypeAlias' annotation = 'The TypeAlias class is intended to provide a renaming capability for Classifier instances. This class is required to support situations in which creation of an alias for a class effectively creates a new class. For example, CORBA IDL type aliases have different typeCodes than their base types and are therefore treated as distinct types.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a265' name = 'type' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a36'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a266'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a147'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a267' name = 'Union' annotation = 'The Union class represents programming language unions and similarly structured data types. Because of the diversity of union semantics found across software systems, the Union and UnionMember classes are likely candidates for specialization to better capture union semantics in specific language extension packages.&#10;&#10;A discriminated Union has a collection of UnionMembers that determine the sets of contents that the Union may contain. Such Unions have an attribute called the discriminator that identifies the memberCase value of the UnionMember that the Union currently contains. The discriminator is found via the UnionDiscriminator association to StructuralFeature. The discriminator may be embedded within UnionMembers or may be located outside the discriminator. If it is located within UnionMembers, the discriminator should occur in every UnionMember at the same location (often, the first).&#10;&#10;Undiscriminated unions (for example, a C language union) are also supported, but have an empty discriminator reference, and the memberCase attribute of the UnionMembers it contains is ignored.&#10;&#10;Undiscriminated Unions are often used to represent alternate views of a single physical&#10;storage area. A fine degree of control over this aspect of Unions may be obtained by&#10;creating a class that derives from both UnionMember and FixedOffsetField (in the&#10;CWM Record package) and setting the offset attribute instances of that class&#10;accordingly.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a268' name = 'discriminator' annotation = ''
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a218'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a269'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a36'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Tag xmi.id = 'a270' name = 'org.omg.mof.idl_substitute_name=CwmUnion'
          annotation = '' tagId = 'org.omg.mof.idl_substitute_name'>
          <Model:Tag.values>CwmUnion</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Class xmi.idref = 'a267'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Class xmi.id = 'a271' name = 'UnionMember' annotation = 'UnionMembers are described as features of a Union and each represents one of the members of a Union. Note, however, that multiple case values can map to a single UnionMember. If isDefault is true, the union member is the default member.&#10;&#10;UnionMember instances are allowed to have a memberCase and be the default case. UnionMember instances often represent structured storage areas. A particular UnionMember may be associated with a Classifier that describes its internal structure via the StructuralFeatureType association (defined in the ObjectModel::Core package). For example, the Record::Group class, itself a Classifier, can be used as the type of a UnionMember in a manner completely analogous to how it is used to describe the type of a structured field (see the instance diagrams in the Record metamodel chapter for details).'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a272' name = 'memberCase' annotation = 'Contains the value of the Union?s discriminator for this UnionMember.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a260'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Attribute xmi.id = 'a273' name = 'isDefault' annotation = 'Indicates if this UnionMember is the default member of the Union (implying that when unstated, the Union?s discriminator would assume this instance?s memberCase value).'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a118'/>
              </Model:TypedElement.type>
            </Model:Attribute>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a38'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Association xmi.id = 'a274' name = 'ClassifierAlias' annotation = 'The ClassifierAlias association connects TypeAlias instances with the Classifier instances which they rename.'
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a266' name = 'type' annotation = '' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a36'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a275' name = 'alias' annotation = '' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a140'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a276' name = 'EnumerationLiterals' annotation = 'The EnumerationLiterals association links enumeration literals to the Enumeration instances that contain them.&#10;&#10;If the Enumeration?s isOrdered attribute is True, the ordering constraint on the association is relevant. Otherwise, it is ignored.'
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'protected_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a262' name = 'enumeration' annotation = ''
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a254'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a258' name = 'literal' annotation = '' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a257'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a277' name = 'UnionDiscriminator' annotation = 'The UnionDiscriminator association connects a Union instance with the StructuralFeature instance that can be used to determine which UnionMember instance is currently present in the Union instance. This &quot;discriminating&quot; attribute may be a feature of the UnionMembers themselves or may be a feature of some Classifier that contains the Union instance as one of its Features. In the former case, the&#10;discriminating feature will usually be present at the same offset in each UnionMember instance. If the discriminator reference is empty for a particular Union instance, it is considered to be an &quot;undiscriminated&quot; Union and determination of the current UnionMember residing in the Union is usage-defined.'
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a269' name = 'discriminator' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a218'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a278' name = 'discriminatedUnion' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a267'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Tag xmi.id = 'a279' name = 'javax.jmi.packagePrefix=tudresden.ocl20.core.jmi.cwm'
          tagId = 'javax.jmi.packagePrefix'>
          <Model:Tag.values>tudresden.ocl20.core.jmi.cwm</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a88'/>
          </Model:Tag.elements>
        </Model:Tag>
      </Model:Namespace.contents>
    </Model:Package>
    <Model:Package xmi.id = 'a11' name = 'Instance' annotation = 'The Instance metamodel depends on the following package:&#10;&#10;    org.omg::CWM::ObjectModel::Core&#10;&#10;In addition to the metadata normally interchanged with CWM, it is sometimes useful to interchange specific data instances as well. The ObjectModel?s Instance metamodel allows the inclusion of data instances with the metadata.&#10;&#10;OCL Representation of Instance Constraints&#10;&#10;Constraints&#10;&#10;[C-6-1] A DataValue originates from a Classifier that is a DataType.&#10;context DataValue inv:&#10;self.classifier.oclIsKindOf(DataType)&#10;&#10;[C-6-2] A DataValue has no Slots.&#10;context DataValue inv:&#10;self.valueSlot-&gt;isEmpty&#10;&#10;[C-6-3] An Object may only own Objects and DataValues.&#10;context Object inv:&#10;self.contents-&gt;forAll(c | c.oclIsKindOf(Object) or c.oclIsKindOf(DataValue))&#10;&#10;[C-6-4] If an Object represents an association, at least two of its ends must be not be empty.&#10;context Object inv:&#10;self.classifier.oclIsKindOf(Association) implies&#10;self.slot.feature-&gt;iterate( ae ; cnt : Integer = 0 |&#10;if ae.oclIsKindOf(AssociationEnd) and ae.value.notEmpty then&#10;   cnt + 1&#10;else&#10;   cnt&#10;end if ) &gt; 1&#10;&#10;[C-6-5] If the StructuralFeature describing a Slot is an AssociationEnd, the Classifier associated with the Object owning the Slot must be an Association.&#10;context Slot inv:&#10;self.feature.oclIsKindOf(AssociationEnd) implies&#10;self.value.classifier.oclIsKindOf(Association)&#10;'
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'>
      <Model:Namespace.contents>
        <Model:Tag xmi.id = 'a280' name = 'org.omg.mof.idl_prefix=org.omg.cwm.objectmodel'
          annotation = '' tagId = 'org.omg.mof.idl_prefix'>
          <Model:Tag.values>org.omg.cwm.objectmodel</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a11'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Tag xmi.id = 'a281' name = 'org.omg.xmi.namespace=CWM' annotation = ''
          tagId = 'org.omg.xmi.namespace'>
          <Model:Tag.values>CWM</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a11'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Tag xmi.id = 'a282' name = 'org.omg.mof.idl_substitute_name=InstanceModule'
          annotation = '' tagId = 'org.omg.mof.idl_substitute_name'>
          <Model:Tag.values>InstanceModule</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a11'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Tag xmi.id = 'a283' name = 'com.urep.jcr.java_prefix=org.omg.java.cwm.objectmodel'
          annotation = '' tagId = 'com.urep.jcr.java_prefix'>
          <Model:Tag.values>org.omg.java.cwm.objectmodel</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a11'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Import xmi.id = 'a284' name = 'Core' annotation = '' visibility = 'public_vis'
          isClustered = 'true'>
          <Model:Import.importedNamespace>
            <Model:Package xmi.idref = 'a9'/>
          </Model:Import.importedNamespace>
        </Model:Import>
        <Model:Class xmi.id = 'a285' name = 'DataSlot' annotation = 'A Slot which is used to hold a data value where there is no need to manage the value as an element in its own right (in which case a DataValue would be used) - for example it is a one-off string value or a number. The dataValue (and dataType where set) must be consistent with the type of the DataSlot&apos;s feature (Attribute) and must obey any constraints on the full descriptor of the Attribute&apos;s DataType (including both explicit constraints and built-in constraints such as multiplicity).'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a286' name = 'dataValue' annotation = 'The value for the slot expressed as a string.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a14'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Reference xmi.id = 'a287' name = 'dataType' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a147'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a288'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a289'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a196' name = 'DataValue' annotation = 'A data value is an instance with no identity. In the metamodel, DataValue is a child of Instance that cannot change its state, i.e. all operations that are applicable to it are pure functions or queries that do not cause any side effects. DataValues are typically used&#10;as attribute values.&#10;&#10;Since it is not possible to differentiate between two data values that appear to be the same, it becomes more of a philosophical issue whether there are several data values representing the same value or just one for each value. In addition, a data value cannot change its data type and it does not have contained instances.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a290' name = 'value' annotation = 'A string representation of the value.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a14'/>
              </Model:TypedElement.type>
            </Model:Attribute>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a291'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a72' name = 'Extent' annotation = 'Each instance of Extent owns a collection of instances and is used to link such collections to their structural and behavioral definitions in CWM Resource packages. Because Extent is a subclass of package, it owns member instances via the&#10;ElementOwnership associaton.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a19'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a291' name = 'Instance' annotation = 'The instance construct defines an entity to which a set of operations can be applied and which has a state that stores the effects of the operations. In the metamodel Instance is connected to a Classifier that declares its structure and behavior. It has a set of attribute values matching the definition of its Classifier. The set of attribute values implements the current state of the Instance. Because Instance is an abstract class, all Instances are either Object or DataValue instances.&#10;&#10;The data content of an Instance comprises one value for each attribute in its full descriptor (and nothing more). The value must be consistent with the type of the attribute. An instance must obey any constraints on the full descriptor of the Classifier&#10;of which it is an instance (including both explicit constraints and built-in constraints such as multiplicity).&#10;'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a292' name = 'classifier' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a36'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a293'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a17'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a68' name = 'Object' annotation = 'An object is an instance that originates from a class.&#10;&#10;In the metamodel, Object is a subclass of Instance originating from a Class. The Class may be modified dynamically, which means that the set of features of the Object may change during its life-time.&#10;&#10;An object is an instance that originates from a class; it is structured and behaves according to its class. All objects originating from the same class are structured in the same way, although each of them has its own set of attribute slots. Each attribute slot references an instance, usually a data value or possibly, another object. The number of attribute slots with the same name fulfills the multiplicity of the corresponding attribute in the class. The set may be modified according to the specification in the corresponding attribute, e.g. each referenced instance must originate from (a specialization of) the type of the attribute, and attribute slots may be added or removed according to the changeable property of the attribute.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a294' name = 'slot' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a289'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a295'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a291'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Tag xmi.id = 'a296' name = 'org.omg.mof.idl_substitute_name=UmlObject'
          annotation = '' tagId = 'org.omg.mof.idl_substitute_name'>
          <Model:Tag.values>UmlObject</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Class xmi.idref = 'a68'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Class xmi.id = 'a289' name = 'Slot' annotation = 'A slot is a named location in an Object instance that holds the current value of the StructuralFeature associated with the Slot instance. Normally, the StructuralFeature associated with the slot will be either an Attribute instance or an AssociationEnd instance. Slots are owned by Objects; DataValues do not have slots.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a297' name = 'object' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a68'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a298'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Reference xmi.id = 'a299' name = 'value' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a291'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a300'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Reference xmi.id = 'a301' name = 'feature' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a218'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a302'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a17'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Tag xmi.id = 'a303' name = 'org.omg.mof.idl_substitute_name=umlObject'
          annotation = '' tagId = 'org.omg.mof.idl_substitute_name'>
          <Model:Tag.values>umlObject</Model:Tag.values>
          <Model:Tag.elements>
            <Model:AssociationEnd xmi.idref = 'a298'/>
            <Model:Reference xmi.idref = 'a297'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Association xmi.id = 'a304' name = 'SlotValue' annotation = 'The SlotValue association connects slot instances with the DataValue or Object instance that contains the current value held by the slot.'
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a305' name = 'valueSlot' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a289'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a300' name = 'value' annotation = '' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a291'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Tag xmi.id = 'a306' name = 'org.omg.mof.idl_substitute_name=cwmlValue'
          annotation = '' tagId = 'org.omg.mof.idl_substitute_name'>
          <Model:Tag.values>cwmlValue</Model:Tag.values>
          <Model:Tag.elements>
            <Model:AssociationEnd xmi.idref = 'a300'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Association xmi.id = 'a307' name = 'InstanceClassifier' annotation = 'The InstanceClassifier association links Instances with Classifiers that describe them.'
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a308' name = 'instance' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a291'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a293' name = 'classifier' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a36'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a309' name = 'ObjectSlot' annotation = 'The ObjectSlot association connects Slot instances with their owning Object instances.'
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'protected_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a295' name = 'slot' annotation = '' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a289'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a298' name = 'object' annotation = '' isNavigable = 'true'
              aggregation = 'composite' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a68'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a310' name = 'FeatureSlot' annotation = 'The FeatureSlot association connects Slot instances with the StructuralFeature instance (usually either an Attribute or AssociationEnd instance) describing the structure of the value held by the Slot.'
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a302' name = 'feature' annotation = '' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a218'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a311' name = 'slot' annotation = '' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a289'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a312' name = 'DataSlotType' annotation = 'The DataSlotType association connects DataSlot instances with the Core::DataType instance that identifies the type of information stored in the DataSlot::dataValue attribute.'
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a288' name = 'dataType' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a147'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a313' name = 'dataSlot' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a285'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Tag xmi.id = 'a314' name = 'javax.jmi.packagePrefix=tudresden.ocl20.core.jmi.cwm'
          tagId = 'javax.jmi.packagePrefix'>
          <Model:Tag.values>tudresden.ocl20.core.jmi.cwm</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a11'/>
          </Model:Tag.elements>
        </Model:Tag>
      </Model:Namespace.contents>
    </Model:Package>
    <Model:Package xmi.id = 'a85' name = 'Behavioral' annotation = 'The Behavioral metamodel depends on the following package:&#10;&#10;   org.omg::CWM::ObjectModel::Core&#10;&#10;The Behavioral metamodel collects together classes and associations that describe the behavior of CWM types and provides a foundation for recording the invocations of defined behaviors. The elements of the Behavioral metamodel are shown in the following figure.&#10;&#10;OCL Representation of Behavioral Constraints&#10;&#10;Operations&#10;&#10;The operation hasSameSignature checks if the argument has the same signature as the instance itself.&#10;   hasSameSignature ( b : BehavioralFeature ) : Boolean;&#10;   hasSameSignature (b) =&#10;   (self.name = b.name) and&#10;   (self.parameter-&gt;size = b.parameter-&gt;size) and&#10;   Sequence{ 1..(self.parameter-&gt;size) }-&gt;forAll( index : Integer |&#10;   b.parameter-&gt;at(index).type =&#10;   self.parameter-&gt;at(index).type and&#10;   b.parameter-&gt;at(index).kind =&#10;   self.parameter-&gt;at(index).kind   )&#10;&#10;The operation allOperations results in a Set containing all Operations of the Classifier itself and all its inherited Operations.&#10;   allOperations : Set(Operation);&#10;   allOperations = self.allFeatures-&gt;select(f | f.ockIsKindOf(Operations))&#10;&#10;The operation allMethods results in a Set containing all Methods of the Classifier itself and all its inherited Methods.&#10;   allOperations : Set(Method);&#10;   allMethods = self.allFeatures-&gt;select(f | f.ockIsKindOf(Method))&#10;&#10;Constraints&#10;&#10;[C-4-1] All Parameters should have a unique name.&#10;context BehavioralFeature inv:&#10;self.parameter-&gt;forAll(p1, p2 | p1.name = p2.name implies p1 = p2)&#10;&#10;[C-4-2] The type of the Parameters should be included in the Namespace of the Classifier.&#10;context BehavioralFeature inv:&#10;self.parameter-&gt;forAll( p | self.owner.namespace.allContents-&gt;includes (p.type) )&#10;&#10;[C-4-3] The number of arguments must be the same as the number of parameters of the Operation.&#10;context CallAction inv:&#10;self.actualArgument-&gt;size = self.operation.parameter-&gt;size&#10;&#10;[C-4-4] An Interface can only contain Operations.&#10;context Interface inv:&#10;self.allFeatures-&gt;forAll( f | f.oclIsKindOf( Operation ) )&#10;&#10;[C-4-5] An Interface cannot contain any ModelElements.&#10;context Interface inv:&#10;self.allContents-&gt;isEmpty&#10;&#10;[C-4-6] All Features defined in an Interface are public.&#10;context Interface inv:&#10;self.allFeatures-&gt;forAll( f | f.visibility = #public )&#10;&#10;[C-4-7] If the realized Operation is a query, then so is the Method.&#10;context Method inv:&#10;self.specification-&gt;isQuery implies self.isQuery'
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'>
      <Model:Namespace.contents>
        <Model:Tag xmi.id = 'a315' name = 'org.omg.mof.idl_prefix=org.omg.cwm.objectmodel'
          annotation = '' tagId = 'org.omg.mof.idl_prefix'>
          <Model:Tag.values>org.omg.cwm.objectmodel</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a85'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Tag xmi.id = 'a316' name = 'org.omg.xmi.namespace=CWM' annotation = ''
          tagId = 'org.omg.xmi.namespace'>
          <Model:Tag.values>CWM</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a85'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Tag xmi.id = 'a317' name = 'org.omg.mof.idl_substitute_name=BehavioralModule'
          annotation = '' tagId = 'org.omg.mof.idl_substitute_name'>
          <Model:Tag.values>BehavioralModule</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a85'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Tag xmi.id = 'a318' name = 'com.urep.jcr.java_prefix=org.omg.java.cwm.objectmodel'
          annotation = '' tagId = 'com.urep.jcr.java_prefix'>
          <Model:Tag.values>org.omg.java.cwm.objectmodel</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a85'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Import xmi.id = 'a319' name = 'Core' annotation = '' visibility = 'public_vis'
          isClustered = 'true'>
          <Model:Import.importedNamespace>
            <Model:Package xmi.idref = 'a9'/>
          </Model:Import.importedNamespace>
        </Model:Import>
        <Model:Class xmi.id = 'a320' name = 'Argument' annotation = 'Argument is an expression describing how to determine an actual value passed in a CallAction.&#10;&#10;In the metamodel an Argument is a composite part of a CallAction and contains a meta-attribute, value, of type Expression. It states how the actual argument is determined when the owning CallAction is executed.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a321' name = 'value' annotation = 'An expression determining the actual Argument instance when executed.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a260'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Reference xmi.id = 'a322' name = 'callAction' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a323'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a324'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a17'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Tag xmi.id = 'a325' name = 'org.omg.mof.idl_substitute_name=umlValue'
          annotation = '' tagId = 'org.omg.mof.idl_substitute_name'>
          <Model:Tag.values>umlValue</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Attribute xmi.idref = 'a321'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Class xmi.id = 'a326' name = 'BehavioralFeature' annotation = 'A behavioral feature refers to a dynamic feature of a model element, such as an operation or method. In the metamodel, BehavioralFeature specifies a behavioral aspect of a Classifier. All different kinds of behavioral aspects of a Classifier, such as Operation and Method, are subclasses of BehavioralFeature.&#10;&#10;BehavioralFeature is an abstract metaclass.&#10;'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a327' name = 'isQuery' annotation = 'Specifies whether an execution of the BehavioralFeature leaves the state of the system unchanged. True indicates that the state is unchanged; false indicates that side-effects may occur.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a118'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Reference xmi.id = 'a328' name = 'parameter' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>true</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a203'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a329'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a25'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a323' name = 'CallAction' annotation = 'A call action is an action resulting in an invocation of an operation.&#10;&#10;The purpose of a CallAction is to identify the actual Arguments used in a specific invocation of an Operation.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a330' name = 'operation' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a331'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a332'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Reference xmi.id = 'a333' name = 'actualArgument' annotation = ''
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>true</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a320'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a334'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a17'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a335' name = 'Event' annotation = 'Event is a specification of an observable occurrence. The occurrence that generates an event instance is assumed to take place at an instant in time.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a336' name = 'parameter' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>true</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a203'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a337'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a17'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a338' name = 'Interface' annotation = 'Interface is a named set of operations that specify the behavior of an element.&#10;&#10;In the metamodel, an Interface contains a set of Operations that together define a service offered by a Classifier realizing the Interface. A Classifier may offer several services, which means that it may realize several Interfaces, and several Classifiers may realize the same Interface.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a36'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Tag xmi.id = 'a339' name = 'org.omg.mof.idl_substitute_name=UmlInterface'
          annotation = '' tagId = 'org.omg.mof.idl_substitute_name'>
          <Model:Tag.values>UmlInterface</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Class xmi.idref = 'a338'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Class xmi.id = 'a164' name = 'Method' annotation = 'Method is the implementation of an Operation. It specifies the algorithm or procedure that effects the results of an Operation.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a340' name = 'body' annotation = 'A specification of the Method in some appropriate form (such as a programming language). The exact form of a Method?s specification and knowledge of the language in which it is described is outside the scope of the CWM.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a169'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Reference xmi.id = 'a341' name = 'specification' annotation = ''
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a331'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a342'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a326'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a331' name = 'Operation' annotation = 'Operation is a service that can be requested from an object to effect behavior. An Operation has a signature, which describes the parameters that are possible (including possible return values).&#10;&#10;In the metamodel, an Operation is a BehavioralFeature that can be applied to instances of the Classifier that contains the Operation.&#10;&#10;Operation is the specification, while Method is the implementation.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a343' name = 'isAbstract' annotation = 'If true, then the Operation does not have an implementation, and one must be supplied by a descendant. If false, the Operation must have an implementation in the class or inherited from an ancestor.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a118'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Reference xmi.id = 'a344' name = 'method' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a164'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a345'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a326'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a203' name = 'Parameter' annotation = 'Parameters are used in the specification of operations, methods and events. A Parameter may include a name, type, and direction of communication.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a346' name = 'defaultValue' annotation = 'An Expression whose evaluation yields a value to be used when no argument is supplied for the Parameter.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a260'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Attribute xmi.id = 'a347' name = 'kind' annotation = 'Specifies what kind of a Parameter is required.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:EnumerationType xmi.idref = 'a348'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Reference xmi.id = 'a349' name = 'behavioralFeature' annotation = ''
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a326'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a350'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Reference xmi.id = 'a351' name = 'event' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a335'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a352'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Reference xmi.id = 'a353' name = 'type' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a36'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a354'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a17'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:EnumerationType xmi.id = 'a348' name = 'ParameterDirectionKind' annotation = ''
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'>
          <Model:EnumerationType.labels>pdk_in</Model:EnumerationType.labels>
          <Model:EnumerationType.labels>pdk_inout</Model:EnumerationType.labels>
          <Model:EnumerationType.labels>pdk_out</Model:EnumerationType.labels>
          <Model:EnumerationType.labels>pdk_return</Model:EnumerationType.labels>
        </Model:EnumerationType>
        <Model:Tag xmi.id = 'a355' name = 'org.omg.xmi.enumerationUnprefix=pdk_'
          annotation = '' tagId = 'org.omg.xmi.enumerationUnprefix'>
          <Model:Tag.values>pdk_</Model:Tag.values>
          <Model:Tag.elements>
            <Model:EnumerationType xmi.idref = 'a348'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Association xmi.id = 'a356' name = 'BehavioralFeatureParameter' annotation = 'The BehavioralFeatureParameter association identifies and orders Parameter instances describing the parameters of a BehavioralFeature. Parameters may be owned by at most one BehavioralFeature instance. The set of parameters of a BehavioralFeature, together with its name and return value, are said to constitute the BehavioralFeature?s &quot;signature&quot;.'
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'protected_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a350' name = 'behavioralFeature' annotation = ''
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a326'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a329' name = 'parameter' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>true</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a203'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a357' name = 'CallArguments' annotation = 'Identifies the Argument instances representing the actual argument values passed to an Operation during the particular invocation indicated by the CallAction instance. The ordering of actual argument values is assumed to correspond to the ordering of the Operation?s parameters as represented by the ordering of the BehavioralFeatureParameter association.'
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'protected_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a334' name = 'actualArgument' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>true</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a320'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a324' name = 'callAction' annotation = ''
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a323'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a358' name = 'EventParameter' annotation = 'The EventParameter association identifies the set of Parameter instances owned by an Event instance.'
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'protected_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a352' name = 'event' annotation = '' isNavigable = 'true'
              aggregation = 'composite' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a335'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a337' name = 'parameter' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>true</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a203'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a359' name = 'CalledOperation' annotation = 'The CalledOperation association identifies the CallAction instance representing a particular invocation of an Operation.'
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a360' name = 'callAction' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a323'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a332' name = 'operation' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a331'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a361' name = 'OperationMethod' annotation = 'The OperationMethod association links an Operation with the Method instance(s) that realize it. The various Method instances represent alternative implementations (usually in different programming languages or environments) of the Operation.'
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'protected_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a342' name = 'specification' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a331'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a345' name = 'method' annotation = '' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a164'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a362' name = 'ParameterType' annotation = 'The ParameterType association links a Parameter instance with the Classifier that defines the parameter?s type.'
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a363' name = 'parameter' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a203'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a354' name = 'type' annotation = '' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a36'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Tag xmi.id = 'a364' name = 'javax.jmi.packagePrefix=tudresden.ocl20.core.jmi.cwm'
          tagId = 'javax.jmi.packagePrefix'>
          <Model:Tag.values>tudresden.ocl20.core.jmi.cwm</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a85'/>
          </Model:Tag.elements>
        </Model:Tag>
      </Model:Namespace.contents>
    </Model:Package>
    <Model:Package xmi.id = 'a9' name = 'Core' annotation = 'The Core metamodel depends on no other packages.&#10;&#10;The ObjectModel Core metamodel contains basic metamodel classes and associations used by all other CWM metamodel packages, including other ObjectModel packages&#10;&#10;OCL Representation of Core Constraints&#10;&#10;Operations&#10;&#10;The operation allFeatures results in a Set containing all Features of the Classifier itself and all its inherited Features.&#10;   allFeatures : Set(Feature);&#10;   allFeatures = self.feature-&gt;union(self.parent.oclAsType(Classifier).allFeatures)&#10;&#10;The operation allAttributes results in a Set containing all Attributes of the Classifier itself and all its inherited Attributes.&#10;   allAttributes : set(Attribute);&#10;   allAttributes = self.allFeatures-&gt;select(f | f.oclIsKindOf(Attribute))&#10;&#10;The operation specification yields the set of Classifiers that the current Classifier realizes.&#10;   specification: Set(Classifier)&#10;   specification = self.clientDependency-&gt;&#10;   select(d | d.stereotype.name = &quot;realization&quot;&#10;      and d.supplier.oclIsKindOf(Classifier)).supplier.oclAsType(Classifier)&#10;&#10;The operation parent returns a Set containing all direct parents of a Classifier.&#10;   parent : Set(Classifier);&#10;   parent = self.generalization.parent&#10;&#10;The operation allParents returns a Set containing all the Classifiers inherited by this Classifier (the transitive closure), excluding the Classifier itself.&#10;   allParents : Set(Classifier);&#10;   allParents = self.parent-&gt;union(self.parent.allParents)&#10;&#10;The operation allContents returns a Set containing all ModelElements contained in the Classifier together with the contents inherited from its parents.&#10;   allContents : Set(ModelElement);&#10;   allContents = self.contents-&gt;union(self.parent.allContents-&gt;&#10;   select(e | e.elementOwnership.visibility = #public or &#10;      e.elementOwnership.visibility = #protected))&#10;&#10;The operation supplier results in a Set containing all direct suppliers of the ModelElement.&#10;   supplier : Set(ModelElement);&#10;   supplier = self.clientDependency.supplier&#10;&#10;The operation allSuppliers results in a Set containing all the ModelElements that are suppliers of this ModelElement, including the suppliers of these Model Elements. This is the transitive closure.&#10;   allSuppliers : Set(ModelElement);&#10;   allSuppliers = self.supplier-&gt;union(self.supplier.allSuppliers)&#10;&#10;The operation contents results in a Set containing all ModelElements contained by the Namespace.&#10;   contents : Set(ModelElement)&#10;   contents = self.ownedElement -&gt; union(self.namespace.contents)&#10;&#10;The operation allContents results in a Set containing all ModelElements contained by the Namespace.&#10;   allContents : Set(ModelElement);&#10;   allContents = self.contents&#10;&#10;The operation allVisibleElements results in a Set containing all ModelElements visible outside of the Namespace.&#10;   allVisibleElements : Set(ModelElement)&#10;   allVisibleElements = self.allContents -&gt; select(e |&#10;      e.elementOwnership.visibility = #public)&#10;&#10;The operation allSurroundingNamespaces results in a Set containing all surrounding Namespaces.&#10;   allSurroundingNamespaces : Set(Namespace)&#10;   allSurroundingNamespaces =&#10;      self.namespace-&gt;union(self.namespace.allSurroundingNamespaces)&#10;&#10;The operation contents results in a Set containing the ModelElements owned by or imported by the Package.&#10;   contents : Set(ModelElement)&#10;   contents = self.ownedElement-&gt;union(self.importedElement)&#10;&#10;The operation allImportedElements results in a Set containing the ModelElements imported by the Package.&#10;   allImportedElements : Set(ModelElement)&#10;   allImportedElements = self.importedElement&#10;&#10;The operation allContents results in a Set containing the ModelElements owned by or imported by the Package.&#10;   allContents : Set(ModelElement)&#10;   allContents = self.contents&#10;&#10;Constraints&#10;&#10;[C-3-1] A Constraint cannot be applied to itself.&#10;context Constraint inv:&#10;not self.constrainedElement-&gt;includes (self)&#10;&#10;[C-3-2] A DataType cannot contain any other ModelElements.&#10;context DataType inv:&#10;self.ownedElement-&gt;isEmpty&#10;&#10;[C-3-3] Tags associated with a model element (directly via a property list or indirectly via a stereotype) must not clash with any meta attributes associated with the model element.&#10;context ModelElement inv:&#10;-- cannot be specified with OCL'
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'>
      <Model:Namespace.contents>
        <Model:Tag xmi.id = 'a365' name = 'org.omg.mof.idl_prefix=org.omg.cwm.objectmodel'
          annotation = '' tagId = 'org.omg.mof.idl_prefix'>
          <Model:Tag.values>org.omg.cwm.objectmodel</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a9'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Tag xmi.id = 'a366' name = 'org.omg.xmi.namespace=CWM' annotation = ''
          tagId = 'org.omg.xmi.namespace'>
          <Model:Tag.values>CWM</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a9'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Tag xmi.id = 'a367' name = 'org.omg.mof.idl_substitute_name=CoreModule'
          annotation = '' tagId = 'org.omg.mof.idl_substitute_name'>
          <Model:Tag.values>CoreModule</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a9'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Tag xmi.id = 'a368' name = 'com.urep.jcr.java_prefix=org.omg.java.cwm.objectmodel'
          annotation = '' tagId = 'com.urep.jcr.java_prefix'>
          <Model:Tag.values>org.omg.java.cwm.objectmodel</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a9'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Class xmi.id = 'a369' name = 'Element' annotation = 'An element is an atomic constituent of a model. In the metamodel, an Element is the top metaclass in the metaclass hierarchy. Element is an abstract metaclass.&#10;'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis'
          isSingleton = 'false'/>
        <Model:Class xmi.id = 'a17' name = 'ModelElement' annotation = 'A model element is an element that is an abstraction drawn from the system being modeled.&#10;&#10;In the metamodel, a ModelElement is a named entity in a Model. It is the base for all modeling metaclasses in the CWM. All other modeling metaclasses are either direct or indirect subclasses of ModelElement.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a370' name = 'name' annotation = 'An identifier for the ModelElement within its containing Namespace.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a371'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Attribute xmi.id = 'a372' name = 'visibility' annotation = 'Specifies extent of the visibility of the ModelElement within its owning Namespace.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:EnumerationType xmi.idref = 'a373'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Reference xmi.id = 'a374' name = 'clientDependency' annotation = ''
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a375'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a376'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Reference xmi.id = 'a377' name = 'constraint' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a199'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a378'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Reference xmi.id = 'a379' name = 'importer' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a19'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a380'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Reference xmi.id = 'a381' name = 'namespace' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a22'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a23'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Reference xmi.id = 'a382' name = 'taggedValue' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a383'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a384'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a369'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Tag xmi.id = 'a385' name = 'com.urep.jcr.mof.object_name=true' annotation = ''
          tagId = 'com.urep.jcr.mof.object_name'>
          <Model:Tag.values>true</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Attribute xmi.idref = 'a386'/>
            <Model:Attribute xmi.idref = 'a370'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Class xmi.id = 'a22' name = 'Namespace' annotation = 'A namespace is a part of a model that contains a set of ModelElements each of whose&#10;names designates a unique element within the namespace. &#10;&#10;In the metamodel, a Namespace is a ModelElement that can own other ModelElements, such as Classifiers. The name of each owned ModelElement must be unique within the Namespace. Moreover, each contained ModelElement is owned by at most one Namespace. The concrete subclasses of Namespace may have additional constraints on which kind of elements may be contained. &#10;&#10;Namespace is an abstract metaclass.&#10;&#10;Note that explicit parts of a model element, such as the features of a Classifier, are not modeled as owned elements in a namespace. A namespace is used for unstructured contents such as the contents of a  package, or a class declared inside the scope of another class.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a387' name = 'ownedElement' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a17'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a18'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a17'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a36' name = 'Classifier' annotation = 'A classifier is an element that describes structural and behavioral features; it comes in several specific forms, including class, data type, interface, component, and others that are defined in other metamodel packages.&#10;&#10;Classifier is often used as a type.&#10;&#10;In the metamodel, a Classifier may declare a collection of Features, such as Attributes, Operations and Methods. It has a name, which is unique in the Namespace enclosing the Classifier. Classifier is an abstract metaclass.&#10;&#10;Classifier is a child of Namespace. As a Namespace, a Classifier may declare other Classifiers nested in its scope. Nested Classifiers may be accessed by other Classifiers only if the nested Classifiers have adequate visibility. There are no data value or state consequences of nested Classifiers, i.e., it is not an aggregation or composition.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a388' name = 'isAbstract' annotation = 'An abstract Classifier is not instantiable.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a118'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Reference xmi.id = 'a389' name = 'feature' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>true</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a25'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a26'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a22'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a30' name = 'CwmClass' annotation = 'A class is a description of a set of objects that share the same attributes, operations, methods, relationships, and semantics. A class may use a set of interfaces to specify collections of operations it provides to its environment. In the metamodel, a Class describes a set of objects sharing a collection of Features that are common to the set of objects.&#10;&#10;The purpose of a Class is to declare a collection of Features that fully describe the structure and behavior of objects. Some Classes may not be directly instantiated. These Classes are said to be abstract and exist only for other Classes to inherit and reuse the Features declared by them. No object may be a direct instance of an abstract Class, although an object may be an indirect instance of one through a subclass that is non-abstract.&#10;&#10;A Class acts as the namespace for various kinds of contained elements defined within its scope, including classes, interfaces and associations (note that this is purely a scoping construction and does not imply anything about aggregation). The contained classes can be used as ordinary classes in the container class. If a class inherits another class, the contents of the ancestor are available to its descendents if the visibility of an element is public or protected; however, if the visibility is private, then the element is not visible and therefore not available in the descendant.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a36'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a147' name = 'DataType' annotation = 'A data type is a type whose values have no identity (i.e., they are pure values). Data types include primitive built-in types (such as integer and string) as well as definable enumeration types.&#10;&#10;In the metamodel, a DataType defines a special kind of Classifier in which operations are all pure functions (i.e., they can return data values but they cannot change data values, because they have no identity). For example, an &quot;add&quot; operation on a number with another number as an argument yields a third number as a result; the target and argument are unchanged.&#10;&#10;A DataType is a special kind of Classifier whose instances are primitive values, not objects. For example, integers and strings are usually treated as primitive values. A primitive value does not have an identity, so two occurrences of the same value cannot be differentiated. Usually, DataTypes are used for specification of the type of an attribute or parameter.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a36'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a19' name = 'Package' annotation = 'A package is a grouping of model elements.&#10;&#10;In the metamodel, Package is a subclass of Namespace. A Package contains ModelElements such as Packages and Classifiers. A Package may also contain Constraints and Dependencies between ModelElements of the Package.&#10;&#10;The purpose of the package construct is to provide a general grouping mechanism. In fact, its only semantics is to define a namespace for its contents. The package construct can be used for organizing elements for any purpose; the criteria to use for grouping elements together into one package are not defined.&#10;&#10;A package owns a set of model elements, with the implication that if the package is removed from the model, so are the elements owned by the package. Elements with names, such as classifiers, that are owned by the same package must have unique names within the package, although elements in different packages may have the same name.&#10;&#10;There may be relationships between elements contained in the same package, and between an element in one package and an element in a surrounding package at any level. In other words, elements ?see? all the way out through nested levels of packages.&#10;&#10;Elements in peer packages, however, are encapsulated and are not a priori visible to each other. The same goes for elements in contained packages, i.e. packages do not see &quot;inwards&quot;.&#10;&#10;Elements owned by a Package can be made available to other Packages by importing&#10;them. Although any ModelElement may be imported by a Package, imported&#10;ModelElements are typically other Packages. When an element is imported by a&#10;package it extends the namespace of that package. Thus the elements available in a&#10;Package consists of its owned and imported ModelElements.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a390' name = 'importedElement' annotation = ''
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a17'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a391'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a22'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a392' name = 'Subsystem' annotation = 'A subsystem is a grouping of model elements that represents a behavioral unit in a physical system. A subsystem offers interfaces and has operations.&#10;&#10;In the metamodel, Subsystem is a subclass of both Package and Classifier. As such it may have a set of Features.&#10;&#10;The purpose of the subsystem construct is to provide a grouping mechanism for specifying a behavioral unit of a physical system. Apart from defining a namespace for its contents, a subsystem serves as a specification unit for the behavior of its contained model elements.&#10;&#10;The contents of a subsystem is defined in the same way as for a package, thus it&#10;consists of owned elements and imported elements, with unique names within the&#10;subsystem.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a19'/>
            <Model:Class xmi.idref = 'a36'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a393' name = 'Model' annotation = 'A model captures a view of a physical system. It is an abstraction of the physical system, with a certain purpose. The model completely describes those aspects of the physical system that are relevant to the purpose of the model, at the appropriate level of detail.&#10;&#10;In the metamodel, Model is a subclass of Package. It contains a containment hierarchy of ModelElements that together describe the physical system. A Model also contains a set of ModelElements that represents the environment of the system. &#10;&#10;Different Models can be defined for the same physical system, where each model represents a view of the physical system defined by its purpose and abstraction level, e.g. an analysis model, a design model, an implementation model. Typically different models are complementary and defined from the perspectives (viewpoints) of different system stakeholders.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a19'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a25' name = 'Feature' annotation = 'A feature is a property, like attribute or operation, which is encapsulated within a Classifier.&#10;&#10;In the metamodel, a Feature declares a structural or behavioral characteristic of an instance of a Classifier or of the Classifier itself. Feature is an abstract metaclass.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a394' name = 'ownerScope' annotation = 'Specifies whether the Feature appears in every instance of the Classifier or whether it appears only once for the entire Classifier.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:EnumerationType xmi.idref = 'a395'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Reference xmi.id = 'a396' name = 'owner' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a36'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a37'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a17'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a218' name = 'StructuralFeature' annotation = 'A structural feature refers to a static feature of a model element.&#10;&#10;In the metamodel, a StructuralFeature declares a structural aspect of a Classifier that is typed, such as an attribute. For example, it specifies the multiplicity and changeability of the StructuralFeature. StructuralFeature is an abstract metaclass.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a397' name = 'changeability' annotation = 'Specifies whether the value may be modified after the object is created.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:EnumerationType xmi.idref = 'a398'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Attribute xmi.id = 'a399' name = 'multiplicity' annotation = 'The possible number of data values for the feature that may be held by an instance. The cardinality of the set of values is an implicit part of the feature. In the common case in which the multiplicity is 1..1, then the feature is a scalar (i.e., it holds exactly one value).'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a400'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Attribute xmi.id = 'a401' name = 'ordering' annotation = 'Specifies whether the set of instances is ordered. The ordering must be determined and maintained by Operations that add values to the feature. This property is only relevant if the multiplicity is greater than one.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:EnumerationType xmi.idref = 'a402'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Attribute xmi.id = 'a403' name = 'targetScope' annotation = 'Specifies whether the targets are ordinary Instances or are Classifiers.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:EnumerationType xmi.idref = 'a395'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Reference xmi.id = 'a404' name = 'type' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a36'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a405'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a25'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a38' name = 'Attribute' annotation = 'An Attribute describes a named slot within a classifier that may hold a value.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a406' name = 'initialValue' annotation = 'An Expression specifying the value of the attribute upon initialization. It is meant to be evaluated at the time the object is initialized. (Note that an explicit constructor may supersede an initial value.)'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a260'/>
              </Model:TypedElement.type>
            </Model:Attribute>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a218'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Tag xmi.id = 'a407' name = 'org.omg.mof.idl_substitute_name=UmlAttribute'
          annotation = '' tagId = 'org.omg.mof.idl_substitute_name'>
          <Model:Tag.values>UmlAttribute</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Class xmi.idref = 'a38'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Class xmi.id = 'a199' name = 'Constraint' annotation = 'A constraint is a semantic condition or restriction expressed in text.&#10;&#10;In the metamodel, a Constraint is a BooleanExpression on an associated ModelElement(s) which must be true for the model to be well formed. This restriction can be stated in natural language, or in different kinds of languages with well-defined semantics. Certain Constraints are predefined, others may be user defined. Note that a Constraint is an assertion, not an executable mechanism.&#10;&#10;The specification is written as an expression in a designated constraint language. The language can be specially designed for writing constraints (such as OCL), a programming language, mathematical notation, or natural language. If constraints are to be enforced by a model editor tool, then the tool must understand the syntax and semantics of the constraint language. Because the choice of language is arbitrary, constraints can be used as an extension mechanism.&#10;&#10;The constraint concept allows new semantics to be specified linguistically for a model element. In the metamodel a Constraint directly attached to a ModelElement describes semantic restrictions that this ModelElement must obey.&#10;'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a408' name = 'body' annotation = 'A BooleanExpression that must be true when evaluated for an instance of a system to be well-formed. A boolean expression defining the constraint. Expressions are written as strings in a designated language. For the model to be well formed, the expression must always yield a true value when evaluated for instances of the constrained elements at any time when the system is stable (i.e., not during the execution of an atomic operation).'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a167'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Reference xmi.id = 'a409' name = 'constrainedElement' annotation = ''
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>true</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a17'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a410'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a17'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Tag xmi.id = 'a411' name = 'org.omg.mof.idl_substitute_name=UmlConstraint'
          annotation = '' tagId = 'org.omg.mof.idl_substitute_name'>
          <Model:Tag.values>UmlConstraint</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Class xmi.idref = 'a199'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Class xmi.id = 'a375' name = 'Dependency' annotation = 'A dependency states that the implementation or functioning of one or more elements requires the presence of one or more other elements.&#10;&#10;In the metamodel, a Dependency is a directed relationship from a client (or clients) to a supplier (or suppliers) stating that the client is dependent on the supplier (i.e., the client element requires the presence and knowledge of the supplier element).&#10;&#10;A dependency specifies that the semantics of a set of model elements requires the presence of another set of model elements. This implies that if the source is somehow modified, the dependents probably must be modified. The reason for the dependency can be specified in several different ways (e.g., using natural language or an algorithm) but is often implicit.&#10;&#10;Whenever the supplier element of a dependency changes, the client element is potentially invalidated. After such invalidation, a check should be performed followed by possible changes to the derived client element. Such a check should be performed after which action can be taken to change the derived element to validate it again.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a412' name = 'kind' annotation = 'Contains a description of the nature of the dependency relationship between the client and supplier. The list of possible values is open-ended. However, CWM predefines the values &quot;Abstraction&quot; and &quot;Usage&quot;.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a14'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Reference xmi.id = 'a413' name = 'client' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a17'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a414'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Reference xmi.id = 'a415' name = 'supplier' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a17'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a416'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a17'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a260' name = 'Expression' annotation = 'In the metamodel an Expression defines a statement which will evaluate to a (possibly empty) set of instances when executed in a context. An Expression does not modify the environment in which it is evaluated. An expression contains an expression string and the name of an interpretation language with which to evaluate the string.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a417' name = 'body' annotation = 'The text of the expression expressed in the given language.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a14'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Attribute xmi.id = 'a418' name = 'language' annotation = 'Names the language in which the expression body is represented. The interpretation of the expression depends on the language. If the language name is omitted, no interpretation for the expression can be assumed. In general, a language name should be spelled and capitalized exactly as it appears in the document defining the language. For example, use COBOL, not Cobol; use Ada, not ADA; use PostScript, not Postscript.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a371'/>
              </Model:TypedElement.type>
            </Model:Attribute>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a369'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a167' name = 'BooleanExpression' annotation = 'In the metamodel BooleanExpression defines a statement which will evaluate to an instance of Boolean when it is evaluated.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a260'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a169' name = 'ProcedureExpression' annotation = 'In the metamodel ProcedureExpression defines a statement which will result in a change to the values of its environment when it is evaluated.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a260'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a400' name = 'Multiplicity' annotation = 'In the metamodel a Multiplicity defines a non-empty set of non-negative integers. A set which only contains zero ({0}) is not considered a valid Multiplicity. Every Multiplicity has at least one corresponding String  representation.&#10;'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a419' name = 'range' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a420'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a421'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a369'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a420' name = 'MultiplicityRange' annotation = 'In the metamodel a MultiplicityRange defines a range of integers. The upper bound of the range cannot be below the lower bound. The lower bound must be a nonnegative integer. The upper bound must be a nonnegative integer or the special value unlimited, which indicates there is no upper bound on the range. &#10;'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a422' name = 'lower' annotation = 'Specifies the positive integer lower bound of the range.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a132'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Attribute xmi.id = 'a423' name = 'upper' annotation = 'Specifies the upper bound of the range, which is a positive integer or the special value ?unlimited? indicating no upper bound is defined.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a424'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Reference xmi.id = 'a425' name = 'multiplicity' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a400'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a426'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a369'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a427' name = 'Stereotype' annotation = 'The stereotype concept provides a way of branding (classifying) model elements so that they behave as if they were instances of new virtual metamodel constructs. These model elements have the same structure (attributes, associations, operations) as similar non-stereotyped model elements of the same kind. The stereotype may specify additional constraints and required tagged values that apply to model elements. In addition, a stereotype may be used to indicate a difference in meaning or usage between two model elements with identical structure.&#10;&#10;In the metamodel the Stereotype metaclass is a subclass of ModelElement. Tagged Values and Constraints attached to a Stereotype apply to all ModelElements branded by that Stereotype.&#10;&#10;A stereotype keeps track of the base class to which it may be applied. The base class is a class in the metamodel (not a user-level modeling element) such as Class, Association, etc. If a model element is branded by an attached stereotype, then the CWM base class of the model element must be the base class specified by the stereotype or one of the subclasses of that base class.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a428' name = 'baseClass' annotation = 'Specifies the name of a modeling element to which the stereotype applies, such as Class, Association, Constraint, etc. This is the name of a metaclass, that is, a class from the metamodel itself rather than a user model class.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a371'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Reference xmi.id = 'a429' name = 'extendedElement' annotation = ''
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a17'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a430'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Reference xmi.id = 'a431' name = 'requiredTag' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a383'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a432'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Reference xmi.id = 'a433' name = 'stereotypeConstraint' annotation = ''
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a199'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a434'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a17'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a383' name = 'TaggedValue' annotation = 'A tagged value allows information to be attached to any model element in the form of a &quot;tagged value&quot; pair (i.e., name = value). The interpretation of tagged value semantics is intentionally beyond the scope of CWM. It must be determined by user or tool conventions. It is expected that tools will define tags to supply information needed for their operations beyond the basic semantics of CWM. Such information could include code generation options, model management information, or user-specified semantics.&#10;&#10;Even though TaggedValues are a simple and straightforward extension technique, their use restricts semantic interchange of metadata to only those tools that share a common understanding of the specific tagged value names.'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a386' name = 'tag' annotation = 'Contains the name of the TaggedValue. This name determines the semantics that are applicable to the contents of the value attribute.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a371'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Attribute xmi.id = 'a435' name = 'value' annotation = 'Contains the current value of the TaggedValue.'
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:AliasType xmi.idref = 'a14'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Reference xmi.id = 'a436' name = 'modelElement' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a17'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a437'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Reference xmi.id = 'a438' name = 'stereotype' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a427'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a439'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a369'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Tag xmi.id = 'a440' name = 'org.omg.mof.idl_substitute_name=umlValue'
          annotation = '' tagId = 'org.omg.mof.idl_substitute_name'>
          <Model:Tag.values>umlValue</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Attribute xmi.idref = 'a435'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:AliasType xmi.id = 'a441' name = 'String' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'>
          <Model:TypedElement.type>
            <Model:PrimitiveType xmi.idref = 'a442'/>
          </Model:TypedElement.type>
        </Model:AliasType>
        <Model:AliasType xmi.id = 'a118' name = 'Boolean' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'>
          <Model:TypedElement.type>
            <Model:PrimitiveType xmi.idref = 'a443'/>
          </Model:TypedElement.type>
        </Model:AliasType>
        <Model:AliasType xmi.id = 'a444' name = 'Float' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'>
          <Model:TypedElement.type>
            <Model:PrimitiveType xmi.idref = 'a445'/>
          </Model:TypedElement.type>
        </Model:AliasType>
        <Model:AliasType xmi.id = 'a132' name = 'Integer' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'>
          <Model:TypedElement.type>
            <Model:PrimitiveType xmi.idref = 'a446'/>
          </Model:TypedElement.type>
        </Model:AliasType>
        <Model:AliasType xmi.id = 'a371' name = 'Name' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'>
          <Model:TypedElement.type>
            <Model:PrimitiveType xmi.idref = 'a442'/>
          </Model:TypedElement.type>
        </Model:AliasType>
        <Model:AliasType xmi.id = 'a14' name = 'String' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'>
          <Model:TypedElement.type>
            <Model:PrimitiveType xmi.idref = 'a442'/>
          </Model:TypedElement.type>
        </Model:AliasType>
        <Model:AliasType xmi.id = 'a447' name = 'Time' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'>
          <Model:TypedElement.type>
            <Model:PrimitiveType xmi.idref = 'a442'/>
          </Model:TypedElement.type>
        </Model:AliasType>
        <Model:AliasType xmi.id = 'a424' name = 'UnlimitedInteger' annotation = ''
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'>
          <Model:TypedElement.type>
            <Model:PrimitiveType xmi.idref = 'a446'/>
          </Model:TypedElement.type>
        </Model:AliasType>
        <Model:EnumerationType xmi.id = 'a398' name = 'ChangeableKind' annotation = ''
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'>
          <Model:EnumerationType.labels>ck_changeable</Model:EnumerationType.labels>
          <Model:EnumerationType.labels>ck_frozen</Model:EnumerationType.labels>
          <Model:EnumerationType.labels>ck_addOnly</Model:EnumerationType.labels>
        </Model:EnumerationType>
        <Model:Tag xmi.id = 'a448' name = 'org.omg.xmi.enumerationUnprefix=ck_'
          annotation = '' tagId = 'org.omg.xmi.enumerationUnprefix'>
          <Model:Tag.values>ck_</Model:Tag.values>
          <Model:Tag.elements>
            <Model:EnumerationType xmi.idref = 'a398'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:EnumerationType xmi.id = 'a402' name = 'OrderingKind' annotation = ''
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'>
          <Model:EnumerationType.labels>ok_unordered</Model:EnumerationType.labels>
          <Model:EnumerationType.labels>ok_ordered</Model:EnumerationType.labels>
        </Model:EnumerationType>
        <Model:Tag xmi.id = 'a449' name = 'org.omg.xmi.enumerationUnprefix=ok_'
          annotation = '' tagId = 'org.omg.xmi.enumerationUnprefix'>
          <Model:Tag.values>ok_</Model:Tag.values>
          <Model:Tag.elements>
            <Model:EnumerationType xmi.idref = 'a402'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:EnumerationType xmi.id = 'a395' name = 'ScopeKind' annotation = ''
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'>
          <Model:EnumerationType.labels>sk_instance</Model:EnumerationType.labels>
          <Model:EnumerationType.labels>sk_classifier</Model:EnumerationType.labels>
        </Model:EnumerationType>
        <Model:Tag xmi.id = 'a450' name = 'org.omg.xmi.enumerationUnprefix=sk_'
          annotation = '' tagId = 'org.omg.xmi.enumerationUnprefix'>
          <Model:Tag.values>sk_</Model:Tag.values>
          <Model:Tag.elements>
            <Model:EnumerationType xmi.idref = 'a395'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:EnumerationType xmi.id = 'a373' name = 'VisibilityKind' annotation = ''
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'>
          <Model:EnumerationType.labels>vk_public</Model:EnumerationType.labels>
          <Model:EnumerationType.labels>vk_protected</Model:EnumerationType.labels>
          <Model:EnumerationType.labels>vk_private</Model:EnumerationType.labels>
          <Model:EnumerationType.labels>vk_package</Model:EnumerationType.labels>
          <Model:EnumerationType.labels>vk_notapplicable</Model:EnumerationType.labels>
        </Model:EnumerationType>
        <Model:Tag xmi.id = 'a451' name = 'org.omg.xmi.enumerationUnprefix=vk_'
          annotation = '' tagId = 'org.omg.xmi.enumerationUnprefix'>
          <Model:Tag.values>vk_</Model:Tag.values>
          <Model:Tag.elements>
            <Model:EnumerationType xmi.idref = 'a373'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Association xmi.id = 'a452' name = 'ClassifierFeature' annotation = 'The ClassifierFeature association provides a composite aggregation containment relationship between Classifiers and the Features they own. The feature end of the association is ordered allowing preservation of the ordering of Features within their owning Classifier. A Feature can be owned by at most one Classifier. The optional character of ownership is intended as a convenience to tools, allowing them to create Features prior to linking them to their owning Classifier.'
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'protected_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a37' name = 'owner' annotation = '' isNavigable = 'true'
              aggregation = 'composite' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a36'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a26' name = 'feature' annotation = '' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>true</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a25'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a453' name = 'DependencyClient' annotation = 'The DependencyClient association links Dependency instances with ModelElements that act as clients in the represented dependency relationship.'
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'protected_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a414' name = 'client' annotation = '' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a17'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a376' name = 'clientDependency' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a375'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a454' name = 'DependencySupplier' annotation = 'The DependencySupplier association links Dependency instances with ModelElements that act as suppliers in the represented dependency relationship.'
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a416' name = 'supplier' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a17'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a455' name = 'supplierDependency' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a375'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a456' name = 'ElementConstraint' annotation = 'The ElementConstraint association provides linkages between ModelElements and the Constraint instances that constrain their state. Note that a Constraint instance may not simultaneously participate in both the ElementConstraint and the StereotypeConstraint associations.'
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'protected_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a410' name = 'constrainedElement' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>true</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a17'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a378' name = 'constraint' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a199'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Tag xmi.id = 'a457' name = 'org.omg.mof.idl_substitute_name=umlConstraint'
          annotation = '' tagId = 'org.omg.mof.idl_substitute_name'>
          <Model:Tag.values>umlConstraint</Model:Tag.values>
          <Model:Tag.elements>
            <Model:AssociationEnd xmi.idref = 'a378'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Association xmi.id = 'a458' name = 'ElementOwnership' annotation = 'The ElementOwnership association identifies ModelElements owned by Namespaces. ModelElements may be owned by at most one Namespace. Refer to the above discussion of the Namespace class for more information on the nature of the ownership relationship between Namespaces and ModelElements.'
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'protected_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a18' name = 'ownedElement' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a17'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a23' name = 'namespace' annotation = ''
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a22'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a459' name = 'ImportedElements' annotation = 'The ImportedElements association identifies ModelElements that a Package instance imports from other Namespaces. Although any ModelElement may be imported by a Package, imported ModelElements are typically other Packages or aggregate Classifiers, such as Class instances.'
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'protected_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a391' name = 'importedElement' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a17'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a380' name = 'importer' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a19'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a460' name = 'RangeMultiplicity' annotation = 'The RangeMultiplicity association identifies the set of MultiplicityRange instances that specify the lower and upper bounds of individual cardinality ranges defined by a Multiplicity instance. A MultiplicityRange instance must be owned by a single Multiplicity instance.'
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'protected_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a426' name = 'multiplicity' annotation = ''
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a400'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a421' name = 'range' annotation = '' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a420'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a461' name = 'StereotypeConstraints' annotation = 'The StereotypeConstraints association links Stereotypes with Constraints that further restrict the states that a stereotyped ModelElement may assume. A Constraint instance may not simultaneously participate in both the StereotypeContraints association and the ElementConstraint association.'
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a434' name = 'stereotypeConstraint' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a199'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a462' name = 'constrainedStereotype' annotation = ''
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a427'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a463' name = 'StereotypedElement' annotation = 'The StereotypedElement association links Stereotypes with the ModelElements to which they apply. '
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a430' name = 'extendedElement' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a17'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a464' name = 'stereotype' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a427'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a465' name = 'StereotypeTaggedValues' annotation = 'The StereotypeTaggedValues association links Stereotypes with the set of TaggedValues they require.&#10;&#10;TaggedValues cannot simultaneously participate in both the TaggedElement and StereotypeTaggedValues associations.'
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'protected_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a432' name = 'requiredTag' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a383'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a439' name = 'stereotype' annotation = ''
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a427'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a466' name = 'StructuralFeatureType' annotation = 'The StructuralFeatureType association identifies the Classifier instance that defines the type of particular StructuralFeatures. A StructuralFeature instance must have a Classifier instance that defines its type.'
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a467' name = 'structuralFeature' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a218'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a405' name = 'type' annotation = '' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a36'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a468' name = 'TaggedElement' annotation = 'The TaggedElement association links TaggedValues with the ModelElements that own them.&#10;&#10;TaggedValues cannot simultaneously participate in both the TaggedElement and StereotypeTaggedValues associations.&#10;&#10;'
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a437' name = 'modelElement' annotation = ''
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a17'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a384' name = 'taggedValue' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a383'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Import xmi.id = 'a469' name = 'PrimitiveTypes' annotation = '' visibility = 'public_vis'
          isClustered = 'false'>
          <Model:Import.importedNamespace>
            <Model:Package xmi.idref = 'a2'/>
          </Model:Import.importedNamespace>
        </Model:Import>
        <Model:Tag xmi.id = 'a470' name = 'javax.jmi.packagePrefix=tudresden.ocl20.core.jmi.cwm'
          tagId = 'javax.jmi.packagePrefix'>
          <Model:Tag.values>tudresden.ocl20.core.jmi.cwm</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a9'/>
          </Model:Tag.elements>
        </Model:Tag>
      </Model:Namespace.contents>
    </Model:Package>
    <Model:Package xmi.id = 'a2' name = 'PrimitiveTypes' annotation = '' isRoot = 'false'
      isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'>
      <Model:Namespace.contents>
        <Model:PrimitiveType xmi.id = 'a443' name = 'Boolean' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'/>
        <Model:PrimitiveType xmi.id = 'a471' name = 'Double' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'/>
        <Model:PrimitiveType xmi.id = 'a445' name = 'Float' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'/>
        <Model:PrimitiveType xmi.id = 'a446' name = 'Integer' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'/>
        <Model:PrimitiveType xmi.id = 'a472' name = 'Long' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'/>
        <Model:PrimitiveType xmi.id = 'a442' name = 'String' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'/>
      </Model:Namespace.contents>
    </Model:Package>
  </XMI.content>
</XMI>
