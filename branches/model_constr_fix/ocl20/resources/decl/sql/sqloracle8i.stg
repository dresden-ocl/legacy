group sqloracle;

// --- OCL INVARIANT --- 
constraint_body(constraint_name,context,context_alias,expression) ::= <<
create or replace view $constraint_name$ as
(select * from $context$ $context_alias$
where not ($expression$))
>>

literal_collection_bag_item(item) ::= <<
select $item$ as elem from DUAL
>>


// ---  COLLECTIONS - SEQUENCE (QUERY) --- 
literal_collection_sequence(items) ::= <<
$items:literal_collection_sequence_item(); separator="\nunion\n"$
>>

literal_collection_sequence_item(item) ::= <<
select $item$ as elem, $i$ as seqno from DUAL
>>


// ---  COLLECTIONS - SET (QUERY) --- 
literal_collection_set_item(item) ::= <<
select $item$ as elem from DUAL
>>


// --- IF EXPRESSION ---
if_expression(if_branch,then_branch,else_branch) ::= <<
!!! no if-expressions supported !!!
>>


// -- ITERATOR FORALL (QUERY) ---
feature_call_forall(source,alias,object,collection,expression) ::= <<
not exists (
  $collection$ minus
     select $object$ from $source$ $alias$
     where $expression$
  )
>>

// -- ITERATOR REJECT (QUERY) ---
feature_call_reject(source,alias,object,collection,expression) ::= <<
($collection$ minus
  select $object$ from $source$ $alias$
  where ($expression$))
>>

// -- ITERATOR SELECT (QUERY) ---
feature_call_select(source,alias,object,collection,expression) ::= <<
$collection$ minus
  select $object$ from $source$ $alias$
  where not ($expression$))
>>


// --- COLLECTION RELATED OPERATIONS ---
feature_call_count(source,element,collection,object) ::= <<
(select NVL(COUNT(*),0)
  from $source$
  where $element$ in $collection$
  and $element$ = $object$)
>>

feature_call_exists(source,object,collection,expression) ::= <<
exists (
  ($collection$) intersect
  select $object$ from $source$
  where $expression$
)
>>

feature_call_size(source,element,collection) ::= <<
(select NVL(COUNT(*),0)
  from $source$
  where $element$ in $collection$)
>>

feature_call_sum(source,element,collection) ::= <<
(select NVL(SUM($element$),0)
  from $source$
  where $element$ in $collection$)
>>

feature_call_excludes(object,collection) ::= <<
not exists (
  select $object$ from DUAL
  intersect
  ($collection$))
>>

feature_call_includes(object,collection) ::= <<
exists (
  select $object$ from DUAL
  intersect
  ($collection$))
>>

feature_call_excludesall(collection,collection2) ::= <<
not exists (
  ($collection2$)
  intersect
  ($collection$))
>>

feature_call_includesall(collection,collection2) ::= <<
not exists (
  ($collection2$)
  minus
  ($collection$))
>>

feature_call_including_bag(collection,object) ::= <<
($collection$ union all
  select $object$ from DUAL)
>>

feature_call_including_sequence(collection,object) ::= <<
($collection$)
  union
  (select $object$, ((select max(SEQNO) from ($collection$)) + 1) as SEQNO from DUAL)
>>

feature_call_including_set(collection,object) ::= <<
($collection$ union
  select $object$ from DUAL)
>>

feature_call_excluding_bag(collection,object,element) ::= <<
($collection$ minus
  select $object$ from DUAL)
>>

feature_call_excluding_sequence(collection,object,element) ::= <<
select $element$,
  (select count(*)+1 from (
    select $element$, SEQNO
    from $collection$
    where not ($element$ = $object$)
  ) where SEQNO < s.SEQNO) as SEQNO
  from (
    select $element$, SEQNO
    from $collection$
    where not ($element$ = $object$)
  ) s
>>

feature_call_excluding_set(collection,object,element) ::= <<
($collection$ minus
  select $object$ from DUAL)
>>

feature_call_union_bag(collection,collection2,element) ::= <<
($collection$ union all
  $collection2$)
>>

feature_call_string_concat(operand1,operand2) ::= <<
$operand1$ + $operand2$
>>

feature_call_string_substring(operand,start,end) ::= <<
SUBSTR($operand$, $start$, $end$ - $start$ + 1)
>>

feature_call_int_max(operand1,operand2) ::= <<
GREATEST ($operand1$,$operand2$)
>>

feature_call_int_min(operand1,operand2) ::= <<
LEAST ($operand1$,$operand2$)
>>

feature_call_int_mod(operand1,operand2) ::= <<
$operand1$ - $operand2$ * FLOOR($operand1$/$operand2$)
>>