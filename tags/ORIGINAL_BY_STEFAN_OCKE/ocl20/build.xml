<?xml version="1.0"?>

<!--
dresden-ocl 2.0 build file

Process this file with ant (http://jakarta.apache.org).

-->

<project name="dresden-ocl2.0" default="all" basedir=".">

  <property environment="env" /> <!-- include environment variables -->

  <property name="src.dir"   value="${basedir}/src" />
  <property name="lib.dir"   value="${basedir}/lib" />
  <property name="res.dir"   value="${basedir}/res" />
  <property name="build.dir" value="${basedir}/build" />
  <property name="jar.dir" value="${basedir}/jar" />
  <property name="build.api.dir" value="${build.dir}/api" />
  <property name="build.tools.dir" value="${build.dir}/tools" />

  <property name="dist.dir"  value="${basedir}/dist" />
  <property name="docs.dir"  value="${basedir}/api"   />

  <property name="jmi.jar" value="${lib.dir}/jmi.jar" />
  <property name="jmiutils.jar" value="${lib.dir}/jmiutils.jar" />
  <property name="mdrapi.jar" value="${lib.dir}/mdrapi.jar" />
  <property name="mof.jar" value="${lib.dir}/mof.jar" />
  <property name="nbmdr.jar" value="${lib.dir}/nbmdr.jar" />
  <property name="openide.jar" value="${lib.dir}/openide.jar" />




  <target name="info">
    <echo message="Target info is obsolete, use ant -projecthelp instead." />
  </target>

  <target name="prepare">
    <echo message="JDK ${java.version} found, make sure, it is at least 1.4." />
    <echo message="${ant.version} found, make sure it is at least 1.4." />
    
  </target>


  <target name="build.dir" depends="prepare">
    <mkdir dir="${build.dir}"/>
	<mkdir dir="${build.tools.dir}"/>
	<mkdir dir="${build.api.dir}"/>
  </target>
  



  <target name="compile.metamodel-integrator"
          description="Compiles the MetaModelIntegrator." depends = "build.dir">
	
    <javac srcdir= "${src.dir}"
           destdir="${build.tools.dir}"
           deprecation="on"
           debug="on"
           depend="${build.depend}"
           optimize="off">
      <include name="tudresden/ocl20/MetaModelIntegrator.java" />
      <classpath>
        <pathelement location="${jmi.jar}" />
        <pathelement location="${jmiutils.jar}" />
        <pathelement location="${mdrapi.jar}" />
        <pathelement location="${mof.jar}" />
	<pathelement location="${nbmdr.jar}" />
	<pathelement location="${openide.jar}" />
      </classpath>
    </javac>
  </target>

<target name="metamodel-integrator.checkrequired">

	<uptodate property="metamodel-integrator.notRequired" targetfile="${res.dir}/generatedJMI/.flagfile">
	<srcfiles dir="${res.dir}/OCLMetamodel" includes="OCL.xml"/>
	<srcfiles dir="${res.dir}/OCLMetamodel" includes="MOF14OCL.xml"/>
	<srcfiles dir="${res.dir}/OCLMetamodel" includes="UML15OCL.xml"/>


</uptodate>
</target>

 <target name="metamodel-integrator"
          description="Runs the MetaModelIntegrator to integrate the OCL metamodel with UML and MOF and generate the API" depends = "compile.metamodel-integrator, metamodel-integrator.checkrequired" unless="metamodel-integrator.notRequired">
    <java classname="tudresden.ocl20.MetaModelIntegrator"  fork="true">

      <classpath>
		<pathelement location="${res.dir}" />
		<pathelement location="${build.tools.dir}" />
      	<pathelement location="${jmi.jar}" />
      	<pathelement location="${jmiutils.jar}" />
      	<pathelement location="${mdrapi.jar}" />
      	<pathelement location="${mof.jar}" />
		<pathelement location="${nbmdr.jar}" />
		<pathelement location="${openide.jar}" />
      </classpath>
    </java>

  <echo file="${res.dir}/generatedJMI/.flagfile" message="This file helps ANT to detect the uptodate state of the API generated from the OCL-Metamodel."/>
  </target>


<target name="compile.api"
          description="Compiles the jmi-ocl-api." depends = "metamodel-integrator">
    <javac srcdir= "${res.dir}/generatedJMI"
           destdir="${build.api.dir}"
           deprecation="on"
           debug="on"
           depend="${build.depend}"
           optimize="off">
      <classpath>
        <pathelement location="${jmi.jar}" />
        <pathelement location="${jmiutils.jar}" />
        <pathelement location="${mdrapi.jar}" />
        <pathelement location="${mof.jar}" />
	<pathelement location="${nbmdr.jar}" />
	<pathelement location="${openide.jar}" />
      </classpath>
    </javac>
  </target>

<target name="compile"
          description="Compiles all java files in the source directory." depends = "compile.api">
    <javac srcdir= "${src.dir}"
           destdir="${build.tools.dir}"
           deprecation="on"
           debug="on"
           depend="${build.depend}"
           optimize="off">
      <classpath>
	  <pathelement location="${build.api.dir}" />
        <pathelement location="${jmi.jar}" />
        <pathelement location="${jmiutils.jar}" />
        <pathelement location="${mdrapi.jar}" />
        <pathelement location="${mof.jar}" />
	<pathelement location="${nbmdr.jar}" />
	<pathelement location="${openide.jar}" />
      </classpath>
    </javac>
  </target>

  <target name="jar.dir" depends="prepare">
    <mkdir dir="${jar.dir}"/>
  </target>

  <target name="jar.api"
          description="Creates the JAR-File for the OCL JMI API"
          depends="compile.api,jar.dir">
    <jar jarfile="${jar.dir}/ocl20jmiapi.jar"
         basedir="${build.api.dir}/"
    />
  </target>

 <target name="jar.tools"
          description="Creates the JAR-File for the OCL toolset (type-evaluator, code-generator, workbench and repository utilities)"
          depends="compile,jar.dir">
    <jar jarfile="${jar.dir}/ocl20.jar"
         basedir="${build.tools.dir}/"
    />
  </target>

  <target name="jar"
          description="Builds all jar files."
	depends="jar.api,jar.tools"
          
  />


  <target name="compile.clean">
    <delete>
      <fileset dir="${build.tools.dir}" includes="**/*.class" />
	<fileset dir="${build.api.dir}" includes="**/*.class" />
    </delete>
  </target>

<target name="jar.clean">
    <delete>
      <fileset dir="${jar.dir}" includes="*.jar" />
    </delete>
  </target>

  
  


  <target name="clean"
          description="Deletes all generated files except API documentation and distributions."
          depends="compile.clean, jar.clean"
  >
    <delete dir="${build.dir}"/>
<delete dir="${jar.dir}"/>
  </target>


  <target name="docs"
          description="Builds Javadoc API documentation.">
    <!--
    Requires JDK 1.2.2 or higher, since previous versions did not
    allow multiple -link or -linkoffline arguments."
    -->

    <delete dir="${docs.dir}" />
    <mkdir  dir="${docs.dir}" />

  </target>

  <target name="docs.clean"
          description="Removes Javadoc API documentation.">
    <delete dir="${docs.dir}" />
  </target>




  <target name="all"
          description="Does everything except dist: compile, test, jar and docs."
          depends="compile, jar, docs"
  />


  <!-- Creating Distributions -->

 <target name="dist.dir" depends="prepare">
    <mkdir dir="${dist.dir}"/>
  </target>



<target name="dist.src" depends="dist.dir"
  >
    <tar tarfile="${dist.dir}/ocl20src.tar" basedir="${basedir}" excludes="jar/**,dist/**,build/**" />


    <gzip     src="${dist.dir}/ocl20src.tar"
          zipfile="${dist.dir}/ocl20src.tar.gz"
    />
  </target>

<target name="dist.bin" depends="dist.dir,jar"
  >
    <tar tarfile="${dist.dir}/ocl20bin.tar" basedir="${basedir}" excludes="src/**,dist/**,build/**,res/generatedJMI/**" />


    <gzip     src="${dist.dir}/ocl20bin.tar"
          zipfile="${dist.dir}/ocl20bin.tar.gz"
    />
  </target>

      



  <target name="dist"
          description="Build a release. Needs the release version in property dist.version."
          depends="dist.bin,dist.src"
  >
    
    
  </target>


</project>
