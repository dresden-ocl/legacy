<?xml version="1.0" encoding="UTF-8"?>
<xocl:NamespaceXS xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xocl="http://www.tu-dresden.de/ocl20/pivot/2007/xocl" pathName="pml">
  <ownedRule name="BooleanLiteralExp-false" constrainedElement="Plugin">
    <specification body="false">
      <bodyExpression xsi:type="xocl:BooleanLiteralExpXS"/>
    </specification>
  </ownedRule>
  <ownedRule name="BooleanLiteralExp-true" constrainedElement="Plugin">
    <specification body="true">
      <bodyExpression xsi:type="xocl:BooleanLiteralExpXS" booleanSymbol="true"/>
    </specification>
  </ownedRule>
  <ownedRule name="IntegerLiteralExp-1" constrainedElement="Plugin">
    <specification body="1">
      <bodyExpression xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="1"/>
    </specification>
  </ownedRule>
  <ownedRule name="RealLiteralExp-4.5" constrainedElement="Plugin">
    <specification body="4.5">
      <bodyExpression xsi:type="xocl:RealLiteralExpXS" realSymbol="4.5"/>
    </specification>
  </ownedRule>
  <ownedRule name="StringLiteralExp-String" constrainedElement="Plugin">
    <specification body="'String'">
      <bodyExpression xsi:type="xocl:StringLiteralExpXS" stringSymbol="String"/>
    </specification>
  </ownedRule>
  <ownedRule name="EnumLiteralExp" constrainedElement="Plugin">
    <specification body="pml::SampleEnum::ValueOne">
      <bodyExpression xsi:type="xocl:EnumLiteralExpXS" referredEnumLiteralPathName="pml::SampleEnum::ValueOne"/>
    </specification>
  </ownedRule>
  <ownedRule name="EnumProperty" constrainedElement="Plugin">
    <specification body="self.value">
      <bodyExpression xsi:type="xocl:PropertyCallExpXS" referredPropertyName="value">
        <source xsi:type="xocl:VariableExpXS" referredVariable="//@ownedRule.6/@specification/@context"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="TupleLiteralExp" constrainedElement="Plugin">
    <specification body="Tuple{name : String = 'Name', age : Integer = 26}">
      <bodyExpression xsi:type="xocl:TupleLiteralExpXS">
        <part>
          <variableDeclaration name="name" type="String">
            <initExpression xsi:type="xocl:StringLiteralExpXS" stringSymbol="Name"/>
          </variableDeclaration>
        </part>
        <part>
          <variableDeclaration name="age" type="Integer">
            <initExpression xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="26"/>
          </variableDeclaration>
        </part>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="CollectionLiteralItem-Bag" constrainedElement="Plugin" definedFeature="">
    <specification body="Bag{1,2,3,5-9,2-6}">
      <bodyExpression xsi:type="xocl:CollectionLiteralExpXS" kind="Bag">
        <part xsi:type="xocl:CollectionItemXS">
          <item xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="1"/>
        </part>
        <part xsi:type="xocl:CollectionItemXS">
          <item xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="2"/>
        </part>
        <part xsi:type="xocl:CollectionItemXS">
          <item xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="3"/>
        </part>
        <part xsi:type="xocl:CollectionRangeXS">
          <last xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="9"/>
          <first xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="5"/>
        </part>
        <part xsi:type="xocl:CollectionRangeXS">
          <last xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="6"/>
          <first xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="2"/>
        </part>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="CollectionLiteralItem-OrderedSet" constrainedElement="Plugin" definedFeature="">
    <specification body="OrderedSet{1,2,3,5-9,2-6}">
      <bodyExpression xsi:type="xocl:CollectionLiteralExpXS" kind="OrderedSet">
        <part xsi:type="xocl:CollectionItemXS">
          <item xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="1"/>
        </part>
        <part xsi:type="xocl:CollectionItemXS">
          <item xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="2"/>
        </part>
        <part xsi:type="xocl:CollectionItemXS">
          <item xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="3"/>
        </part>
        <part xsi:type="xocl:CollectionRangeXS">
          <last xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="9"/>
          <first xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="5"/>
        </part>
        <part xsi:type="xocl:CollectionRangeXS">
          <last xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="6"/>
          <first xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="2"/>
        </part>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="CollectionLiteralItem-Set" constrainedElement="Plugin" definedFeature="">
    <specification body="Set{1,2,3,5-9,2-6}">
      <bodyExpression xsi:type="xocl:CollectionLiteralExpXS">
        <part xsi:type="xocl:CollectionItemXS">
          <item xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="1"/>
        </part>
        <part xsi:type="xocl:CollectionItemXS">
          <item xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="2"/>
        </part>
        <part xsi:type="xocl:CollectionItemXS">
          <item xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="3"/>
        </part>
        <part xsi:type="xocl:CollectionRangeXS">
          <last xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="9"/>
          <first xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="5"/>
        </part>
        <part xsi:type="xocl:CollectionRangeXS">
          <last xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="6"/>
          <first xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="2"/>
        </part>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="CollectionLiteralItem-Sequence" constrainedElement="Plugin" definedFeature="">
    <specification body="Sequence{1,2,3,5-9,2-6}">
      <bodyExpression xsi:type="xocl:CollectionLiteralExpXS" kind="Sequence">
        <part xsi:type="xocl:CollectionItemXS">
          <item xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="1"/>
        </part>
        <part xsi:type="xocl:CollectionItemXS">
          <item xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="2"/>
        </part>
        <part xsi:type="xocl:CollectionItemXS">
          <item xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="3"/>
        </part>
        <part xsi:type="xocl:CollectionRangeXS">
          <last xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="9"/>
          <first xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="5"/>
        </part>
        <part xsi:type="xocl:CollectionRangeXS">
          <last xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="6"/>
          <first xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="2"/>
        </part>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="InvalidLiteralExp" constrainedElement="Plugin">
    <specification body="invalid">
      <bodyExpression xsi:type="xocl:InvalidLiteralExpXS"/>
    </specification>
  </ownedRule>
  <ownedRule name="TypeLiteralExp-Plugin" constrainedElement="Plugin">
    <specification body="PluginType">
      <bodyExpression xsi:type="xocl:TypeLiteralExpXS" referredTypeName="Plugin"/>
    </specification>
  </ownedRule>
  <ownedRule name="UndefinedLiteralExp" constrainedElement="Plugin">
    <specification body="void">
      <bodyExpression xsi:type="xocl:UndefinedLiteralExpXS"/>
    </specification>
  </ownedRule>
  <ownedRule name="ifThenElse-Then" constrainedElement="Plugin">
    <specification body="if (0 &lt; 1) then true else false">
      <bodyExpression xsi:type="xocl:IfExpXS">
        <elseExpression xsi:type="xocl:BooleanLiteralExpXS"/>
        <condition xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="&lt;">
          <source xsi:type="xocl:IntegerLiteralExpXS"/>
          <argument xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="1"/>
        </condition>
        <thenExpression xsi:type="xocl:BooleanLiteralExpXS" booleanSymbol="true"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="ifThenElse-Else" constrainedElement="Plugin">
    <specification body="if (0 > 1) then true else false">
      <bodyExpression xsi:type="xocl:IfExpXS">
        <elseExpression xsi:type="xocl:BooleanLiteralExpXS"/>
        <condition xsi:type="xocl:ModelOperationCallExpXS" referredOperationName=">">
          <source xsi:type="xocl:IntegerLiteralExpXS"/>
          <argument xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="1"/>
        </condition>
        <thenExpression xsi:type="xocl:BooleanLiteralExpXS" booleanSymbol="true"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="VariableExp-self" constrainedElement="Plugin">
    <specification body="self">
      <bodyExpression xsi:type="xocl:VariableExpXS" referredVariable="//@ownedRule.17/@specification/@context"/>
    </specification>
  </ownedRule>
  <ownedRule name="PropertyCallExp" constrainedElement="Plugin" definedFeature="">
    <specification body="self.feature">
      <bodyExpression xsi:type="xocl:PropertyCallExpXS" referredPropertyName="feature">
        <source xsi:type="xocl:VariableExpXS" referredVariable="//@ownedRule.18/@specification/@context"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="IteratorExp-any" constrainedElement="Plugin">
    <specification body="Set{1,2-4}->any(it1 : Integer | it1 &lt; 3)">
      <bodyExpression xsi:type="xocl:IteratorExpXS" name="any">
        <source xsi:type="xocl:CollectionLiteralExpXS">
          <part xsi:type="xocl:CollectionItemXS">
            <item xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="1"/>
          </part>
          <part xsi:type="xocl:CollectionRangeXS">
            <last xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="4"/>
            <first xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="2"/>
          </part>
        </source>
        <iterator name="it1" type="Integer"/>
        <body xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="&lt;">
          <source xsi:type="xocl:VariableExpXS" referredVariable="//@ownedRule.19/@specification/@bodyExpression/@iterator.0"/>
          <argument xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="3"/>
        </body>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="IteratorExp-exists-multiIt-true" constrainedElement="Plugin">
    <specification body="Set{1,2-4}->exists(it21 : Integer, it22 : Integer | it21 + it22 > 7)">
      <bodyExpression xsi:type="xocl:IteratorExpXS" name="exists">
        <source xsi:type="xocl:CollectionLiteralExpXS">
          <part xsi:type="xocl:CollectionItemXS">
            <item xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="1"/>
          </part>
          <part xsi:type="xocl:CollectionRangeXS">
            <last xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="4"/>
            <first xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="2"/>
          </part>
        </source>
        <iterator name="it21" type="Integer"/>
        <iterator name="it22" type="Integer"/>
        <body xsi:type="xocl:ModelOperationCallExpXS" referredOperationName=">">
          <source xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="+">
            <source xsi:type="xocl:VariableExpXS" referredVariable="//@ownedRule.20/@specification/@bodyExpression/@iterator.0"/>
            <argument xsi:type="xocl:VariableExpXS" referredVariable="//@ownedRule.20/@specification/@bodyExpression/@iterator.1"/>
          </source>
          <argument xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="7"/>
        </body>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="IteratorExp-exists-multiIt-false" constrainedElement="Plugin">
    <specification body="Set{1,2-4}->exists(it21 : Integer, it22 : Integer | it21 + it22 > 8)">
      <bodyExpression xsi:type="xocl:IteratorExpXS" name="exists">
        <source xsi:type="xocl:CollectionLiteralExpXS">
          <part xsi:type="xocl:CollectionItemXS">
            <item xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="1"/>
          </part>
          <part xsi:type="xocl:CollectionRangeXS">
            <last xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="4"/>
            <first xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="2"/>
          </part>
        </source>
        <iterator name="it21" type="Integer"/>
        <iterator name="it22" type="Integer"/>
        <body xsi:type="xocl:ModelOperationCallExpXS" referredOperationName=">">
          <source xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="+">
            <source xsi:type="xocl:VariableExpXS" referredVariable="//@ownedRule.21/@specification/@bodyExpression/@iterator.0"/>
            <argument xsi:type="xocl:VariableExpXS" referredVariable="//@ownedRule.21/@specification/@bodyExpression/@iterator.1"/>
          </source>
          <argument xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="8"/>
        </body>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="IteratorExp-forAll-multiIt-true" constrainedElement="Plugin">
    <specification body="Set{1,2-4}->forAll(it41 : Integer, it42 : Integer | it41 + it42 > 1)">
      <bodyExpression xsi:type="xocl:IteratorExpXS" name="forAll">
        <source xsi:type="xocl:CollectionLiteralExpXS">
          <part xsi:type="xocl:CollectionItemXS">
            <item xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="1"/>
          </part>
          <part xsi:type="xocl:CollectionRangeXS">
            <last xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="4"/>
            <first xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="2"/>
          </part>
        </source>
        <iterator name="it41" type="Integer"/>
        <iterator name="it42" type="Integer"/>
        <body xsi:type="xocl:ModelOperationCallExpXS" referredOperationName=">">
          <source xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="+">
            <source xsi:type="xocl:VariableExpXS" referredVariable="//@ownedRule.22/@specification/@bodyExpression/@iterator.0"/>
            <argument xsi:type="xocl:VariableExpXS" referredVariable="//@ownedRule.22/@specification/@bodyExpression/@iterator.1"/>
          </source>
          <argument xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="1"/>
        </body>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="IteratorExp-forAll-multiIt-false" constrainedElement="Plugin">
    <specification body="Set{1,2-4}->forAll(it31 : Integer, it32 : Integer | it31 + it32 > 7)">
      <bodyExpression xsi:type="xocl:IteratorExpXS" name="forAll">
        <source xsi:type="xocl:CollectionLiteralExpXS">
          <part xsi:type="xocl:CollectionItemXS">
            <item xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="1"/>
          </part>
          <part xsi:type="xocl:CollectionRangeXS">
            <last xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="4"/>
            <first xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="2"/>
          </part>
        </source>
        <iterator name="it31" type="Integer"/>
        <iterator name="it32" type="Integer"/>
        <body xsi:type="xocl:ModelOperationCallExpXS" referredOperationName=">">
          <source xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="+">
            <source xsi:type="xocl:VariableExpXS" referredVariable="//@ownedRule.23/@specification/@bodyExpression/@iterator.0"/>
            <argument xsi:type="xocl:VariableExpXS" referredVariable="//@ownedRule.23/@specification/@bodyExpression/@iterator.1"/>
          </source>
          <argument xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="7"/>
        </body>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="IteratorExp-isUnique-true" constrainedElement="Plugin">
    <specification body="Set{1,1-4}->isUnique{it5 : Integer | it5}">
      <bodyExpression xsi:type="xocl:IteratorExpXS" name="isUnique">
        <source xsi:type="xocl:CollectionLiteralExpXS">
          <part xsi:type="xocl:CollectionItemXS">
            <item xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="1"/>
          </part>
          <part xsi:type="xocl:CollectionRangeXS">
            <last xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="4"/>
            <first xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="1"/>
          </part>
        </source>
        <iterator name="it5" type="Integer"/>
        <body xsi:type="xocl:VariableExpXS" referredVariable="//@ownedRule.24/@specification/@bodyExpression/@iterator.0"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="IteratorExp-isUnique-false" constrainedElement="Plugin">
    <specification body="Bag{1,1-4}->isUnique{it6 : Integer | it6}">
      <bodyExpression xsi:type="xocl:IteratorExpXS" name="isUnique">
        <source xsi:type="xocl:CollectionLiteralExpXS" kind="Bag">
          <part xsi:type="xocl:CollectionItemXS">
            <item xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="1"/>
          </part>
          <part xsi:type="xocl:CollectionRangeXS">
            <last xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="4"/>
            <first xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="1"/>
          </part>
        </source>
        <iterator name="it6" type="Integer"/>
        <body xsi:type="xocl:VariableExpXS" referredVariable="//@ownedRule.25/@specification/@bodyExpression/@iterator.0"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="IteratorExp-one-true" constrainedElement="Plugin">
    <specification body="Set{1,1-4}->one{it7 : Integer | it7 = 1}">
      <bodyExpression xsi:type="xocl:IteratorExpXS" name="one">
        <source xsi:type="xocl:CollectionLiteralExpXS">
          <part xsi:type="xocl:CollectionItemXS">
            <item xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="1"/>
          </part>
          <part xsi:type="xocl:CollectionRangeXS">
            <last xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="4"/>
            <first xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="1"/>
          </part>
        </source>
        <iterator name="it7" type="Integer"/>
        <body xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="=">
          <source xsi:type="xocl:VariableExpXS" referredVariable="//@ownedRule.26/@specification/@bodyExpression/@iterator.0"/>
          <argument xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="1"/>
        </body>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="IteratorExp-one-false" constrainedElement="Plugin">
    <specification body="Bag{1,1-4}->one{it8 : Integer | it8 = 1}">
      <bodyExpression xsi:type="xocl:IteratorExpXS" name="one">
        <source xsi:type="xocl:CollectionLiteralExpXS" kind="Bag">
          <part xsi:type="xocl:CollectionItemXS">
            <item xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="1"/>
          </part>
          <part xsi:type="xocl:CollectionRangeXS">
            <last xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="4"/>
            <first xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="1"/>
          </part>
        </source>
        <iterator name="it8" type="Integer"/>
        <body xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="=">
          <source xsi:type="xocl:VariableExpXS" referredVariable="//@ownedRule.27/@specification/@bodyExpression/@iterator.0"/>
          <argument xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="1"/>
        </body>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="IteratorExp-select" constrainedElement="Plugin">
    <specification body="Set{1,1-4}->select{it9 : Integer | it9 > 2}">
      <bodyExpression xsi:type="xocl:IteratorExpXS" name="select">
        <source xsi:type="xocl:CollectionLiteralExpXS">
          <part xsi:type="xocl:CollectionItemXS">
            <item xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="1"/>
          </part>
          <part xsi:type="xocl:CollectionRangeXS">
            <last xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="4"/>
            <first xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="1"/>
          </part>
        </source>
        <iterator name="it9" type="Integer"/>
        <body xsi:type="xocl:ModelOperationCallExpXS" referredOperationName=">">
          <source xsi:type="xocl:VariableExpXS" referredVariable="//@ownedRule.28/@specification/@bodyExpression/@iterator.0"/>
          <argument xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="2"/>
        </body>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="IteratorExp-reject" constrainedElement="Plugin">
    <specification body="Set{1,1-4}->reject{it10 : Integer | it10 > 2}">
      <bodyExpression xsi:type="xocl:IteratorExpXS" name="reject">
        <source xsi:type="xocl:CollectionLiteralExpXS">
          <part xsi:type="xocl:CollectionItemXS">
            <item xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="1"/>
          </part>
          <part xsi:type="xocl:CollectionRangeXS">
            <last xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="4"/>
            <first xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="1"/>
          </part>
        </source>
        <iterator name="it10" type="Integer"/>
        <body xsi:type="xocl:ModelOperationCallExpXS" referredOperationName=">">
          <source xsi:type="xocl:VariableExpXS" referredVariable="//@ownedRule.29/@specification/@bodyExpression/@iterator.0"/>
          <argument xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="2"/>
        </body>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="IteratorExp-sortedBy" constrainedElement="Plugin">
    <specification body="Set{1,1-4}->sortedBy{it11 : Integer | 10 - it11}">
      <bodyExpression xsi:type="xocl:IteratorExpXS" name="sortedBy">
        <source xsi:type="xocl:CollectionLiteralExpXS">
          <part xsi:type="xocl:CollectionItemXS">
            <item xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="1"/>
          </part>
          <part xsi:type="xocl:CollectionRangeXS">
            <last xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="4"/>
            <first xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="1"/>
          </part>
        </source>
        <iterator name="it11" type="Integer"/>
        <body xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="-">
          <source xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="10"/>
          <argument xsi:type="xocl:VariableExpXS" referredVariable="//@ownedRule.30/@specification/@bodyExpression/@iterator.0"/>
        </body>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="IteratorExp-collectNested" constrainedElement="Plugin">
    <specification body="Set{Set{1..3},Set{3..8},Set{1..8}}->collectNested(it14 : Set(Integer) | it14->including(10))">
      <bodyExpression xsi:type="xocl:IteratorExpXS" name="collectNested">
        <source xsi:type="xocl:CollectionLiteralExpXS">
          <part xsi:type="xocl:CollectionItemXS">
            <item xsi:type="xocl:CollectionLiteralExpXS">
              <part xsi:type="xocl:CollectionRangeXS">
                <last xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="3"/>
                <first xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="1"/>
              </part>
            </item>
          </part>
          <part xsi:type="xocl:CollectionItemXS">
            <item xsi:type="xocl:CollectionLiteralExpXS">
              <part xsi:type="xocl:CollectionRangeXS">
                <last xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="8"/>
                <first xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="3"/>
              </part>
            </item>
          </part>
          <part xsi:type="xocl:CollectionItemXS">
            <item xsi:type="xocl:CollectionLiteralExpXS">
              <part xsi:type="xocl:CollectionRangeXS">
                <last xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="8"/>
                <first xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="1"/>
              </part>
            </item>
          </part>
        </source>
        <iterator name="it14" type="Set(Integer)"/>
        <body xsi:type="xocl:CollectionOperationCallExpXS" referredCollectionOperation="including">
          <source xsi:type="xocl:VariableExpXS" referredVariable="//@ownedRule.31/@specification/@bodyExpression/@iterator.0"/>
          <argument xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="10"/>
        </body>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="IteratorExp-collect" constrainedElement="Plugin">
    <specification body="Set{Set{1..3},Set{3..8},Set{1..8}}->collect(it15 : Set(Integer) | it15->including(10))">
      <bodyExpression xsi:type="xocl:IteratorExpXS" name="collect">
        <source xsi:type="xocl:CollectionLiteralExpXS">
          <part xsi:type="xocl:CollectionItemXS">
            <item xsi:type="xocl:CollectionLiteralExpXS">
              <part xsi:type="xocl:CollectionRangeXS">
                <last xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="3"/>
                <first xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="1"/>
              </part>
            </item>
          </part>
          <part xsi:type="xocl:CollectionItemXS">
            <item xsi:type="xocl:CollectionLiteralExpXS">
              <part xsi:type="xocl:CollectionRangeXS">
                <last xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="8"/>
                <first xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="3"/>
              </part>
            </item>
          </part>
          <part xsi:type="xocl:CollectionItemXS">
            <item xsi:type="xocl:CollectionLiteralExpXS">
              <part xsi:type="xocl:CollectionRangeXS">
                <last xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="8"/>
                <first xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="1"/>
              </part>
            </item>
          </part>
        </source>
        <iterator name="it15" type="Set(Integer)"/>
        <body xsi:type="xocl:CollectionOperationCallExpXS" referredCollectionOperation="including">
          <source xsi:type="xocl:VariableExpXS" referredVariable="//@ownedRule.32/@specification/@bodyExpression/@iterator.0"/>
          <argument xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="10"/>
        </body>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="IterateExp-multIt" constrainedElement="Plugin">
    <specification body="Set{1..3}->iterate(it12 : Integer, it13 : Integer; acc : Bag(Integer) = Bag{} | acc->including(it12 * it13))">
      <bodyExpression xsi:type="xocl:IterateExpXS">
        <source xsi:type="xocl:CollectionLiteralExpXS">
          <part xsi:type="xocl:CollectionRangeXS">
            <last xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="3"/>
            <first xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="1"/>
          </part>
        </source>
        <iterator name="it12" type="Integer"/>
        <iterator name="it13" type="Integer"/>
        <body xsi:type="xocl:CollectionOperationCallExpXS" referredCollectionOperation="including">
          <source xsi:type="xocl:VariableExpXS" referredVariable="//@ownedRule.33/@specification/@bodyExpression/@result"/>
          <argument xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="*">
            <source xsi:type="xocl:VariableExpXS" referredVariable="//@ownedRule.33/@specification/@bodyExpression/@iterator.0"/>
            <argument xsi:type="xocl:VariableExpXS" referredVariable="//@ownedRule.33/@specification/@bodyExpression/@iterator.1"/>
          </argument>
        </body>
        <result name="acc" type="Bag(Integer)">
          <initExpression xsi:type="xocl:CollectionLiteralExpXS" kind="Bag"/>
        </result>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="PropertyCallExp-name" constrainedElement="Plugin">
    <specification body="self.name">
      <bodyExpression xsi:type="xocl:PropertyCallExpXS" referredPropertyName="name">
        <source xsi:type="xocl:VariableExpXS" referredVariable="//@ownedRule.34/@specification/@context"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="OperationCallExp-add" constrainedElement="Plugin">
    <specification body="5+4">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="+">
        <source xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="5"/>
        <argument xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="4"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="LetExp" constrainedElement="Plugin">
    <specification body="let letVar : Integer = 5 in letVar">
      <bodyExpression xsi:type="xocl:LetExpXS">
        <in xsi:type="xocl:VariableExpXS" referredVariable="//@ownedRule.36/@specification/@bodyExpression/@variable"/>
        <variable name="letVar" type="Integer">
          <initExpression xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="5"/>
        </variable>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="BodyExp" kind="body" constrainedElement="Plugin::getFive()" definedFeature="">
    <specification body="6">
      <bodyExpression xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="6"/>
    </specification>
  </ownedRule>
  <ownedRule name="BodyExpUsage" constrainedElement="Plugin">
    <specification body="self.getFive()">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="getFive">
        <source xsi:type="xocl:VariableExpXS" referredVariable="//@ownedRule.38/@specification/@context"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="Definition" kind="definition" constrainedElement="Plugin" definedFeature="newAtt">
    <specification body="newAtt : Integer = 5">
      <bodyExpression xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="5"/>
    </specification>
  </ownedRule>
  <ownedRule name="initial" kind="initialvalue" constrainedElement="Plugin::name">
    <specification body="'Name'">
      <bodyExpression xsi:type="xocl:StringLiteralExpXS" stringSymbol="Name"/>
    </specification>
  </ownedRule>
  <ownedRule name="derive" kind="derivedvalue" constrainedElement="Plugin::name">
    <specification body="'DerivedName'">
      <bodyExpression xsi:type="xocl:StringLiteralExpXS" stringSymbol="DerivedName"/>
    </specification>
  </ownedRule>
  <ownedRule name="usingInitDerive" constrainedElement="Plugin">
    <specification body="self.name">
      <bodyExpression xsi:type="xocl:PropertyCallExpXS" referredPropertyName="name">
        <source xsi:type="xocl:VariableExpXS" referredVariable="//@ownedRule.42/@specification/@context"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="precondition" kind="precondition" constrainedElement="Plugin::getValue(value:Integer):Integer">
    <specification body="value">
      <bodyExpression xsi:type="xocl:VariableExpXS" referredVariable="//@ownedRule.43/@specification/@parameter.0"/>
    </specification>
  </ownedRule>
  <ownedRule name="postconditionResult" kind="postcondition" constrainedElement="Plugin::getValue(value:Integer):Integer">
    <specification body="result">
      <bodyExpression xsi:type="xocl:VariableExpXS" referredVariable="//@ownedRule.44/@specification/@result"/>
    </specification>
  </ownedRule>
  <ownedRule name="postconditionAtPre" kind="postcondition" constrainedElement="Plugin::getValue(value:Integer):Integer">
    <specification body="self.name.atPre()">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="atPre">
        <source xsi:type="xocl:PropertyCallExpXS" referredPropertyName="name">
          <source xsi:type="xocl:VariableExpXS" referredVariable="//@ownedRule.45/@specification/@context"/>
        </source>
      </bodyExpression>
    </specification>
  </ownedRule>
</xocl:NamespaceXS>
