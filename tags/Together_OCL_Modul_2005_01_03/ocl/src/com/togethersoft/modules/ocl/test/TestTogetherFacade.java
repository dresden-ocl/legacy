/* Generated by Together */

package com.togethersoft.modules.ocl.test;

import com.togethersoft.openapi.ide.IdeScript;
import com.togethersoft.openapi.ide.IdeContext;
import com.togethersoft.openapi.rwi.RwiElement;
import com.togethersoft.openapi.util.RwiElementsUtil;
import com.togethersoft.modules.ocl.TogetherFacade;
import tudresden.ocl.check.types.Any;
import tudresden.ocl.check.types.Type;
import com.togethersoft.modules.ocl.TogetherAny;
import com.togethersoft.openapi.rwi.RwiProperty;
import tudresden.ocl.check.types.ClassAny;

public class TestTogetherFacade extends MyTest {

    private RwiElement context;
   	private TogetherFacade tf;

    public void run(IdeContext ideContext) {
        // DEBUG
        printResult("Step 1");
   		RwiElement[] rwiElementArray = RwiElementsUtil.getRwiElements(ideContext);
        // DEBUG
        printResult("Step 2");

        if (rwiElementArray.length == 0  || rwiElementArray.length > 1) {
            printResult("You must select either SelectedClass or operationInSelectedClass.");
            printSummary();
            return;
        } else {
            // the test only accepts one selected element, no profound checking necessary
			context = rwiElementArray[0];
        }
        // DEBUG
        printResult("Step 3");
		tf = new TogetherFacade(context);

        // DEBUG
        printResult("Step 4");
		if (context.getProperty(RwiProperty.NAME).equals("SelectedClass")) {
	        testGetClassifierInClassContext();
        } else if (context.getProperty(RwiProperty.NAME).equals("selectedOperation")) {
            testGetClassifierInOperationContext();
        } else {
            printResult("You must select either SelectedClass or selectedOperation.");
        }
//        testGetClassifier_OperationContext();
//        testFindClassifierInOperationContext();

        // DEBUG
        printResult("Step 5");
        printSummary();
    }

	/**
     * Various tests with a class selected.
     */
    public void testGetClassifierInClassContext() {
        //getClassifier("SelectedClass");
        printResult("getClassifier(\"SelectedClass\")  -  context already IS the RwiNode searched for");
        try {
		    Any someAny;
        	someAny = tf.getClassifier("SelectedClass");
	        printResult("     1a ...SelectedClass", ((TogetherAny)someAny).toString());
            if (!someAny.toString().equals("SelectedClass")) printResult("---------- FAILURE ---------");

        } catch (Exception e) {
            printResult("     1a ...SelectedClass", e.toString());
            printResult("---------- FAILURE ---------");
        }

        //getClassifier("SelectedClass");
        printResult("getClassifier(\"com.togethersoft.modules.ocl.test.testmodel.SelectedClass\")  -  context already IS the RwiNode searched for");
        try {
		    Any someAny;
        	someAny = tf.getClassifier("com.togethersoft.modules.ocl.test.testmodel.SelectedClass");
	        printResult("     1b ...SelectedClass", ((TogetherAny)someAny).toString());
            if (!someAny.toString().equals("SelectedClass")) printResult("---------- FAILURE ---------");

        } catch (Exception e) {
            printResult("     1b ...SelectedClass", e.toString());
            printResult("---------- FAILURE ---------");
        }

        //getClassifier("ClassInSamePackage");
        printResult("getClassifier(\"ClassInSamePackage\")  -  it is searched for another RwiNode in the same package");
        try {
		    Any someAny;
        	someAny = tf.getClassifier("ClassInSamePackage");
	        printResult("     2 ...ClassInSamePackage", ((TogetherAny)someAny).toString());
            if (!someAny.toString().equals("ClassInSamePackage")) printResult("---------- FAILURE ---------");
        } catch (Exception e) {
            printResult("     2 ...ClassInSamePackage", e.toString());
            printResult("---------- FAILURE ---------");
        }

        //getClassifier("ClassInSubpackage");
        printResult("getClassifier(\"ClassInSubpackage\")  -  it is searched for another RwiNode in a subpackage");
        try {
		    Any someAny;
        	someAny = tf.getClassifier("ClassInSubpackage");
	        printResult("     3 ClassInSubpackage", ((TogetherAny)someAny).toString());
        } catch (Exception e) {
            printResult("     3 ClassInSubpackage", e.toString());
            printResult("---------- FAILURE ---------");
        }

        //getClassifier("java.util.Date");
        printResult("test: getClassifier(\"java.util.Date\")  -  should be retrieved via ReflectionFacade due to the complete path name");
        try {
		    Any someAny;
        	someAny = tf.getClassifier("java.util.Date");
	        printResult("     4 java.util.Date", someAny.toString());
        } catch (Exception e) {
            printResult("     4 java.util.Date", e.toString());
            printResult("---------- FAILURE ---------");
        }

        //getClassifier("Date");
        printResult("getClassifier(\"Date\")  -  no success exspected.");
        try {
		    Any someAny;
        	someAny = tf.getClassifier("Date");
	        printResult("     5 Date", someAny.toString());
        } catch (Exception e) {
            printResult("     5 Date", e.toString());
            printResult("---------- FAILURE ---------");
        }

        //getClassifier("OCLToolbar");
        printResult("test: getClassifier(\"OCLToolbar\")  -  part of the current project, but completely different package");
        try {
		    Any someAny;
        	someAny = tf.getClassifier("OCLToolbar");
	        printResult("     6 OCLToolbar", someAny.toString());
        } catch (Exception e) {
            printResult("     6 OCLToolbar", e.toString());
            printResult("---------- FAILURE ---------");
        }
    }


	public void testGetClassifierInOperationContext() {
        printResult("test \"getClassifier()\" in operation context\n");
        //getClassifier("SelectedClass");
        printResult("getClassifier(\"SelectedClass\")  -  context holding classifier already IS the RwiNode searched for");
        try {
		    Any someAny;
        	someAny = tf.getClassifier("SelectedClass");
	        printResult("     1 ...SelectedClass", ((TogetherAny)someAny).toString());
        } catch (Exception e) {
            printResult("     1 ...SelectedClass", e.toString());
        }

        //getClassifier("ClassInSamePackage");
        printResult("getClassifier(\"ClassInSamePackage\")  -  it is searched for another RwiNode in the same package");
        try {
		    Any someAny;
        	someAny = tf.getClassifier("ClassInSamePackage");
	        printResult("     2 ...ClassInSamePackage", ((TogetherAny)someAny).toString());
        } catch (Exception e) {
            printResult("     2 ...ClassInSamePackage", e.toString());
        }

        //getClassifier("ClassInSubpackage");
        printResult("getClassifier(\"ClassInSubpackage\")  -  it is searched for another RwiNode in a subpackage");
        try {
		    Any someAny;
        	someAny = tf.getClassifier("ClassInSubpackage");
	        printResult("     3 ClassInSubpackage", ((TogetherAny)someAny).toString());
        } catch (Exception e) {
            printResult("     3 ClassInSubpackage", e.toString());
        }

        //getClassifier("Date");
        printResult("getClassifier(\"Date\")  -  Date is one of selectedOperation's parameter types");
        try {
		    Any someAny;
        	someAny = tf.getClassifier("Date");
	        printResult("     4 Date", someAny.toString());
        } catch (Exception e) {
            printResult("     4 Date", e.toString());
        }

        //getClassifier("java.util.Date");
        printResult("test: getClassifier(\"java.util.Date\")  -  should be retrieved via ReflectionFacade due to the complete path name");
        try {
		    Any someAny;
        	someAny = tf.getClassifier("java.util.Date");
       		printResult("someAny is a "+someAny.getClass().toString());
	        printResult("     5 java.util.Date", ((tudresden.ocl.check.types.ClassAny)someAny).toString());
        } catch (Exception e) {
            printResult("     5 java.util.Date", e.toString());
        }

    }




	public void testFindClassifierInOperationContext() {

        printResult("\nfindClassifierInOperationContext():RwiElement\nTEST REQUIRES findBirthDate(a:ByteArrayInputStream,b:NonExisitingClass):Date TO BE SELECTED IN THE TEST DIAGRAM");

		//findClassifierInOperation("Date");
        printResult("test: findClassifierInOperationContext(\"Date\")  -  should be found, is a return type");
        try {
            // Any someAny;
            RwiElement someRwiElement;
            someRwiElement = tf.findClassifierInOperationContext("Date");
            // printResult("  1 Date", ((TogetherAny)someAny).toString());
			printResult("  1 Date", someRwiElement.getProperty(RwiProperty.NAME));
        } catch (Exception e) {
            printResult("  1 Date", e.toString());
        }

   		//findClassifierInOperation("List");
        printResult("test: findClassifierInOperationContext(\"List\")  -  should not be found");
        try {
            // Any someAny;
            RwiElement someRwiElement;
            someRwiElement = tf.findClassifierInOperationContext("List");
            printResult("  2 List (null)", someRwiElement.getProperty(RwiProperty.NAME));
        } catch (Exception e) {
            printResult("  2 List (null)", e.toString());
        }


        //find Classifier("ByteArrayInputStream");
        printResult("test: findClassifierInOperationContext(\"ByteArrayInputStream\")  -  should be found, is a parameter");
        try {
            // Any someAny;
            RwiElement someRwiElement;
            someRwiElement = tf.findClassifierInOperationContext("ByteArrayInputStream");
            printResult("  3 ByteArrayInputStream", someRwiElement.getProperty(RwiProperty.NAME));
        } catch (Exception e) {
            printResult("  3 ByteArrayInputStream", e.toString());
        }

        //find Classifier("NotExistingClass");
        printResult("test: findClassifierInOperationContext(\"NotExistingClass\")  -  can not be found, is a parameter, but doesn't exisit");
        try {
            // Any someAny;
            RwiElement someRwiElement;
            someRwiElement = tf.findClassifierInOperationContext("NotExistingClass");
            printResult("  4 NotExistingClass (null)", someRwiElement.getProperty(RwiProperty.NAME));
        } catch (Exception e) {
            printResult("  4 NotExistingClass (null)", e.toString());
        }



    }

}
