--
----------------------------------------------------------------------
-- CustomerCard
----------------------------------------------------------------------
package RoyalLoyal

context CustomerCard::valid : Boolean
 init: true                             

context CustomerCard::printedName : String
 derive: owner.title.concat(' ').concat(owner.name)

 context CustomerCard 
   inv checkDates: validFrom.isBefore(validThru)

context CustomerCard 
  inv ofAge: owner.age >= 18

-- [ASTGen] Attribute must be classifier-scoped in this context
-- [ASTGen]  context CustomerCard 
-- [ASTGen]     inv THIS: let correctDate : Boolean = 
-- [ASTGen]    self.validFrom.isBefore(Date::now) and 
-- [ASTGen]    self.validThru.isAfter(Date::now) 
-- [ASTGen]   in 
-- [ASTGen]    if valid then 
-- [ASTGen]   correctDate = false 
-- [ASTGen]   else 
-- [ASTGen]    correctDate = true 
-- [ASTGen]    endif

context CustomerCard 
  def: getTotalPoints( d: Date ) : Integer 
       = transactions->select( date.isAfter(d) ).points->sum()
  /*def: CustomerCard::getTotalPoints( d: Date ) : Integer 
       = transactions->select( date.isAfter(d) ).points->sum()*/

-- [ASTGen] context CustomerCard::transactions:Set(Transaction) 
-- [ASTGen]   init: Set{}

-- [ASTGen] Attribute must be classifier-scoped in this context
-- [ASTGen] context CustomerCard 
-- [ASTGen]   inv: validThru.isAfter( Date::now )

-- [ASTGen] context CustomerCard 
-- [ASTGen]   inv: self.owner.dateOfBirth.isBefore( Date::now )

 context CustomerCard 
  inv: self.owner.programs->size() > 0

context CustomerCard 
    inv: self.transactions->select( t: Transaction| t.points > 100 )
                          ->notEmpty()

endpackage