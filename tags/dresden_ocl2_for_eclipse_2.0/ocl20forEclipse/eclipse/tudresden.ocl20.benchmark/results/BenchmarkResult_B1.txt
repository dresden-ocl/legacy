

==========================================
Log for test B1
==========================================

Start Parsing File: bin/tudresden/ocl20/benchmark/testdata/b1/expressions/invariants.ocl
------------------------------------------
context Person  inv B1invariants_enumCivilStatus:
		self.civstat='single' or self.civstat='married' or
		self.civstat='divorced' or self.civstat='widowed'
>> OK
..........................................
context Person  inv B1invariants_enumGender:
		self.gender='female' or self.gender='male'
>> OK
..........................................
context Person  inv B1invariants_aliveDefined:
		self.alive=true or self.alive=false
>> OK
..........................................
context Person  inv B1invariants_nameCapitalThenSmallLetters_VT:
		let small:Set(String)=
		Set{'a','b','c','d','e','f','g','h','i','j','k','l','m',
		'n','o','p','q','r','s','t','u','v','w','x','y','z'} in
		let capital:Set(String)=
		Set{'A','B','C','D','E','F','G','H','I','J','K','L','M',
		'N','O','P','Q','R','S','T','U','V','W','X','Y','Z'} in
		capital->includes(self.name.substring(1,1)) and
		Set{2..self.name.size()}->forAll(i:Integer|
		small->includes(self.name.substring(i,i))) and
		self.name.size()>=1
>> OK
..........................................
context Person  inv B1invariants_nameCapitalThenSmallLetters_VN:
		let small:Set(String)=
		Set{'a','b','c','d','e','f','g','h','i','j','k','l','m',
		'n','o','p','q','r','s','t','u','v','w','x','y','z'} in
		let capital:Set(String)=
		Set{'A','B','C','D','E','F','G','H','I','J','K','L','M',
		'N','O','P','Q','R','S','T','U','V','W','X','Y','Z'} in
		capital->includes(self.name.substring(1,1)) and
		Set{2..self.name.size()}->forAll(i|
		small->includes(self.name.substring(i,i))) and
		self.name.size()>=1
>> OK
..........................................
context Person  inv B1invariants_uniqueNameForAll1_P0_VT:
		Person.allInstances()->forAll(self2:Person|
		self<>self2 implies self.name<>self2.name)
>> OK
..........................................
context Person  inv B1invariants_uniqueNameForAll1_P0_VN:
		Person.allInstances()->forAll(self2|
		self<>self2 implies self.name<>self2.name)
>> OK
..........................................
context Person  inv B1invariants_uniqueNameForAll2_P0_VT:
		Person.allInstances()->forAll(p1,p2:Person|
		p1<>p2 implies p1.name<>p2.name)
>> OK
..........................................
context Person  inv B1invariants_uniqueNameForAll2_P0_VN:
		Person.allInstances()->forAll(p1,p2|
		p1<>p2 implies p1.name<>p2.name)
>> OK
..........................................
context Person  inv B1invariants_uniqueNameIsUnique_P0_VT:
		Person.allInstances()->isUnique(p:Person|p.name)
>> OK
..........................................
context Person  inv B1invariants_uniqueNameIsUnique_P0_VN:
		Person.allInstances()->isUnique(p|p.name)
>> OK
..........................................
context Person  inv B1invariants_uniqueNameIsUnique_P0_VI:
		Person.allInstances()->isUnique(name)
>> OK
..........................................
context Person  inv B1invariants_uniqueNameOne_P0_VT:
		Person.allInstances()->one(p:Person|self.name=p.name)
>> OK
..........................................
context Person  inv B1invariants_uniqueNameOne_P0_VN:
		Person.allInstances()->one(p|self.name=p.name)
>> OK
..........................................
context Person  inv B1invariants_uniqueNameOne_P0_VI:
		Person.allInstances()->one(self.name=name)
>> OK
..........................................
context Person  inv B1invariants_uniqueNameOneNot_P0_VI:
		not Person.allInstances()->one(name=name)
>> OK
..........................................
context Person  inv B1invariants_femaleHasNoWife:
		self.gender='female' implies self.wife->isEmpty()
>> OK
..........................................
context Person  inv B1invariants_maleHasNoHusband:
		self.gender='male' implies self.husband->isEmpty()
>> OK
..........................................
context Person  inv B1invariants_abcName_P0_VT:
		let ada:Person=Person.allInstances()->any(p:Person|p.name='Ada') in
		let bob:Person=Person.allInstances()->any(p:Person|p.name='Bob') in
		let cyd:Person=Person.allInstances()->any(p:Person|p.name='Cyd') in
		Set{ada,bob,cyd}->collect(p:Person|p.name)=Bag{'Ada','Bob','Cyd'}
>> OK
..........................................
context Person  inv B1invariants_abcName_P0_VN:
		let ada:Person=Person.allInstances()->any(p|p.name='Ada') in
		let bob:Person=Person.allInstances()->any(p|p.name='Bob') in
		let cyd:Person=Person.allInstances()->any(p|p.name='Cyd') in
		Set{ada,bob,cyd}->collect(p|p.name)=Bag{'Ada','Bob','Cyd'}
>> OK
..........................................
context Person  inv B1invariants_abcName_P0_VI:
		let ada:Person=Person.allInstances()->any(name='Ada') in
		let bob:Person=Person.allInstances()->any(name='Bob') in
		let cyd:Person=Person.allInstances()->any(name='Cyd') in
		Set{ada,bob,cyd}->collect(name)=Bag{'Ada','Bob','Cyd'}
>> OK
..........................................
context Person  inv B1invariants_abcNameDotShortcutP0_VT:
		let ada:Person=Person.allInstances()->any(p:Person|p.name='Ada') in
		let bob:Person=Person.allInstances()->any(p:Person|p.name='Bob') in
		let cyd:Person=Person.allInstances()->any(p:Person|p.name='Cyd') in
		Set{ada,bob,cyd}.name=Bag{'Ada','Bob','Cyd'}
>> OK
..........................................
context Person  inv B1invariants_abcNameDotShortcutP0_VN:
		let ada:Person=Person.allInstances()->any(p|p.name='Ada') in
		let bob:Person=Person.allInstances()->any(p|p.name='Bob') in
		let cyd:Person=Person.allInstances()->any(p|p.name='Cyd') in
		Set{ada,bob,cyd}.name=Bag{'Ada','Bob','Cyd'}
>> OK
..........................................
context Person  inv B1invariants_abcNameDotShortcutP0_VI:
		let ada:Person=Person.allInstances()->any(name='Ada') in
		let bob:Person=Person.allInstances()->any(name='Bob') in
		let cyd:Person=Person.allInstances()->any(name='Cyd') in
		Set{ada,bob,cyd}.name=Bag{'Ada','Bob','Cyd'}
>> OK
..........................................
context Person  inv B1invariants_abcAttrs_P0_VT:
		let ada:Person=Person.allInstances()->any(p:Person|p.name='Ada') in
		let bob:Person=Person.allInstances()->any(p:Person|p.name='Bob') in
		let cyd:Person=Person.allInstances()->any(p:Person|p.name='Cyd') in
		Set{ada,bob,cyd}->
		collectNested(p:Person|Sequence{p.name,p.civstat,p.gender,p.alive})=
		Bag{Sequence{'Ada','widowed' ,'female',true },
		Sequence{'Bob','divorced','male'  ,true },
		Sequence{'Cyd','married' ,'male'  ,false}}
>> OK
..........................................
context Person  inv B1invariants_abcAttrs_P0_VN:
		let ada:Person=Person.allInstances()->any(p|p.name='Ada') in
		let bob:Person=Person.allInstances()->any(p|p.name='Bob') in
		let cyd:Person=Person.allInstances()->any(p|p.name='Cyd') in
		Set{ada,bob,cyd}->
		collectNested(p|Sequence{p.name,p.civstat,p.gender,p.alive})=
		Bag{Sequence{'Ada','widowed' ,'female',true },
		Sequence{'Bob','divorced','male'  ,true },
		Sequence{'Cyd','married' ,'male'  ,false}}
>> OK
..........................................
context Person  inv B1invariants_abcAttrs_P0_VI:
		let ada:Person=Person.allInstances()->any(name='Ada') in
		let bob:Person=Person.allInstances()->any(name='Bob') in
		let cyd:Person=Person.allInstances()->any(name='Cyd') in
		Set{ada,bob,cyd}->
		collectNested(Sequence{name,civstat,gender,alive})=
		Bag{Sequence{'Ada','widowed' ,'female',true },
		Sequence{'Bob','divorced','male'  ,true },
		Sequence{'Cyd','married' ,'male'  ,false}}
>> OK
..........................................
context Person  inv B1invariants_personsWithUndefinedHusband_P0_VT:
		Person.allInstances()->
		select(p:Person|
		p.husband=
		Person.allInstances()->any(p:Person|p.wife->isEmpty()).wife
		)->collect(p:Person|p.name)=Bag{'Ada','Bob','Cyd','Dan'}
>> OK
..........................................
context Person  inv B1invariants_personsWithUndefinedHusband_P0_VN:
		Person.allInstances()->
		select(p|
		p.husband=
		Person.allInstances()->any(p|p.wife->isEmpty()).wife
		)->collect(p|p.name)=Bag{'Ada','Bob','Cyd','Dan'}
>> OK
..........................................
context Person  inv B1invariants_personsWithUndefinedHusband_P0_VI:
		Person.allInstances()->
		select(
		husband=
		Person.allInstances()->any(wife->isEmpty()).wife
		)->collect(name)=Bag{'Ada','Bob','Cyd','Dan'}
>> OK
..........................................
context Person  inv B1invariants_personsWithUndefinedHusbandAnyFalse_P0_VT:
		Person.allInstances()->
		select(p:Person|
		p.husband=Person.allInstances()->any(p:Person|false)
		)->collect(p:Person|p.name)=Bag{'Ada','Bob','Cyd','Dan'}
>> OK
..........................................
context Person  inv B1invariants_personsWithUndefinedHusbandAnyFalse_P0_VN:
		Person.allInstances()->
		select(p|
		p.husband=Person.allInstances()->any(p|false)
		)->collect(p|p.name)=Bag{'Ada','Bob','Cyd','Dan'}
>> OK
..........................................
context Person  inv B1invariants_personsWithUndefinedHusbandAnyFalse_P0_VI:
		Person.allInstances()->
		select(
		husband=Person.allInstances()->any(false)
		)->collect(name)=Bag{'Ada','Bob','Cyd','Dan'}
>> OK
..........................................
OCL Parse Error
tudresden.ocl20.pivot.ocl2parser.parser.exceptions.ParsingException: [5,34] expecting: '=' The error ocurred in line 5 and column 34 at the token ,.
	thrown in: tudresden.ocl20.pivot.ocl2parser.parser.OCL2Parser.parse(OCL2Parser.java:71)
Message/Type: [5,34] expecting: '=' The error ocurred in line 5 and column 34 at the token ,.
Code:
context Person  inv B1invariants_possiblePairs_P0_VT:
	let ada:Person=Person.allInstances()->any(p:Person|p.name='Ada') in
	let emptySeq=Sequence{ada}->excluding(ada) in
	Person.allInstances()->iterate(w,h:Person;
	res:Bag(Sequence(Person))=Bag{emptySeq}->excluding(emptySeq)|
	if w.gender='female' and w.alive and w.civstat<>'married' and
	h.gender='male' and h.alive and h.civstat<>'married'
	then res->including(Sequence{w,h})
	else res endif)->
	collectNested(pair:Sequence(Person)|pair->collect(p:Person|p.name))=
	Bag{Sequence{'Ada','Bob'}}
	
OCL Parse Error
tudresden.ocl20.pivot.ocl2parser.parser.exceptions.ParsingException: [5,34] expecting: '=' The error ocurred in line 5 and column 34 at the token ,.
	thrown in: tudresden.ocl20.pivot.ocl2parser.parser.OCL2Parser.parse(OCL2Parser.java:71)
Message/Type: [5,34] expecting: '=' The error ocurred in line 5 and column 34 at the token ,.
Code:
context Person  inv B1invariants_possiblePairs_P0_VN:
	let ada:Person=Person.allInstances()->any(p|p.name='Ada') in
	let emptySeq=Sequence{ada}->excluding(ada) in
	Person.allInstances()->iterate(w,h;
	res:Bag(Sequence(Person))=Bag{emptySeq}->excluding(emptySeq)|
	if w.gender='female' and w.alive and w.civstat<>'married' and
	h.gender='male' and h.alive and h.civstat<>'married'
	then res->including(Sequence{w,h})
	else res endif)->
	collectNested(pair|pair->collect(p|p.name))=
	Bag{Sequence{'Ada','Bob'}}
	
OCL Parse Error
tudresden.ocl20.pivot.ocl2parser.parser.exceptions.ParsingException: [5,34] expecting: '=' The error ocurred in line 5 and column 34 at the token ,.
	thrown in: tudresden.ocl20.pivot.ocl2parser.parser.OCL2Parser.parse(OCL2Parser.java:71)
Message/Type: [5,34] expecting: '=' The error ocurred in line 5 and column 34 at the token ,.
Code:
context Person  inv B1invariants_possiblePairs_P0_VI:
	let ada:Person=Person.allInstances()->any(name='Ada') in
	let emptySeq=Sequence{ada}->excluding(ada) in
	Person.allInstances()->iterate(w,h;
	res:Bag(Sequence(Person))=Bag{emptySeq}->excluding(emptySeq)|
	if w.gender='female' and w.alive and w.civstat<>'married' and
	h.gender='male' and h.alive and h.civstat<>'married'
	then res->including(Sequence{w,h})
	else res endif)->
	collectNested(pair|pair->collect(name))=
	Bag{Sequence{'Ada','Bob'}}
	
context Person  inv B1invariants_flatten_P0_VT:
		let dan:Person=Person.allInstances()->any(p:Person|p.name='Dan') in
		let eve:Person=Person.allInstances()->any(p:Person|p.name='Eve') in
		Set{Bag{eve},
		Bag{eve.spouse()},
		Bag{eve.spouse().spouse()},
		Bag{eve.spouse().spouse().spouse()},
		Bag{eve.spouse().spouse().spouse().spouse()},
		Bag{eve.spouse().spouse().spouse().spouse().spouse()}}->
		flatten()=Set{dan,eve}
>> OK
..........................................
context Person  inv B1invariants_flatten_P0_VN:
		let dan:Person=Person.allInstances()->any(p|p.name='Dan') in
		let eve:Person=Person.allInstances()->any(p|p.name='Eve') in
		Set{Bag{eve},
		Bag{eve.spouse()},
		Bag{eve.spouse().spouse()},
		Bag{eve.spouse().spouse().spouse()},
		Bag{eve.spouse().spouse().spouse().spouse()},
		Bag{eve.spouse().spouse().spouse().spouse().spouse()}}->
		flatten()=Set{dan,eve}
>> OK
..........................................
context Person  inv B1invariants_flatten_P0_VI:
		let dan:Person=Person.allInstances()->any(name='Dan') in
		let eve:Person=Person.allInstances()->any(name='Eve') in
		Set{Bag{eve},
		Bag{eve.spouse()},
		Bag{eve.spouse().spouse()},
		Bag{eve.spouse().spouse().spouse()},
		Bag{eve.spouse().spouse().spouse().spouse()},
		Bag{eve.spouse().spouse().spouse().spouse().spouse()}}->
		flatten()=Set{dan,eve}
>> OK
..........................................

Statistics:
------------------------------------------
  successful	: 36 
  failed	 	: 3 


==========================================
Checking current model instance against loaded invariants
==========================================
invariants  : 36
test objects: 5
total tests : 180

test object: [,Person]
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_enumCivilStatus
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_enumGender
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_aliveDefined
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_nameCapitalThenSmallLetters_VT
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_nameCapitalThenSmallLetters_VN
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameForAll1_P0_VT
-->failed:
Constraint Specification: 
context Person  inv B1invariants_uniqueNameForAll1_P0_VT:
	Person.allInstances()->forAll(self2:Person|
	self<>self2 implies self.name<>self2.name)
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameForAll1_P0_VN
-->failed:
Constraint Specification: 
context Person  inv B1invariants_uniqueNameForAll1_P0_VN:
	Person.allInstances()->forAll(self2|
	self<>self2 implies self.name<>self2.name)
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameForAll2_P0_VT
-->failed:
Constraint Specification: 
context Person  inv B1invariants_uniqueNameForAll2_P0_VT:
	Person.allInstances()->forAll(p1,p2:Person|
	p1<>p2 implies p1.name<>p2.name)
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameForAll2_P0_VN
-->failed:
Constraint Specification: 
context Person  inv B1invariants_uniqueNameForAll2_P0_VN:
	Person.allInstances()->forAll(p1,p2|
	p1<>p2 implies p1.name<>p2.name)
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameIsUnique_P0_VT
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameIsUnique_P0_VN
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameIsUnique_P0_VI
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameOne_P0_VT
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameOne_P0_VN
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameOne_P0_VI
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameOneNot_P0_VI
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_femaleHasNoWife
-->failed:
Constraint Specification: 
context Person  inv B1invariants_femaleHasNoWife:
	self.gender='female' implies self.wife->isEmpty()
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_maleHasNoHusband
-->failed:
Constraint Specification: 
context Person  inv B1invariants_maleHasNoHusband:
	self.gender='male' implies self.husband->isEmpty()
	
Result: JavaOclVoid(undefined: JavaOclVoid)
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_abcName_P0_VT
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_abcName_P0_VN
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_abcName_P0_VI
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_abcNameDotShortcutP0_VT
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_abcNameDotShortcutP0_VN
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_abcNameDotShortcutP0_VI
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_abcAttrs_P0_VT
-->failed:
Constraint Specification: 
context Person  inv B1invariants_abcAttrs_P0_VT:
	let ada:Person=Person.allInstances()->any(p:Person|p.name='Ada') in
	let bob:Person=Person.allInstances()->any(p:Person|p.name='Bob') in
	let cyd:Person=Person.allInstances()->any(p:Person|p.name='Cyd') in
	Set{ada,bob,cyd}->
	collectNested(p:Person|Sequence{p.name,p.civstat,p.gender,p.alive})=
	Bag{Sequence{'Ada','widowed' ,'female',true },
	Sequence{'Bob','divorced','male'  ,true },
	Sequence{'Cyd','married' ,'male'  ,false}}
	
Result: JavaOclBoolean(false)
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_abcAttrs_P0_VN
-->failed:
Constraint Specification: 
context Person  inv B1invariants_abcAttrs_P0_VN:
	let ada:Person=Person.allInstances()->any(p|p.name='Ada') in
	let bob:Person=Person.allInstances()->any(p|p.name='Bob') in
	let cyd:Person=Person.allInstances()->any(p|p.name='Cyd') in
	Set{ada,bob,cyd}->
	collectNested(p|Sequence{p.name,p.civstat,p.gender,p.alive})=
	Bag{Sequence{'Ada','widowed' ,'female',true },
	Sequence{'Bob','divorced','male'  ,true },
	Sequence{'Cyd','married' ,'male'  ,false}}
	
Result: JavaOclBoolean(false)
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_abcAttrs_P0_VI
-->failed:
Constraint Specification: 
context Person  inv B1invariants_abcAttrs_P0_VI:
	let ada:Person=Person.allInstances()->any(name='Ada') in
	let bob:Person=Person.allInstances()->any(name='Bob') in
	let cyd:Person=Person.allInstances()->any(name='Cyd') in
	Set{ada,bob,cyd}->
	collectNested(Sequence{name,civstat,gender,alive})=
	Bag{Sequence{'Ada','widowed' ,'female',true },
	Sequence{'Bob','divorced','male'  ,true },
	Sequence{'Cyd','married' ,'male'  ,false}}
	
Result: JavaOclBoolean(false)
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_personsWithUndefinedHusband_P0_VT
-->failed:
Constraint Specification: 
context Person  inv B1invariants_personsWithUndefinedHusband_P0_VT:
	Person.allInstances()->
	select(p:Person|
	p.husband=
	Person.allInstances()->any(p:Person|p.wife->isEmpty()).wife
	)->collect(p:Person|p.name)=Bag{'Ada','Bob','Cyd','Dan'}
	
java.lang.NullPointerException
	thrown in: tudresden.ocl20.pivot.standardlibrary.java.internal.library.JavaOclBoolean.isTrue(JavaOclBoolean.java:178)
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_personsWithUndefinedHusband_P0_VN
-->failed:
Constraint Specification: 
context Person  inv B1invariants_personsWithUndefinedHusband_P0_VN:
	Person.allInstances()->
	select(p|
	p.husband=
	Person.allInstances()->any(p|p.wife->isEmpty()).wife
	)->collect(p|p.name)=Bag{'Ada','Bob','Cyd','Dan'}
	
java.lang.NullPointerException
	thrown in: tudresden.ocl20.pivot.standardlibrary.java.internal.library.JavaOclBoolean.isTrue(JavaOclBoolean.java:178)
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_personsWithUndefinedHusband_P0_VI
-->failed:
Constraint Specification: 
context Person  inv B1invariants_personsWithUndefinedHusband_P0_VI:
	Person.allInstances()->
	select(
	husband=
	Person.allInstances()->any(wife->isEmpty()).wife
	)->collect(name)=Bag{'Ada','Bob','Cyd','Dan'}
	
java.lang.NullPointerException
	thrown in: tudresden.ocl20.pivot.standardlibrary.java.internal.library.JavaOclBoolean.isTrue(JavaOclBoolean.java:178)
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_personsWithUndefinedHusbandAnyFalse_P0_VT
-->failed:
Constraint Specification: 
context Person  inv B1invariants_personsWithUndefinedHusbandAnyFalse_P0_VT:
	Person.allInstances()->
	select(p:Person|
	p.husband=Person.allInstances()->any(p:Person|false)
	)->collect(p:Person|p.name)=Bag{'Ada','Bob','Cyd','Dan'}
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_personsWithUndefinedHusbandAnyFalse_P0_VN
-->failed:
Constraint Specification: 
context Person  inv B1invariants_personsWithUndefinedHusbandAnyFalse_P0_VN:
	Person.allInstances()->
	select(p|
	p.husband=Person.allInstances()->any(p|false)
	)->collect(p|p.name)=Bag{'Ada','Bob','Cyd','Dan'}
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_personsWithUndefinedHusbandAnyFalse_P0_VI
-->failed:
Constraint Specification: 
context Person  inv B1invariants_personsWithUndefinedHusbandAnyFalse_P0_VI:
	Person.allInstances()->
	select(
	husband=Person.allInstances()->any(false)
	)->collect(name)=Bag{'Ada','Bob','Cyd','Dan'}
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_flatten_P0_VT
-->failed:
Constraint Specification: 
context Person  inv B1invariants_flatten_P0_VT:
	let dan:Person=Person.allInstances()->any(p:Person|p.name='Dan') in
	let eve:Person=Person.allInstances()->any(p:Person|p.name='Eve') in
	Set{Bag{eve},
	Bag{eve.spouse()},
	Bag{eve.spouse().spouse()},
	Bag{eve.spouse().spouse().spouse()},
	Bag{eve.spouse().spouse().spouse().spouse()},
	Bag{eve.spouse().spouse().spouse().spouse().spouse()}}->
	flatten()=Set{dan,eve}
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_flatten_P0_VN
-->failed:
Constraint Specification: 
context Person  inv B1invariants_flatten_P0_VN:
	let dan:Person=Person.allInstances()->any(p|p.name='Dan') in
	let eve:Person=Person.allInstances()->any(p|p.name='Eve') in
	Set{Bag{eve},
	Bag{eve.spouse()},
	Bag{eve.spouse().spouse()},
	Bag{eve.spouse().spouse().spouse()},
	Bag{eve.spouse().spouse().spouse().spouse()},
	Bag{eve.spouse().spouse().spouse().spouse().spouse()}}->
	flatten()=Set{dan,eve}
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_flatten_P0_VI
-->failed:
Constraint Specification: 
context Person  inv B1invariants_flatten_P0_VI:
	let dan:Person=Person.allInstances()->any(name='Dan') in
	let eve:Person=Person.allInstances()->any(name='Eve') in
	Set{Bag{eve},
	Bag{eve.spouse()},
	Bag{eve.spouse().spouse()},
	Bag{eve.spouse().spouse().spouse()},
	Bag{eve.spouse().spouse().spouse().spouse()},
	Bag{eve.spouse().spouse().spouse().spouse().spouse()}}->
	flatten()=Set{dan,eve}
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

test object: [,Person]
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_enumCivilStatus
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_enumGender
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_aliveDefined
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_nameCapitalThenSmallLetters_VT
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_nameCapitalThenSmallLetters_VN
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameForAll1_P0_VT
-->failed:
Constraint Specification: 
context Person  inv B1invariants_uniqueNameForAll1_P0_VT:
	Person.allInstances()->forAll(self2:Person|
	self<>self2 implies self.name<>self2.name)
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameForAll1_P0_VN
-->failed:
Constraint Specification: 
context Person  inv B1invariants_uniqueNameForAll1_P0_VN:
	Person.allInstances()->forAll(self2|
	self<>self2 implies self.name<>self2.name)
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameForAll2_P0_VT
-->failed:
Constraint Specification: 
context Person  inv B1invariants_uniqueNameForAll2_P0_VT:
	Person.allInstances()->forAll(p1,p2:Person|
	p1<>p2 implies p1.name<>p2.name)
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameForAll2_P0_VN
-->failed:
Constraint Specification: 
context Person  inv B1invariants_uniqueNameForAll2_P0_VN:
	Person.allInstances()->forAll(p1,p2|
	p1<>p2 implies p1.name<>p2.name)
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameIsUnique_P0_VT
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameIsUnique_P0_VN
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameIsUnique_P0_VI
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameOne_P0_VT
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameOne_P0_VN
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameOne_P0_VI
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameOneNot_P0_VI
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_femaleHasNoWife
-->failed:
Constraint Specification: 
context Person  inv B1invariants_femaleHasNoWife:
	self.gender='female' implies self.wife->isEmpty()
	
Result: JavaOclVoid(undefined: JavaOclVoid)
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_maleHasNoHusband
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_abcName_P0_VT
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_abcName_P0_VN
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_abcName_P0_VI
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_abcNameDotShortcutP0_VT
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_abcNameDotShortcutP0_VN
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_abcNameDotShortcutP0_VI
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_abcAttrs_P0_VT
-->failed:
Constraint Specification: 
context Person  inv B1invariants_abcAttrs_P0_VT:
	let ada:Person=Person.allInstances()->any(p:Person|p.name='Ada') in
	let bob:Person=Person.allInstances()->any(p:Person|p.name='Bob') in
	let cyd:Person=Person.allInstances()->any(p:Person|p.name='Cyd') in
	Set{ada,bob,cyd}->
	collectNested(p:Person|Sequence{p.name,p.civstat,p.gender,p.alive})=
	Bag{Sequence{'Ada','widowed' ,'female',true },
	Sequence{'Bob','divorced','male'  ,true },
	Sequence{'Cyd','married' ,'male'  ,false}}
	
Result: JavaOclBoolean(false)
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_abcAttrs_P0_VN
-->failed:
Constraint Specification: 
context Person  inv B1invariants_abcAttrs_P0_VN:
	let ada:Person=Person.allInstances()->any(p|p.name='Ada') in
	let bob:Person=Person.allInstances()->any(p|p.name='Bob') in
	let cyd:Person=Person.allInstances()->any(p|p.name='Cyd') in
	Set{ada,bob,cyd}->
	collectNested(p|Sequence{p.name,p.civstat,p.gender,p.alive})=
	Bag{Sequence{'Ada','widowed' ,'female',true },
	Sequence{'Bob','divorced','male'  ,true },
	Sequence{'Cyd','married' ,'male'  ,false}}
	
Result: JavaOclBoolean(false)
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_abcAttrs_P0_VI
-->failed:
Constraint Specification: 
context Person  inv B1invariants_abcAttrs_P0_VI:
	let ada:Person=Person.allInstances()->any(name='Ada') in
	let bob:Person=Person.allInstances()->any(name='Bob') in
	let cyd:Person=Person.allInstances()->any(name='Cyd') in
	Set{ada,bob,cyd}->
	collectNested(Sequence{name,civstat,gender,alive})=
	Bag{Sequence{'Ada','widowed' ,'female',true },
	Sequence{'Bob','divorced','male'  ,true },
	Sequence{'Cyd','married' ,'male'  ,false}}
	
Result: JavaOclBoolean(false)
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_personsWithUndefinedHusband_P0_VT
-->failed:
Constraint Specification: 
context Person  inv B1invariants_personsWithUndefinedHusband_P0_VT:
	Person.allInstances()->
	select(p:Person|
	p.husband=
	Person.allInstances()->any(p:Person|p.wife->isEmpty()).wife
	)->collect(p:Person|p.name)=Bag{'Ada','Bob','Cyd','Dan'}
	
java.lang.NullPointerException
	thrown in: tudresden.ocl20.pivot.standardlibrary.java.internal.library.JavaOclBoolean.isTrue(JavaOclBoolean.java:178)
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_personsWithUndefinedHusband_P0_VN
-->failed:
Constraint Specification: 
context Person  inv B1invariants_personsWithUndefinedHusband_P0_VN:
	Person.allInstances()->
	select(p|
	p.husband=
	Person.allInstances()->any(p|p.wife->isEmpty()).wife
	)->collect(p|p.name)=Bag{'Ada','Bob','Cyd','Dan'}
	
java.lang.NullPointerException
	thrown in: tudresden.ocl20.pivot.standardlibrary.java.internal.library.JavaOclBoolean.isTrue(JavaOclBoolean.java:178)
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_personsWithUndefinedHusband_P0_VI
-->failed:
Constraint Specification: 
context Person  inv B1invariants_personsWithUndefinedHusband_P0_VI:
	Person.allInstances()->
	select(
	husband=
	Person.allInstances()->any(wife->isEmpty()).wife
	)->collect(name)=Bag{'Ada','Bob','Cyd','Dan'}
	
java.lang.NullPointerException
	thrown in: tudresden.ocl20.pivot.standardlibrary.java.internal.library.JavaOclBoolean.isTrue(JavaOclBoolean.java:178)
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_personsWithUndefinedHusbandAnyFalse_P0_VT
-->failed:
Constraint Specification: 
context Person  inv B1invariants_personsWithUndefinedHusbandAnyFalse_P0_VT:
	Person.allInstances()->
	select(p:Person|
	p.husband=Person.allInstances()->any(p:Person|false)
	)->collect(p:Person|p.name)=Bag{'Ada','Bob','Cyd','Dan'}
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_personsWithUndefinedHusbandAnyFalse_P0_VN
-->failed:
Constraint Specification: 
context Person  inv B1invariants_personsWithUndefinedHusbandAnyFalse_P0_VN:
	Person.allInstances()->
	select(p|
	p.husband=Person.allInstances()->any(p|false)
	)->collect(p|p.name)=Bag{'Ada','Bob','Cyd','Dan'}
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_personsWithUndefinedHusbandAnyFalse_P0_VI
-->failed:
Constraint Specification: 
context Person  inv B1invariants_personsWithUndefinedHusbandAnyFalse_P0_VI:
	Person.allInstances()->
	select(
	husband=Person.allInstances()->any(false)
	)->collect(name)=Bag{'Ada','Bob','Cyd','Dan'}
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_flatten_P0_VT
-->failed:
Constraint Specification: 
context Person  inv B1invariants_flatten_P0_VT:
	let dan:Person=Person.allInstances()->any(p:Person|p.name='Dan') in
	let eve:Person=Person.allInstances()->any(p:Person|p.name='Eve') in
	Set{Bag{eve},
	Bag{eve.spouse()},
	Bag{eve.spouse().spouse()},
	Bag{eve.spouse().spouse().spouse()},
	Bag{eve.spouse().spouse().spouse().spouse()},
	Bag{eve.spouse().spouse().spouse().spouse().spouse()}}->
	flatten()=Set{dan,eve}
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_flatten_P0_VN
-->failed:
Constraint Specification: 
context Person  inv B1invariants_flatten_P0_VN:
	let dan:Person=Person.allInstances()->any(p|p.name='Dan') in
	let eve:Person=Person.allInstances()->any(p|p.name='Eve') in
	Set{Bag{eve},
	Bag{eve.spouse()},
	Bag{eve.spouse().spouse()},
	Bag{eve.spouse().spouse().spouse()},
	Bag{eve.spouse().spouse().spouse().spouse()},
	Bag{eve.spouse().spouse().spouse().spouse().spouse()}}->
	flatten()=Set{dan,eve}
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_flatten_P0_VI
-->failed:
Constraint Specification: 
context Person  inv B1invariants_flatten_P0_VI:
	let dan:Person=Person.allInstances()->any(name='Dan') in
	let eve:Person=Person.allInstances()->any(name='Eve') in
	Set{Bag{eve},
	Bag{eve.spouse()},
	Bag{eve.spouse().spouse()},
	Bag{eve.spouse().spouse().spouse()},
	Bag{eve.spouse().spouse().spouse().spouse()},
	Bag{eve.spouse().spouse().spouse().spouse().spouse()}}->
	flatten()=Set{dan,eve}
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

test object: [,Person]
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_enumCivilStatus
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_enumGender
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_aliveDefined
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_nameCapitalThenSmallLetters_VT
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_nameCapitalThenSmallLetters_VN
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameForAll1_P0_VT
-->failed:
Constraint Specification: 
context Person  inv B1invariants_uniqueNameForAll1_P0_VT:
	Person.allInstances()->forAll(self2:Person|
	self<>self2 implies self.name<>self2.name)
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameForAll1_P0_VN
-->failed:
Constraint Specification: 
context Person  inv B1invariants_uniqueNameForAll1_P0_VN:
	Person.allInstances()->forAll(self2|
	self<>self2 implies self.name<>self2.name)
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameForAll2_P0_VT
-->failed:
Constraint Specification: 
context Person  inv B1invariants_uniqueNameForAll2_P0_VT:
	Person.allInstances()->forAll(p1,p2:Person|
	p1<>p2 implies p1.name<>p2.name)
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameForAll2_P0_VN
-->failed:
Constraint Specification: 
context Person  inv B1invariants_uniqueNameForAll2_P0_VN:
	Person.allInstances()->forAll(p1,p2|
	p1<>p2 implies p1.name<>p2.name)
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameIsUnique_P0_VT
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameIsUnique_P0_VN
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameIsUnique_P0_VI
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameOne_P0_VT
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameOne_P0_VN
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameOne_P0_VI
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameOneNot_P0_VI
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_femaleHasNoWife
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_maleHasNoHusband
-->failed:
Constraint Specification: 
context Person  inv B1invariants_maleHasNoHusband:
	self.gender='male' implies self.husband->isEmpty()
	
Result: JavaOclVoid(undefined: JavaOclVoid)
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_abcName_P0_VT
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_abcName_P0_VN
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_abcName_P0_VI
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_abcNameDotShortcutP0_VT
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_abcNameDotShortcutP0_VN
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_abcNameDotShortcutP0_VI
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_abcAttrs_P0_VT
-->failed:
Constraint Specification: 
context Person  inv B1invariants_abcAttrs_P0_VT:
	let ada:Person=Person.allInstances()->any(p:Person|p.name='Ada') in
	let bob:Person=Person.allInstances()->any(p:Person|p.name='Bob') in
	let cyd:Person=Person.allInstances()->any(p:Person|p.name='Cyd') in
	Set{ada,bob,cyd}->
	collectNested(p:Person|Sequence{p.name,p.civstat,p.gender,p.alive})=
	Bag{Sequence{'Ada','widowed' ,'female',true },
	Sequence{'Bob','divorced','male'  ,true },
	Sequence{'Cyd','married' ,'male'  ,false}}
	
Result: JavaOclBoolean(false)
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_abcAttrs_P0_VN
-->failed:
Constraint Specification: 
context Person  inv B1invariants_abcAttrs_P0_VN:
	let ada:Person=Person.allInstances()->any(p|p.name='Ada') in
	let bob:Person=Person.allInstances()->any(p|p.name='Bob') in
	let cyd:Person=Person.allInstances()->any(p|p.name='Cyd') in
	Set{ada,bob,cyd}->
	collectNested(p|Sequence{p.name,p.civstat,p.gender,p.alive})=
	Bag{Sequence{'Ada','widowed' ,'female',true },
	Sequence{'Bob','divorced','male'  ,true },
	Sequence{'Cyd','married' ,'male'  ,false}}
	
Result: JavaOclBoolean(false)
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_abcAttrs_P0_VI
-->failed:
Constraint Specification: 
context Person  inv B1invariants_abcAttrs_P0_VI:
	let ada:Person=Person.allInstances()->any(name='Ada') in
	let bob:Person=Person.allInstances()->any(name='Bob') in
	let cyd:Person=Person.allInstances()->any(name='Cyd') in
	Set{ada,bob,cyd}->
	collectNested(Sequence{name,civstat,gender,alive})=
	Bag{Sequence{'Ada','widowed' ,'female',true },
	Sequence{'Bob','divorced','male'  ,true },
	Sequence{'Cyd','married' ,'male'  ,false}}
	
Result: JavaOclBoolean(false)
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_personsWithUndefinedHusband_P0_VT
-->failed:
Constraint Specification: 
context Person  inv B1invariants_personsWithUndefinedHusband_P0_VT:
	Person.allInstances()->
	select(p:Person|
	p.husband=
	Person.allInstances()->any(p:Person|p.wife->isEmpty()).wife
	)->collect(p:Person|p.name)=Bag{'Ada','Bob','Cyd','Dan'}
	
java.lang.NullPointerException
	thrown in: tudresden.ocl20.pivot.standardlibrary.java.internal.library.JavaOclBoolean.isTrue(JavaOclBoolean.java:178)
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_personsWithUndefinedHusband_P0_VN
-->failed:
Constraint Specification: 
context Person  inv B1invariants_personsWithUndefinedHusband_P0_VN:
	Person.allInstances()->
	select(p|
	p.husband=
	Person.allInstances()->any(p|p.wife->isEmpty()).wife
	)->collect(p|p.name)=Bag{'Ada','Bob','Cyd','Dan'}
	
java.lang.NullPointerException
	thrown in: tudresden.ocl20.pivot.standardlibrary.java.internal.library.JavaOclBoolean.isTrue(JavaOclBoolean.java:178)
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_personsWithUndefinedHusband_P0_VI
-->failed:
Constraint Specification: 
context Person  inv B1invariants_personsWithUndefinedHusband_P0_VI:
	Person.allInstances()->
	select(
	husband=
	Person.allInstances()->any(wife->isEmpty()).wife
	)->collect(name)=Bag{'Ada','Bob','Cyd','Dan'}
	
java.lang.NullPointerException
	thrown in: tudresden.ocl20.pivot.standardlibrary.java.internal.library.JavaOclBoolean.isTrue(JavaOclBoolean.java:178)
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_personsWithUndefinedHusbandAnyFalse_P0_VT
-->failed:
Constraint Specification: 
context Person  inv B1invariants_personsWithUndefinedHusbandAnyFalse_P0_VT:
	Person.allInstances()->
	select(p:Person|
	p.husband=Person.allInstances()->any(p:Person|false)
	)->collect(p:Person|p.name)=Bag{'Ada','Bob','Cyd','Dan'}
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_personsWithUndefinedHusbandAnyFalse_P0_VN
-->failed:
Constraint Specification: 
context Person  inv B1invariants_personsWithUndefinedHusbandAnyFalse_P0_VN:
	Person.allInstances()->
	select(p|
	p.husband=Person.allInstances()->any(p|false)
	)->collect(p|p.name)=Bag{'Ada','Bob','Cyd','Dan'}
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_personsWithUndefinedHusbandAnyFalse_P0_VI
-->failed:
Constraint Specification: 
context Person  inv B1invariants_personsWithUndefinedHusbandAnyFalse_P0_VI:
	Person.allInstances()->
	select(
	husband=Person.allInstances()->any(false)
	)->collect(name)=Bag{'Ada','Bob','Cyd','Dan'}
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_flatten_P0_VT
-->failed:
Constraint Specification: 
context Person  inv B1invariants_flatten_P0_VT:
	let dan:Person=Person.allInstances()->any(p:Person|p.name='Dan') in
	let eve:Person=Person.allInstances()->any(p:Person|p.name='Eve') in
	Set{Bag{eve},
	Bag{eve.spouse()},
	Bag{eve.spouse().spouse()},
	Bag{eve.spouse().spouse().spouse()},
	Bag{eve.spouse().spouse().spouse().spouse()},
	Bag{eve.spouse().spouse().spouse().spouse().spouse()}}->
	flatten()=Set{dan,eve}
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_flatten_P0_VN
-->failed:
Constraint Specification: 
context Person  inv B1invariants_flatten_P0_VN:
	let dan:Person=Person.allInstances()->any(p|p.name='Dan') in
	let eve:Person=Person.allInstances()->any(p|p.name='Eve') in
	Set{Bag{eve},
	Bag{eve.spouse()},
	Bag{eve.spouse().spouse()},
	Bag{eve.spouse().spouse().spouse()},
	Bag{eve.spouse().spouse().spouse().spouse()},
	Bag{eve.spouse().spouse().spouse().spouse().spouse()}}->
	flatten()=Set{dan,eve}
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_flatten_P0_VI
-->failed:
Constraint Specification: 
context Person  inv B1invariants_flatten_P0_VI:
	let dan:Person=Person.allInstances()->any(name='Dan') in
	let eve:Person=Person.allInstances()->any(name='Eve') in
	Set{Bag{eve},
	Bag{eve.spouse()},
	Bag{eve.spouse().spouse()},
	Bag{eve.spouse().spouse().spouse()},
	Bag{eve.spouse().spouse().spouse().spouse()},
	Bag{eve.spouse().spouse().spouse().spouse().spouse()}}->
	flatten()=Set{dan,eve}
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

test object: [,Person]
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_enumCivilStatus
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_enumGender
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_aliveDefined
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_nameCapitalThenSmallLetters_VT
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_nameCapitalThenSmallLetters_VN
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameForAll1_P0_VT
-->failed:
Constraint Specification: 
context Person  inv B1invariants_uniqueNameForAll1_P0_VT:
	Person.allInstances()->forAll(self2:Person|
	self<>self2 implies self.name<>self2.name)
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameForAll1_P0_VN
-->failed:
Constraint Specification: 
context Person  inv B1invariants_uniqueNameForAll1_P0_VN:
	Person.allInstances()->forAll(self2|
	self<>self2 implies self.name<>self2.name)
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameForAll2_P0_VT
-->failed:
Constraint Specification: 
context Person  inv B1invariants_uniqueNameForAll2_P0_VT:
	Person.allInstances()->forAll(p1,p2:Person|
	p1<>p2 implies p1.name<>p2.name)
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameForAll2_P0_VN
-->failed:
Constraint Specification: 
context Person  inv B1invariants_uniqueNameForAll2_P0_VN:
	Person.allInstances()->forAll(p1,p2|
	p1<>p2 implies p1.name<>p2.name)
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameIsUnique_P0_VT
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameIsUnique_P0_VN
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameIsUnique_P0_VI
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameOne_P0_VT
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameOne_P0_VN
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameOne_P0_VI
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameOneNot_P0_VI
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_femaleHasNoWife
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_maleHasNoHusband
-->failed:
Constraint Specification: 
context Person  inv B1invariants_maleHasNoHusband:
	self.gender='male' implies self.husband->isEmpty()
	
Result: JavaOclVoid(undefined: JavaOclVoid)
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_abcName_P0_VT
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_abcName_P0_VN
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_abcName_P0_VI
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_abcNameDotShortcutP0_VT
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_abcNameDotShortcutP0_VN
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_abcNameDotShortcutP0_VI
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_abcAttrs_P0_VT
-->failed:
Constraint Specification: 
context Person  inv B1invariants_abcAttrs_P0_VT:
	let ada:Person=Person.allInstances()->any(p:Person|p.name='Ada') in
	let bob:Person=Person.allInstances()->any(p:Person|p.name='Bob') in
	let cyd:Person=Person.allInstances()->any(p:Person|p.name='Cyd') in
	Set{ada,bob,cyd}->
	collectNested(p:Person|Sequence{p.name,p.civstat,p.gender,p.alive})=
	Bag{Sequence{'Ada','widowed' ,'female',true },
	Sequence{'Bob','divorced','male'  ,true },
	Sequence{'Cyd','married' ,'male'  ,false}}
	
Result: JavaOclBoolean(false)
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_abcAttrs_P0_VN
-->failed:
Constraint Specification: 
context Person  inv B1invariants_abcAttrs_P0_VN:
	let ada:Person=Person.allInstances()->any(p|p.name='Ada') in
	let bob:Person=Person.allInstances()->any(p|p.name='Bob') in
	let cyd:Person=Person.allInstances()->any(p|p.name='Cyd') in
	Set{ada,bob,cyd}->
	collectNested(p|Sequence{p.name,p.civstat,p.gender,p.alive})=
	Bag{Sequence{'Ada','widowed' ,'female',true },
	Sequence{'Bob','divorced','male'  ,true },
	Sequence{'Cyd','married' ,'male'  ,false}}
	
Result: JavaOclBoolean(false)
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_abcAttrs_P0_VI
-->failed:
Constraint Specification: 
context Person  inv B1invariants_abcAttrs_P0_VI:
	let ada:Person=Person.allInstances()->any(name='Ada') in
	let bob:Person=Person.allInstances()->any(name='Bob') in
	let cyd:Person=Person.allInstances()->any(name='Cyd') in
	Set{ada,bob,cyd}->
	collectNested(Sequence{name,civstat,gender,alive})=
	Bag{Sequence{'Ada','widowed' ,'female',true },
	Sequence{'Bob','divorced','male'  ,true },
	Sequence{'Cyd','married' ,'male'  ,false}}
	
Result: JavaOclBoolean(false)
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_personsWithUndefinedHusband_P0_VT
-->failed:
Constraint Specification: 
context Person  inv B1invariants_personsWithUndefinedHusband_P0_VT:
	Person.allInstances()->
	select(p:Person|
	p.husband=
	Person.allInstances()->any(p:Person|p.wife->isEmpty()).wife
	)->collect(p:Person|p.name)=Bag{'Ada','Bob','Cyd','Dan'}
	
java.lang.NullPointerException
	thrown in: tudresden.ocl20.pivot.standardlibrary.java.internal.library.JavaOclBoolean.isTrue(JavaOclBoolean.java:178)
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_personsWithUndefinedHusband_P0_VN
-->failed:
Constraint Specification: 
context Person  inv B1invariants_personsWithUndefinedHusband_P0_VN:
	Person.allInstances()->
	select(p|
	p.husband=
	Person.allInstances()->any(p|p.wife->isEmpty()).wife
	)->collect(p|p.name)=Bag{'Ada','Bob','Cyd','Dan'}
	
java.lang.NullPointerException
	thrown in: tudresden.ocl20.pivot.standardlibrary.java.internal.library.JavaOclBoolean.isTrue(JavaOclBoolean.java:178)
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_personsWithUndefinedHusband_P0_VI
-->failed:
Constraint Specification: 
context Person  inv B1invariants_personsWithUndefinedHusband_P0_VI:
	Person.allInstances()->
	select(
	husband=
	Person.allInstances()->any(wife->isEmpty()).wife
	)->collect(name)=Bag{'Ada','Bob','Cyd','Dan'}
	
java.lang.NullPointerException
	thrown in: tudresden.ocl20.pivot.standardlibrary.java.internal.library.JavaOclBoolean.isTrue(JavaOclBoolean.java:178)
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_personsWithUndefinedHusbandAnyFalse_P0_VT
-->failed:
Constraint Specification: 
context Person  inv B1invariants_personsWithUndefinedHusbandAnyFalse_P0_VT:
	Person.allInstances()->
	select(p:Person|
	p.husband=Person.allInstances()->any(p:Person|false)
	)->collect(p:Person|p.name)=Bag{'Ada','Bob','Cyd','Dan'}
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_personsWithUndefinedHusbandAnyFalse_P0_VN
-->failed:
Constraint Specification: 
context Person  inv B1invariants_personsWithUndefinedHusbandAnyFalse_P0_VN:
	Person.allInstances()->
	select(p|
	p.husband=Person.allInstances()->any(p|false)
	)->collect(p|p.name)=Bag{'Ada','Bob','Cyd','Dan'}
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_personsWithUndefinedHusbandAnyFalse_P0_VI
-->failed:
Constraint Specification: 
context Person  inv B1invariants_personsWithUndefinedHusbandAnyFalse_P0_VI:
	Person.allInstances()->
	select(
	husband=Person.allInstances()->any(false)
	)->collect(name)=Bag{'Ada','Bob','Cyd','Dan'}
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_flatten_P0_VT
-->failed:
Constraint Specification: 
context Person  inv B1invariants_flatten_P0_VT:
	let dan:Person=Person.allInstances()->any(p:Person|p.name='Dan') in
	let eve:Person=Person.allInstances()->any(p:Person|p.name='Eve') in
	Set{Bag{eve},
	Bag{eve.spouse()},
	Bag{eve.spouse().spouse()},
	Bag{eve.spouse().spouse().spouse()},
	Bag{eve.spouse().spouse().spouse().spouse()},
	Bag{eve.spouse().spouse().spouse().spouse().spouse()}}->
	flatten()=Set{dan,eve}
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_flatten_P0_VN
-->failed:
Constraint Specification: 
context Person  inv B1invariants_flatten_P0_VN:
	let dan:Person=Person.allInstances()->any(p|p.name='Dan') in
	let eve:Person=Person.allInstances()->any(p|p.name='Eve') in
	Set{Bag{eve},
	Bag{eve.spouse()},
	Bag{eve.spouse().spouse()},
	Bag{eve.spouse().spouse().spouse()},
	Bag{eve.spouse().spouse().spouse().spouse()},
	Bag{eve.spouse().spouse().spouse().spouse().spouse()}}->
	flatten()=Set{dan,eve}
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_flatten_P0_VI
-->failed:
Constraint Specification: 
context Person  inv B1invariants_flatten_P0_VI:
	let dan:Person=Person.allInstances()->any(name='Dan') in
	let eve:Person=Person.allInstances()->any(name='Eve') in
	Set{Bag{eve},
	Bag{eve.spouse()},
	Bag{eve.spouse().spouse()},
	Bag{eve.spouse().spouse().spouse()},
	Bag{eve.spouse().spouse().spouse().spouse()},
	Bag{eve.spouse().spouse().spouse().spouse().spouse()}}->
	flatten()=Set{dan,eve}
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

test object: [,Person]
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_enumCivilStatus
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_enumGender
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_aliveDefined
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_nameCapitalThenSmallLetters_VT
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_nameCapitalThenSmallLetters_VN
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameForAll1_P0_VT
-->failed:
Constraint Specification: 
context Person  inv B1invariants_uniqueNameForAll1_P0_VT:
	Person.allInstances()->forAll(self2:Person|
	self<>self2 implies self.name<>self2.name)
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameForAll1_P0_VN
-->failed:
Constraint Specification: 
context Person  inv B1invariants_uniqueNameForAll1_P0_VN:
	Person.allInstances()->forAll(self2|
	self<>self2 implies self.name<>self2.name)
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameForAll2_P0_VT
-->failed:
Constraint Specification: 
context Person  inv B1invariants_uniqueNameForAll2_P0_VT:
	Person.allInstances()->forAll(p1,p2:Person|
	p1<>p2 implies p1.name<>p2.name)
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameForAll2_P0_VN
-->failed:
Constraint Specification: 
context Person  inv B1invariants_uniqueNameForAll2_P0_VN:
	Person.allInstances()->forAll(p1,p2|
	p1<>p2 implies p1.name<>p2.name)
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameIsUnique_P0_VT
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameIsUnique_P0_VN
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameIsUnique_P0_VI
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameOne_P0_VT
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameOne_P0_VN
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameOne_P0_VI
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_uniqueNameOneNot_P0_VI
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_femaleHasNoWife
-->failed:
Constraint Specification: 
context Person  inv B1invariants_femaleHasNoWife:
	self.gender='female' implies self.wife->isEmpty()
	
Result: JavaOclVoid(undefined: JavaOclVoid)
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_maleHasNoHusband
-->failed:
Constraint Specification: 
context Person  inv B1invariants_maleHasNoHusband:
	self.gender='male' implies self.husband->isEmpty()
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_abcName_P0_VT
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_abcName_P0_VN
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_abcName_P0_VI
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_abcNameDotShortcutP0_VT
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_abcNameDotShortcutP0_VN
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_abcNameDotShortcutP0_VI
-->OK.
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_abcAttrs_P0_VT
-->failed:
Constraint Specification: 
context Person  inv B1invariants_abcAttrs_P0_VT:
	let ada:Person=Person.allInstances()->any(p:Person|p.name='Ada') in
	let bob:Person=Person.allInstances()->any(p:Person|p.name='Bob') in
	let cyd:Person=Person.allInstances()->any(p:Person|p.name='Cyd') in
	Set{ada,bob,cyd}->
	collectNested(p:Person|Sequence{p.name,p.civstat,p.gender,p.alive})=
	Bag{Sequence{'Ada','widowed' ,'female',true },
	Sequence{'Bob','divorced','male'  ,true },
	Sequence{'Cyd','married' ,'male'  ,false}}
	
Result: JavaOclBoolean(false)
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_abcAttrs_P0_VN
-->failed:
Constraint Specification: 
context Person  inv B1invariants_abcAttrs_P0_VN:
	let ada:Person=Person.allInstances()->any(p|p.name='Ada') in
	let bob:Person=Person.allInstances()->any(p|p.name='Bob') in
	let cyd:Person=Person.allInstances()->any(p|p.name='Cyd') in
	Set{ada,bob,cyd}->
	collectNested(p|Sequence{p.name,p.civstat,p.gender,p.alive})=
	Bag{Sequence{'Ada','widowed' ,'female',true },
	Sequence{'Bob','divorced','male'  ,true },
	Sequence{'Cyd','married' ,'male'  ,false}}
	
Result: JavaOclBoolean(false)
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_abcAttrs_P0_VI
-->failed:
Constraint Specification: 
context Person  inv B1invariants_abcAttrs_P0_VI:
	let ada:Person=Person.allInstances()->any(name='Ada') in
	let bob:Person=Person.allInstances()->any(name='Bob') in
	let cyd:Person=Person.allInstances()->any(name='Cyd') in
	Set{ada,bob,cyd}->
	collectNested(Sequence{name,civstat,gender,alive})=
	Bag{Sequence{'Ada','widowed' ,'female',true },
	Sequence{'Bob','divorced','male'  ,true },
	Sequence{'Cyd','married' ,'male'  ,false}}
	
Result: JavaOclBoolean(false)
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_personsWithUndefinedHusband_P0_VT
-->failed:
Constraint Specification: 
context Person  inv B1invariants_personsWithUndefinedHusband_P0_VT:
	Person.allInstances()->
	select(p:Person|
	p.husband=
	Person.allInstances()->any(p:Person|p.wife->isEmpty()).wife
	)->collect(p:Person|p.name)=Bag{'Ada','Bob','Cyd','Dan'}
	
java.lang.NullPointerException
	thrown in: tudresden.ocl20.pivot.standardlibrary.java.internal.library.JavaOclBoolean.isTrue(JavaOclBoolean.java:178)
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_personsWithUndefinedHusband_P0_VN
-->failed:
Constraint Specification: 
context Person  inv B1invariants_personsWithUndefinedHusband_P0_VN:
	Person.allInstances()->
	select(p|
	p.husband=
	Person.allInstances()->any(p|p.wife->isEmpty()).wife
	)->collect(p|p.name)=Bag{'Ada','Bob','Cyd','Dan'}
	
java.lang.NullPointerException
	thrown in: tudresden.ocl20.pivot.standardlibrary.java.internal.library.JavaOclBoolean.isTrue(JavaOclBoolean.java:178)
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_personsWithUndefinedHusband_P0_VI
-->failed:
Constraint Specification: 
context Person  inv B1invariants_personsWithUndefinedHusband_P0_VI:
	Person.allInstances()->
	select(
	husband=
	Person.allInstances()->any(wife->isEmpty()).wife
	)->collect(name)=Bag{'Ada','Bob','Cyd','Dan'}
	
java.lang.NullPointerException
	thrown in: tudresden.ocl20.pivot.standardlibrary.java.internal.library.JavaOclBoolean.isTrue(JavaOclBoolean.java:178)
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_personsWithUndefinedHusbandAnyFalse_P0_VT
-->failed:
Constraint Specification: 
context Person  inv B1invariants_personsWithUndefinedHusbandAnyFalse_P0_VT:
	Person.allInstances()->
	select(p:Person|
	p.husband=Person.allInstances()->any(p:Person|false)
	)->collect(p:Person|p.name)=Bag{'Ada','Bob','Cyd','Dan'}
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_personsWithUndefinedHusbandAnyFalse_P0_VN
-->failed:
Constraint Specification: 
context Person  inv B1invariants_personsWithUndefinedHusbandAnyFalse_P0_VN:
	Person.allInstances()->
	select(p|
	p.husband=Person.allInstances()->any(p|false)
	)->collect(p|p.name)=Bag{'Ada','Bob','Cyd','Dan'}
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_personsWithUndefinedHusbandAnyFalse_P0_VI
-->failed:
Constraint Specification: 
context Person  inv B1invariants_personsWithUndefinedHusbandAnyFalse_P0_VI:
	Person.allInstances()->
	select(
	husband=Person.allInstances()->any(false)
	)->collect(name)=Bag{'Ada','Bob','Cyd','Dan'}
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_flatten_P0_VT
-->failed:
Constraint Specification: 
context Person  inv B1invariants_flatten_P0_VT:
	let dan:Person=Person.allInstances()->any(p:Person|p.name='Dan') in
	let eve:Person=Person.allInstances()->any(p:Person|p.name='Eve') in
	Set{Bag{eve},
	Bag{eve.spouse()},
	Bag{eve.spouse().spouse()},
	Bag{eve.spouse().spouse().spouse()},
	Bag{eve.spouse().spouse().spouse().spouse()},
	Bag{eve.spouse().spouse().spouse().spouse().spouse()}}->
	flatten()=Set{dan,eve}
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_flatten_P0_VN
-->failed:
Constraint Specification: 
context Person  inv B1invariants_flatten_P0_VN:
	let dan:Person=Person.allInstances()->any(p|p.name='Dan') in
	let eve:Person=Person.allInstances()->any(p|p.name='Eve') in
	Set{Bag{eve},
	Bag{eve.spouse()},
	Bag{eve.spouse().spouse()},
	Bag{eve.spouse().spouse().spouse()},
	Bag{eve.spouse().spouse().spouse().spouse()},
	Bag{eve.spouse().spouse().spouse().spouse().spouse()}}->
	flatten()=Set{dan,eve}
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Constraint: root::tudresden::ocl20::benchmark::testdata::b1::B1invariants_flatten_P0_VI
-->failed:
Constraint Specification: 
context Person  inv B1invariants_flatten_P0_VI:
	let dan:Person=Person.allInstances()->any(name='Dan') in
	let eve:Person=Person.allInstances()->any(name='Eve') in
	Set{Bag{eve},
	Bag{eve.spouse()},
	Bag{eve.spouse().spouse()},
	Bag{eve.spouse().spouse().spouse()},
	Bag{eve.spouse().spouse().spouse().spouse()},
	Bag{eve.spouse().spouse().spouse().spouse().spouse()}}->
	flatten()=Set{dan,eve}
	
java.lang.NoClassDefFoundError: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
	thrown in: java.lang.Class.getDeclaredMethods0(Native Method)
Message/Type: tudresden/ocl20/pivot/pivotmodel/impl/PrimitiveTypeImpl
..........................................

Interpretation Statistics:
------------------------------------------
  successful	: 93 
  failed	 	: 87 
  skipped	 	: 0 
  total	 	: 180 


==========================================
Checking current model instance against loaded invariants
==========================================
invariants  : 0
test objects: 5
total tests : 0

test object: [,Person]
..........................................

test object: [,Person]
..........................................

test object: [,Person]
..........................................

test object: [,Person]
..........................................

test object: [,Person]
..........................................

Interpretation Statistics:
------------------------------------------
  successful	: 0 
  failed	 	: 0 
  skipped	 	: 0 
  total	 	: 0 
