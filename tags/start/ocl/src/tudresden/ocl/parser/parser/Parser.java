/* This file was generated by SableCC (http://www.sable.mcgill.ca/sablecc/). */

package tudresden.ocl.parser.parser;

import tudresden.ocl.parser.lexer.*;
import tudresden.ocl.parser.node.*;
import tudresden.ocl.parser.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected Node node;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    protected void filter() throws ParserException, LexerException, IOException
    {
    }

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;

        if(actionTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Parser.class.getResourceAsStream("parser.dat")));

                // read actionTable
                int length = s.readInt();
                actionTable = new int[length][][];
                for(int i = 0; i < actionTable.length; i++)
                {
                    length = s.readInt();
                    actionTable[i] = new int[length][3];
                    for(int j = 0; j < actionTable[i].length; j++)
                    {
                        for(int k = 0; k < 3; k++)
                        {
                            actionTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read gotoTable
                length = s.readInt();
                gotoTable = new int[length][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][2];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        for(int k = 0; k < 2; k++)
                        {
                            gotoTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read errorMessages
                length = s.readInt();
                errorMessages = new String[length];
                for(int i = 0; i < errorMessages.length; i++)
                {
                    length = s.readInt();
                    StringBuffer buffer = new StringBuffer();

                    for(int j = 0; j < length; j++)
                    {
                        buffer.append(s.readChar());
                    }
                    errorMessages[i] = buffer.toString();
                }

                // read errors
                length = s.readInt();
                errors = new int[length];
                for(int i = 0; i < errors.length; i++)
                {
                    errors[i] = s.readInt();
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("Unable to read parser.dat.");
            }
        }
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private void push(int state, Node node, boolean filter) throws ParserException, LexerException, IOException
    {
        this.node = node;

        if(filter)
        {
            filter();
        }

        if(!stack.hasNext())
        {
            stack.add(new State(state, this.node));
            return;
        }

        State s = (State) stack.next();
        s.state = state;
        s.node = this.node;
    }

    private int state()
    {
        State s = (State) stack.previous();
        stack.next();
        return s.state;
    }

    private Node pop()
    {
        return (Node) ((State) stack.previous()).node;
    }

    private int index(Switchable token)
    {
        converter.index = -1;
        token.apply(converter);
        return converter.index;
    }

    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, false);

        List ign = null;
        while(true)
        {
            while(index(lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedLinkedList(NodeCast.instance);
                }

                ign.add(lexer.next());
            }

            if(ign != null)
            {
                ignoredTokens.setIn(lexer.peek(), ign);
                ign = null;
            }

            last_pos = lexer.peek().getPos();
            last_line = lexer.peek().getLine();

            int index = index(lexer.peek());
            action[0] = actionTable[state()][0][1];
            action[1] = actionTable[state()][0][2];

            int low = 1;
            int high = actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[state()][middle][1];
                    action[1] = actionTable[state()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
                    push(action[1], lexer.next(), true);
                    last_shift = action[1];
                    break;
                case REDUCE:
                    switch(action[1])
                    {
                    case 0: { Node node = new0(); push(goTo(0), node, true); } break;
                    case 1: { Node node = new1(); push(goTo(61), node, false); } break;
                    case 2: { Node node = new2(); push(goTo(61), node, false); } break;
                    case 3: { Node node = new3(); push(goTo(1), node, true); } break;
                    case 4: { Node node = new4(); push(goTo(1), node, true); } break;
                    case 5: { Node node = new5(); push(goTo(2), node, true); } break;
                    case 6: { Node node = new6(); push(goTo(3), node, true); } break;
                    case 7: { Node node = new7(); push(goTo(3), node, true); } break;
                    case 8: { Node node = new8(); push(goTo(4), node, true); } break;
                    case 9: { Node node = new9(); push(goTo(4), node, true); } break;
                    case 10: { Node node = new10(); push(goTo(5), node, true); } break;
                    case 11: { Node node = new11(); push(goTo(6), node, true); } break;
                    case 12: { Node node = new12(); push(goTo(6), node, true); } break;
                    case 13: { Node node = new13(); push(goTo(6), node, true); } break;
                    case 14: { Node node = new14(); push(goTo(6), node, true); } break;
                    case 15: { Node node = new15(); push(goTo(7), node, true); } break;
                    case 16: { Node node = new16(); push(goTo(8), node, true); } break;
                    case 17: { Node node = new17(); push(goTo(8), node, true); } break;
                    case 18: { Node node = new18(); push(goTo(62), node, false); } break;
                    case 19: { Node node = new19(); push(goTo(62), node, false); } break;
                    case 20: { Node node = new20(); push(goTo(9), node, true); } break;
                    case 21: { Node node = new21(); push(goTo(10), node, true); } break;
                    case 22: { Node node = new22(); push(goTo(11), node, true); } break;
                    case 23: { Node node = new23(); push(goTo(11), node, true); } break;
                    case 24: { Node node = new24(); push(goTo(11), node, true); } break;
                    case 25: { Node node = new25(); push(goTo(12), node, true); } break;
                    case 26: { Node node = new26(); push(goTo(12), node, true); } break;
                    case 27: { Node node = new27(); push(goTo(63), node, false); } break;
                    case 28: { Node node = new28(); push(goTo(63), node, false); } break;
                    case 29: { Node node = new29(); push(goTo(13), node, true); } break;
                    case 30: { Node node = new30(); push(goTo(14), node, true); } break;
                    case 31: { Node node = new31(); push(goTo(14), node, true); } break;
                    case 32: { Node node = new32(); push(goTo(64), node, false); } break;
                    case 33: { Node node = new33(); push(goTo(64), node, false); } break;
                    case 34: { Node node = new34(); push(goTo(15), node, true); } break;
                    case 35: { Node node = new35(); push(goTo(16), node, true); } break;
                    case 36: { Node node = new36(); push(goTo(16), node, true); } break;
                    case 37: { Node node = new37(); push(goTo(17), node, true); } break;
                    case 38: { Node node = new38(); push(goTo(18), node, true); } break;
                    case 39: { Node node = new39(); push(goTo(18), node, true); } break;
                    case 40: { Node node = new40(); push(goTo(65), node, false); } break;
                    case 41: { Node node = new41(); push(goTo(65), node, false); } break;
                    case 42: { Node node = new42(); push(goTo(19), node, true); } break;
                    case 43: { Node node = new43(); push(goTo(20), node, true); } break;
                    case 44: { Node node = new44(); push(goTo(20), node, true); } break;
                    case 45: { Node node = new45(); push(goTo(66), node, false); } break;
                    case 46: { Node node = new46(); push(goTo(66), node, false); } break;
                    case 47: { Node node = new47(); push(goTo(21), node, true); } break;
                    case 48: { Node node = new48(); push(goTo(22), node, true); } break;
                    case 49: { Node node = new49(); push(goTo(22), node, true); } break;
                    case 50: { Node node = new50(); push(goTo(23), node, true); } break;
                    case 51: { Node node = new51(); push(goTo(23), node, true); } break;
                    case 52: { Node node = new52(); push(goTo(67), node, false); } break;
                    case 53: { Node node = new53(); push(goTo(67), node, false); } break;
                    case 54: { Node node = new54(); push(goTo(24), node, true); } break;
                    case 55: { Node node = new55(); push(goTo(25), node, true); } break;
                    case 56: { Node node = new56(); push(goTo(25), node, true); } break;
                    case 57: { Node node = new57(); push(goTo(26), node, true); } break;
                    case 58: { Node node = new58(); push(goTo(26), node, true); } break;
                    case 59: { Node node = new59(); push(goTo(26), node, true); } break;
                    case 60: { Node node = new60(); push(goTo(26), node, true); } break;
                    case 61: { Node node = new61(); push(goTo(26), node, true); } break;
                    case 62: { Node node = new62(); push(goTo(26), node, true); } break;
                    case 63: { Node node = new63(); push(goTo(26), node, true); } break;
                    case 64: { Node node = new64(); push(goTo(26), node, true); } break;
                    case 65: { Node node = new65(); push(goTo(26), node, true); } break;
                    case 66: { Node node = new66(); push(goTo(26), node, true); } break;
                    case 67: { Node node = new67(); push(goTo(26), node, true); } break;
                    case 68: { Node node = new68(); push(goTo(26), node, true); } break;
                    case 69: { Node node = new69(); push(goTo(27), node, true); } break;
                    case 70: { Node node = new70(); push(goTo(27), node, true); } break;
                    case 71: { Node node = new71(); push(goTo(27), node, true); } break;
                    case 72: { Node node = new72(); push(goTo(68), node, false); } break;
                    case 73: { Node node = new73(); push(goTo(68), node, false); } break;
                    case 74: { Node node = new74(); push(goTo(28), node, true); } break;
                    case 75: { Node node = new75(); push(goTo(28), node, true); } break;
                    case 76: { Node node = new76(); push(goTo(28), node, true); } break;
                    case 77: { Node node = new77(); push(goTo(28), node, true); } break;
                    case 78: { Node node = new78(); push(goTo(29), node, true); } break;
                    case 79: { Node node = new79(); push(goTo(29), node, true); } break;
                    case 80: { Node node = new80(); push(goTo(30), node, true); } break;
                    case 81: { Node node = new81(); push(goTo(31), node, true); } break;
                    case 82: { Node node = new82(); push(goTo(31), node, true); } break;
                    case 83: { Node node = new83(); push(goTo(31), node, true); } break;
                    case 84: { Node node = new84(); push(goTo(31), node, true); } break;
                    case 85: { Node node = new85(); push(goTo(31), node, true); } break;
                    case 86: { Node node = new86(); push(goTo(32), node, true); } break;
                    case 87: { Node node = new87(); push(goTo(32), node, true); } break;
                    case 88: { Node node = new88(); push(goTo(69), node, false); } break;
                    case 89: { Node node = new89(); push(goTo(69), node, false); } break;
                    case 90: { Node node = new90(); push(goTo(33), node, true); } break;
                    case 91: { Node node = new91(); push(goTo(34), node, true); } break;
                    case 92: { Node node = new92(); push(goTo(34), node, true); } break;
                    case 93: { Node node = new93(); push(goTo(35), node, true); } break;
                    case 94: { Node node = new94(); push(goTo(35), node, true); } break;
                    case 95: { Node node = new95(); push(goTo(36), node, true); } break;
                    case 96: { Node node = new96(); push(goTo(36), node, true); } break;
                    case 97: { Node node = new97(); push(goTo(37), node, true); } break;
                    case 98: { Node node = new98(); push(goTo(70), node, false); } break;
                    case 99: { Node node = new99(); push(goTo(70), node, false); } break;
                    case 100: { Node node = new100(); push(goTo(37), node, true); } break;
                    case 101: { Node node = new101(); push(goTo(38), node, true); } break;
                    case 102: { Node node = new102(); push(goTo(39), node, true); } break;
                    case 103: { Node node = new103(); push(goTo(39), node, true); } break;
                    case 104: { Node node = new104(); push(goTo(39), node, true); } break;
                    case 105: { Node node = new105(); push(goTo(39), node, true); } break;
                    case 106: { Node node = new106(); push(goTo(39), node, true); } break;
                    case 107: { Node node = new107(); push(goTo(39), node, true); } break;
                    case 108: { Node node = new108(); push(goTo(39), node, true); } break;
                    case 109: { Node node = new109(); push(goTo(39), node, true); } break;
                    case 110: { Node node = new110(); push(goTo(40), node, true); } break;
                    case 111: { Node node = new111(); push(goTo(41), node, true); } break;
                    case 112: { Node node = new112(); push(goTo(41), node, true); } break;
                    case 113: { Node node = new113(); push(goTo(71), node, false); } break;
                    case 114: { Node node = new114(); push(goTo(71), node, false); } break;
                    case 115: { Node node = new115(); push(goTo(41), node, true); } break;
                    case 116: { Node node = new116(); push(goTo(41), node, true); } break;
                    case 117: { Node node = new117(); push(goTo(41), node, true); } break;
                    case 118: { Node node = new118(); push(goTo(42), node, true); } break;
                    case 119: { Node node = new119(); push(goTo(43), node, true); } break;
                    case 120: { Node node = new120(); push(goTo(44), node, true); } break;
                    case 121: { Node node = new121(); push(goTo(44), node, true); } break;
                    case 122: { Node node = new122(); push(goTo(72), node, false); } break;
                    case 123: { Node node = new123(); push(goTo(72), node, false); } break;
                    case 124: { Node node = new124(); push(goTo(45), node, true); } break;
                    case 125: { Node node = new125(); push(goTo(46), node, true); } break;
                    case 126: { Node node = new126(); push(goTo(46), node, true); } break;
                    case 127: { Node node = new127(); push(goTo(47), node, true); } break;
                    case 128: { Node node = new128(); push(goTo(47), node, true); } break;
                    case 129: { Node node = new129(); push(goTo(47), node, true); } break;
                    case 130: { Node node = new130(); push(goTo(47), node, true); } break;
                    case 131: { Node node = new131(); push(goTo(48), node, true); } break;
                    case 132: { Node node = new132(); push(goTo(48), node, true); } break;
                    case 133: { Node node = new133(); push(goTo(73), node, false); } break;
                    case 134: { Node node = new134(); push(goTo(73), node, false); } break;
                    case 135: { Node node = new135(); push(goTo(49), node, true); } break;
                    case 136: { Node node = new136(); push(goTo(49), node, true); } break;
                    case 137: { Node node = new137(); push(goTo(50), node, true); } break;
                    case 138: { Node node = new138(); push(goTo(51), node, true); } break;
                    case 139: { Node node = new139(); push(goTo(51), node, true); } break;
                    case 140: { Node node = new140(); push(goTo(52), node, true); } break;
                    case 141: { Node node = new141(); push(goTo(53), node, true); } break;
                    case 142: { Node node = new142(); push(goTo(53), node, true); } break;
                    case 143: { Node node = new143(); push(goTo(74), node, false); } break;
                    case 144: { Node node = new144(); push(goTo(74), node, false); } break;
                    case 145: { Node node = new145(); push(goTo(54), node, true); } break;
                    case 146: { Node node = new146(); push(goTo(55), node, true); } break;
                    case 147: { Node node = new147(); push(goTo(55), node, true); } break;
                    case 148: { Node node = new148(); push(goTo(55), node, true); } break;
                    case 149: { Node node = new149(); push(goTo(55), node, true); } break;
                    case 150: { Node node = new150(); push(goTo(56), node, true); } break;
                    case 151: { Node node = new151(); push(goTo(56), node, true); } break;
                    case 152: { Node node = new152(); push(goTo(56), node, true); } break;
                    case 153: { Node node = new153(); push(goTo(56), node, true); } break;
                    case 154: { Node node = new154(); push(goTo(57), node, true); } break;
                    case 155: { Node node = new155(); push(goTo(57), node, true); } break;
                    case 156: { Node node = new156(); push(goTo(57), node, true); } break;
                    case 157: { Node node = new157(); push(goTo(57), node, true); } break;
                    case 158: { Node node = new158(); push(goTo(57), node, true); } break;
                    case 159: { Node node = new159(); push(goTo(57), node, true); } break;
                    case 160: { Node node = new160(); push(goTo(58), node, true); } break;
                    case 161: { Node node = new161(); push(goTo(58), node, true); } break;
                    case 162: { Node node = new162(); push(goTo(59), node, true); } break;
                    case 163: { Node node = new163(); push(goTo(59), node, true); } break;
                    case 164: { Node node = new164(); push(goTo(60), node, true); } break;
                    case 165: { Node node = new165(); push(goTo(60), node, true); } break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.next();
                        PConstraint node1 = (PConstraint) pop();
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }

    Node new0()
    {
        XPConstraintBody node2 = (XPConstraintBody) pop();
        PContextDeclaration node1 = (PContextDeclaration) pop();
        AConstraint node = new AConstraint(node1, node2);
        return node;
    }

    Node new1()
    {
        PConstraintBody node2 = (PConstraintBody) pop();
        XPConstraintBody node1 = (XPConstraintBody) pop();
        X1PConstraintBody node = new X1PConstraintBody(node1, node2);
        return node;
    }

    Node new2()
    {
        PConstraintBody node1 = (PConstraintBody) pop();
        X2PConstraintBody node = new X2PConstraintBody(node1);
        return node;
    }

    Node new3()
    {
        PExpression node4 = (PExpression) pop();
        TColon node3 = (TColon) pop();
        TName node2 = null;
        PStereotype node1 = (PStereotype) pop();
        AConstraintBody node = new AConstraintBody(node1, node2, node3, node4);
        return node;
    }

    Node new4()
    {
        PExpression node4 = (PExpression) pop();
        TColon node3 = (TColon) pop();
        TName node2 = (TName) pop();
        PStereotype node1 = (PStereotype) pop();
        AConstraintBody node = new AConstraintBody(node1, node2, node3, node4);
        return node;
    }

    Node new5()
    {
        PContextBody node2 = (PContextBody) pop();
        TContext node1 = (TContext) pop();
        AContextDeclaration node = new AContextDeclaration(node1, node2);
        return node;
    }

    Node new6()
    {
        PClassifierContext node1 = (PClassifierContext) pop();
        AClassifierContextBody node = new AClassifierContextBody(node1);
        return node;
    }

    Node new7()
    {
        POperationContext node1 = (POperationContext) pop();
        AOperationContextBody node = new AOperationContextBody(node1);
        return node;
    }

    Node new8()
    {
        PTypeName node2 = (PTypeName) pop();
        PClassifierHead node1 = null;
        AClassifierContext node = new AClassifierContext(node1, node2);
        return node;
    }

    Node new9()
    {
        PTypeName node2 = (PTypeName) pop();
        PClassifierHead node1 = (PClassifierHead) pop();
        AClassifierContext node = new AClassifierContext(node1, node2);
        return node;
    }

    Node new10()
    {
        TColon node2 = (TColon) pop();
        TName node1 = (TName) pop();
        AClassifierHead node = new AClassifierHead(node1, node2);
        return node;
    }

    Node new11()
    {
        PReturnTypeDeclaration node7 = null;
        TRPar node6 = (TRPar) pop();
        PFormalParameterList node5 = null;
        TLPar node4 = (TLPar) pop();
        TName node3 = (TName) pop();
        TDcolon node2 = (TDcolon) pop();
        PTypeName node1 = (PTypeName) pop();
        AOperationContext node = new AOperationContext(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new12()
    {
        PReturnTypeDeclaration node7 = null;
        TRPar node6 = (TRPar) pop();
        PFormalParameterList node5 = (PFormalParameterList) pop();
        TLPar node4 = (TLPar) pop();
        TName node3 = (TName) pop();
        TDcolon node2 = (TDcolon) pop();
        PTypeName node1 = (PTypeName) pop();
        AOperationContext node = new AOperationContext(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new13()
    {
        PReturnTypeDeclaration node7 = (PReturnTypeDeclaration) pop();
        TRPar node6 = (TRPar) pop();
        PFormalParameterList node5 = null;
        TLPar node4 = (TLPar) pop();
        TName node3 = (TName) pop();
        TDcolon node2 = (TDcolon) pop();
        PTypeName node1 = (PTypeName) pop();
        AOperationContext node = new AOperationContext(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new14()
    {
        PReturnTypeDeclaration node7 = (PReturnTypeDeclaration) pop();
        TRPar node6 = (TRPar) pop();
        PFormalParameterList node5 = (PFormalParameterList) pop();
        TLPar node4 = (TLPar) pop();
        TName node3 = (TName) pop();
        TDcolon node2 = (TDcolon) pop();
        PTypeName node1 = (PTypeName) pop();
        AOperationContext node = new AOperationContext(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new15()
    {
        PTypeName node2 = (PTypeName) pop();
        TColon node1 = (TColon) pop();
        AReturnTypeDeclaration node = new AReturnTypeDeclaration(node1, node2);
        return node;
    }

    Node new16()
    {
        XPFormalParameterListTail node2 = null;
        PFormalParameter node1 = (PFormalParameter) pop();
        AFormalParameterList node = new AFormalParameterList(node1, node2);
        return node;
    }

    Node new17()
    {
        XPFormalParameterListTail node2 = (XPFormalParameterListTail) pop();
        PFormalParameter node1 = (PFormalParameter) pop();
        AFormalParameterList node = new AFormalParameterList(node1, node2);
        return node;
    }

    Node new18()
    {
        PFormalParameterListTail node2 = (PFormalParameterListTail) pop();
        XPFormalParameterListTail node1 = (XPFormalParameterListTail) pop();
        X1PFormalParameterListTail node = new X1PFormalParameterListTail(node1, node2);
        return node;
    }

    Node new19()
    {
        PFormalParameterListTail node1 = (PFormalParameterListTail) pop();
        X2PFormalParameterListTail node = new X2PFormalParameterListTail(node1);
        return node;
    }

    Node new20()
    {
        PFormalParameter node2 = (PFormalParameter) pop();
        TSemicolon node1 = (TSemicolon) pop();
        AFormalParameterListTail node = new AFormalParameterListTail(node1, node2);
        return node;
    }

    Node new21()
    {
        PTypeName node3 = (PTypeName) pop();
        TColon node2 = (TColon) pop();
        TName node1 = (TName) pop();
        AFormalParameter node = new AFormalParameter(node1, node2, node3);
        return node;
    }

    Node new22()
    {
        TTInv node1 = (TTInv) pop();
        AInvStereotype node = new AInvStereotype(node1);
        return node;
    }

    Node new23()
    {
        TTPre node1 = (TTPre) pop();
        APreStereotype node = new APreStereotype(node1);
        return node;
    }

    Node new24()
    {
        TTPost node1 = (TTPost) pop();
        APostStereotype node = new APostStereotype(node1);
        return node;
    }

    Node new25()
    {
        PLogicalExpression node2 = (PLogicalExpression) pop();
        XPLetExpression node1 = null;
        AExpression node = new AExpression(node1, node2);
        return node;
    }

    Node new26()
    {
        PLogicalExpression node2 = (PLogicalExpression) pop();
        XPLetExpression node1 = (XPLetExpression) pop();
        AExpression node = new AExpression(node1, node2);
        return node;
    }

    Node new27()
    {
        PLetExpression node2 = (PLetExpression) pop();
        XPLetExpression node1 = (XPLetExpression) pop();
        X1PLetExpression node = new X1PLetExpression(node1, node2);
        return node;
    }

    Node new28()
    {
        PLetExpression node1 = (PLetExpression) pop();
        X2PLetExpression node = new X2PLetExpression(node1);
        return node;
    }

    Node new29()
    {
        TEndif node7 = (TEndif) pop();
        PExpression node6 = (PExpression) pop();
        TTElse node5 = (TTElse) pop();
        PExpression node4 = (PExpression) pop();
        TTThen node3 = (TTThen) pop();
        PExpression node2 = (PExpression) pop();
        TTIf node1 = (TTIf) pop();
        AIfExpression node = new AIfExpression(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new30()
    {
        XPLogicalExpressionTail node2 = null;
        PRelationalExpression node1 = (PRelationalExpression) pop();
        ALogicalExpression node = new ALogicalExpression(node1, node2);
        return node;
    }

    Node new31()
    {
        XPLogicalExpressionTail node2 = (XPLogicalExpressionTail) pop();
        PRelationalExpression node1 = (PRelationalExpression) pop();
        ALogicalExpression node = new ALogicalExpression(node1, node2);
        return node;
    }

    Node new32()
    {
        PLogicalExpressionTail node2 = (PLogicalExpressionTail) pop();
        XPLogicalExpressionTail node1 = (XPLogicalExpressionTail) pop();
        X1PLogicalExpressionTail node = new X1PLogicalExpressionTail(node1, node2);
        return node;
    }

    Node new33()
    {
        PLogicalExpressionTail node1 = (PLogicalExpressionTail) pop();
        X2PLogicalExpressionTail node = new X2PLogicalExpressionTail(node1);
        return node;
    }

    Node new34()
    {
        PRelationalExpression node2 = (PRelationalExpression) pop();
        PLogicalOperator node1 = (PLogicalOperator) pop();
        ALogicalExpressionTail node = new ALogicalExpressionTail(node1, node2);
        return node;
    }

    Node new35()
    {
        PRelationalExpressionTail node2 = null;
        PAdditiveExpression node1 = (PAdditiveExpression) pop();
        ARelationalExpression node = new ARelationalExpression(node1, node2);
        return node;
    }

    Node new36()
    {
        PRelationalExpressionTail node2 = (PRelationalExpressionTail) pop();
        PAdditiveExpression node1 = (PAdditiveExpression) pop();
        ARelationalExpression node = new ARelationalExpression(node1, node2);
        return node;
    }

    Node new37()
    {
        PAdditiveExpression node2 = (PAdditiveExpression) pop();
        PRelationalOperator node1 = (PRelationalOperator) pop();
        ARelationalExpressionTail node = new ARelationalExpressionTail(node1, node2);
        return node;
    }

    Node new38()
    {
        XPAdditiveExpressionTail node2 = null;
        PMultiplicativeExpression node1 = (PMultiplicativeExpression) pop();
        AAdditiveExpression node = new AAdditiveExpression(node1, node2);
        return node;
    }

    Node new39()
    {
        XPAdditiveExpressionTail node2 = (XPAdditiveExpressionTail) pop();
        PMultiplicativeExpression node1 = (PMultiplicativeExpression) pop();
        AAdditiveExpression node = new AAdditiveExpression(node1, node2);
        return node;
    }

    Node new40()
    {
        PAdditiveExpressionTail node2 = (PAdditiveExpressionTail) pop();
        XPAdditiveExpressionTail node1 = (XPAdditiveExpressionTail) pop();
        X1PAdditiveExpressionTail node = new X1PAdditiveExpressionTail(node1, node2);
        return node;
    }

    Node new41()
    {
        PAdditiveExpressionTail node1 = (PAdditiveExpressionTail) pop();
        X2PAdditiveExpressionTail node = new X2PAdditiveExpressionTail(node1);
        return node;
    }

    Node new42()
    {
        PMultiplicativeExpression node2 = (PMultiplicativeExpression) pop();
        PAddOperator node1 = (PAddOperator) pop();
        AAdditiveExpressionTail node = new AAdditiveExpressionTail(node1, node2);
        return node;
    }

    Node new43()
    {
        XPMultiplicativeExpressionTail node2 = null;
        PUnaryExpression node1 = (PUnaryExpression) pop();
        AMultiplicativeExpression node = new AMultiplicativeExpression(node1, node2);
        return node;
    }

    Node new44()
    {
        XPMultiplicativeExpressionTail node2 = (XPMultiplicativeExpressionTail) pop();
        PUnaryExpression node1 = (PUnaryExpression) pop();
        AMultiplicativeExpression node = new AMultiplicativeExpression(node1, node2);
        return node;
    }

    Node new45()
    {
        PMultiplicativeExpressionTail node2 = (PMultiplicativeExpressionTail) pop();
        XPMultiplicativeExpressionTail node1 = (XPMultiplicativeExpressionTail) pop();
        X1PMultiplicativeExpressionTail node = new X1PMultiplicativeExpressionTail(node1, node2);
        return node;
    }

    Node new46()
    {
        PMultiplicativeExpressionTail node1 = (PMultiplicativeExpressionTail) pop();
        X2PMultiplicativeExpressionTail node = new X2PMultiplicativeExpressionTail(node1);
        return node;
    }

    Node new47()
    {
        PUnaryExpression node2 = (PUnaryExpression) pop();
        PMultiplyOperator node1 = (PMultiplyOperator) pop();
        AMultiplicativeExpressionTail node = new AMultiplicativeExpressionTail(node1, node2);
        return node;
    }

    Node new48()
    {
        PPostfixExpression node2 = (PPostfixExpression) pop();
        PUnaryOperator node1 = (PUnaryOperator) pop();
        AUnaryUnaryExpression node = new AUnaryUnaryExpression(node1, node2);
        return node;
    }

    Node new49()
    {
        PPostfixExpression node1 = (PPostfixExpression) pop();
        APostfixUnaryExpression node = new APostfixUnaryExpression(node1);
        return node;
    }

    Node new50()
    {
        XPPostfixExpressionTail node2 = null;
        PPrimaryExpression node1 = (PPrimaryExpression) pop();
        APostfixExpression node = new APostfixExpression(node1, node2);
        return node;
    }

    Node new51()
    {
        XPPostfixExpressionTail node2 = (XPPostfixExpressionTail) pop();
        PPrimaryExpression node1 = (PPrimaryExpression) pop();
        APostfixExpression node = new APostfixExpression(node1, node2);
        return node;
    }

    Node new52()
    {
        PPostfixExpressionTail node2 = (PPostfixExpressionTail) pop();
        XPPostfixExpressionTail node1 = (XPPostfixExpressionTail) pop();
        X1PPostfixExpressionTail node = new X1PPostfixExpressionTail(node1, node2);
        return node;
    }

    Node new53()
    {
        PPostfixExpressionTail node1 = (PPostfixExpressionTail) pop();
        X2PPostfixExpressionTail node = new X2PPostfixExpressionTail(node1);
        return node;
    }

    Node new54()
    {
        PFeatureCall node2 = (PFeatureCall) pop();
        PPostfixExpressionTailBegin node1 = (PPostfixExpressionTailBegin) pop();
        APostfixExpressionTail node = new APostfixExpressionTail(node1, node2);
        return node;
    }

    Node new55()
    {
        TDot node1 = (TDot) pop();
        ADotPostfixExpressionTailBegin node = new ADotPostfixExpressionTailBegin(node1);
        return node;
    }

    Node new56()
    {
        TArrow node1 = (TArrow) pop();
        AArrowPostfixExpressionTailBegin node = new AArrowPostfixExpressionTailBegin(node1);
        return node;
    }

    Node new57()
    {
        PLiteralCollection node1 = (PLiteralCollection) pop();
        ALitColPrimaryExpression node = new ALitColPrimaryExpression(node1);
        return node;
    }

    Node new58()
    {
        PLiteral node1 = (PLiteral) pop();
        ALiteralPrimaryExpression node = new ALiteralPrimaryExpression(node1);
        return node;
    }

    Node new59()
    {
        PFeatureCallParameters node4 = null;
        PQualifiers node3 = null;
        PTimeExpression node2 = null;
        PPathName node1 = (PPathName) pop();
        AFeaturePrimaryExpression node = new AFeaturePrimaryExpression(node1, node2, node3, node4);
        return node;
    }

    Node new60()
    {
        PFeatureCallParameters node4 = null;
        PQualifiers node3 = null;
        PTimeExpression node2 = (PTimeExpression) pop();
        PPathName node1 = (PPathName) pop();
        AFeaturePrimaryExpression node = new AFeaturePrimaryExpression(node1, node2, node3, node4);
        return node;
    }

    Node new61()
    {
        PFeatureCallParameters node4 = null;
        PQualifiers node3 = (PQualifiers) pop();
        PTimeExpression node2 = null;
        PPathName node1 = (PPathName) pop();
        AFeaturePrimaryExpression node = new AFeaturePrimaryExpression(node1, node2, node3, node4);
        return node;
    }

    Node new62()
    {
        PFeatureCallParameters node4 = null;
        PQualifiers node3 = (PQualifiers) pop();
        PTimeExpression node2 = (PTimeExpression) pop();
        PPathName node1 = (PPathName) pop();
        AFeaturePrimaryExpression node = new AFeaturePrimaryExpression(node1, node2, node3, node4);
        return node;
    }

    Node new63()
    {
        PFeatureCallParameters node4 = (PFeatureCallParameters) pop();
        PQualifiers node3 = null;
        PTimeExpression node2 = null;
        PPathName node1 = (PPathName) pop();
        AFeaturePrimaryExpression node = new AFeaturePrimaryExpression(node1, node2, node3, node4);
        return node;
    }

    Node new64()
    {
        PFeatureCallParameters node4 = (PFeatureCallParameters) pop();
        PQualifiers node3 = null;
        PTimeExpression node2 = (PTimeExpression) pop();
        PPathName node1 = (PPathName) pop();
        AFeaturePrimaryExpression node = new AFeaturePrimaryExpression(node1, node2, node3, node4);
        return node;
    }

    Node new65()
    {
        PFeatureCallParameters node4 = (PFeatureCallParameters) pop();
        PQualifiers node3 = (PQualifiers) pop();
        PTimeExpression node2 = null;
        PPathName node1 = (PPathName) pop();
        AFeaturePrimaryExpression node = new AFeaturePrimaryExpression(node1, node2, node3, node4);
        return node;
    }

    Node new66()
    {
        PFeatureCallParameters node4 = (PFeatureCallParameters) pop();
        PQualifiers node3 = (PQualifiers) pop();
        PTimeExpression node2 = (PTimeExpression) pop();
        PPathName node1 = (PPathName) pop();
        AFeaturePrimaryExpression node = new AFeaturePrimaryExpression(node1, node2, node3, node4);
        return node;
    }

    Node new67()
    {
        TRPar node3 = (TRPar) pop();
        PExpression node2 = (PExpression) pop();
        TLPar node1 = (TLPar) pop();
        AParenthesesPrimaryExpression node = new AParenthesesPrimaryExpression(node1, node2, node3);
        return node;
    }

    Node new68()
    {
        PIfExpression node1 = (PIfExpression) pop();
        AIfPrimaryExpression node = new AIfPrimaryExpression(node1);
        return node;
    }

    Node new69()
    {
        TRPar node2 = (TRPar) pop();
        TLPar node1 = (TLPar) pop();
        AEmptyFeatureCallParameters node = new AEmptyFeatureCallParameters(node1, node2);
        return node;
    }

    Node new70()
    {
        TRPar node4 = (TRPar) pop();
        XPFcpHelper node3 = null;
        PExpression node2 = (PExpression) pop();
        TLPar node1 = (TLPar) pop();
        AConcreteFeatureCallParameters node = new AConcreteFeatureCallParameters(node1, node2, node3, node4);
        return node;
    }

    Node new71()
    {
        TRPar node4 = (TRPar) pop();
        XPFcpHelper node3 = (XPFcpHelper) pop();
        PExpression node2 = (PExpression) pop();
        TLPar node1 = (TLPar) pop();
        AConcreteFeatureCallParameters node = new AConcreteFeatureCallParameters(node1, node2, node3, node4);
        return node;
    }

    Node new72()
    {
        PFcpHelper node2 = (PFcpHelper) pop();
        XPFcpHelper node1 = (XPFcpHelper) pop();
        X1PFcpHelper node = new X1PFcpHelper(node1, node2);
        return node;
    }

    Node new73()
    {
        PFcpHelper node1 = (PFcpHelper) pop();
        X2PFcpHelper node = new X2PFcpHelper(node1);
        return node;
    }

    Node new74()
    {
        PExpression node2 = (PExpression) pop();
        TComma node1 = (TComma) pop();
        ACommaFcpHelper node = new ACommaFcpHelper(node1, node2);
        return node;
    }

    Node new75()
    {
        PSimpleTypeSpecifier node2 = (PSimpleTypeSpecifier) pop();
        TColon node1 = (TColon) pop();
        AColonFcpHelper node = new AColonFcpHelper(node1, node2);
        return node;
    }

    Node new76()
    {
        PExpression node6 = (PExpression) pop();
        TEqual node5 = (TEqual) pop();
        PSimpleTypeSpecifier node4 = (PSimpleTypeSpecifier) pop();
        TColon node3 = (TColon) pop();
        TName node2 = (TName) pop();
        TSemicolon node1 = (TSemicolon) pop();
        AIterateFcpHelper node = new AIterateFcpHelper(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new77()
    {
        PExpression node2 = (PExpression) pop();
        TBar node1 = (TBar) pop();
        ABarFcpHelper node = new ABarFcpHelper(node1, node2);
        return node;
    }

    Node new78()
    {
        TTIn node6 = (TTIn) pop();
        PExpression node5 = (PExpression) pop();
        TEqual node4 = (TEqual) pop();
        PLetExpressionTypeDeclaration node3 = null;
        TName node2 = (TName) pop();
        TTLet node1 = (TTLet) pop();
        ALetExpression node = new ALetExpression(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new79()
    {
        TTIn node6 = (TTIn) pop();
        PExpression node5 = (PExpression) pop();
        TEqual node4 = (TEqual) pop();
        PLetExpressionTypeDeclaration node3 = (PLetExpressionTypeDeclaration) pop();
        TName node2 = (TName) pop();
        TTLet node1 = (TTLet) pop();
        ALetExpression node = new ALetExpression(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new80()
    {
        PPathTypeName node2 = (PPathTypeName) pop();
        TColon node1 = (TColon) pop();
        ALetExpressionTypeDeclaration node = new ALetExpressionTypeDeclaration(node1, node2);
        return node;
    }

    Node new81()
    {
        TStringLit node1 = (TStringLit) pop();
        AStringLiteral node = new AStringLiteral(node1);
        return node;
    }

    Node new82()
    {
        TReal node1 = (TReal) pop();
        ARealLiteral node = new ARealLiteral(node1);
        return node;
    }

    Node new83()
    {
        TInt node1 = (TInt) pop();
        AIntegerLiteral node = new AIntegerLiteral(node1);
        return node;
    }

    Node new84()
    {
        TBool node1 = (TBool) pop();
        ABooleanLiteral node = new ABooleanLiteral(node1);
        return node;
    }

    Node new85()
    {
        TName node2 = (TName) pop();
        TChannel node1 = (TChannel) pop();
        AEnumLiteral node = new AEnumLiteral(node1, node2);
        return node;
    }

    Node new86()
    {
        TRBrace node6 = (TRBrace) pop();
        XPEnumerationTypeTail node5 = null;
        TName node4 = (TName) pop();
        TChannel node3 = (TChannel) pop();
        TLBrace node2 = (TLBrace) pop();
        TEnum node1 = (TEnum) pop();
        AEnumerationType node = new AEnumerationType(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new87()
    {
        TRBrace node6 = (TRBrace) pop();
        XPEnumerationTypeTail node5 = (XPEnumerationTypeTail) pop();
        TName node4 = (TName) pop();
        TChannel node3 = (TChannel) pop();
        TLBrace node2 = (TLBrace) pop();
        TEnum node1 = (TEnum) pop();
        AEnumerationType node = new AEnumerationType(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new88()
    {
        PEnumerationTypeTail node2 = (PEnumerationTypeTail) pop();
        XPEnumerationTypeTail node1 = (XPEnumerationTypeTail) pop();
        X1PEnumerationTypeTail node = new X1PEnumerationTypeTail(node1, node2);
        return node;
    }

    Node new89()
    {
        PEnumerationTypeTail node1 = (PEnumerationTypeTail) pop();
        X2PEnumerationTypeTail node = new X2PEnumerationTypeTail(node1);
        return node;
    }

    Node new90()
    {
        TName node3 = (TName) pop();
        TChannel node2 = (TChannel) pop();
        TComma node1 = (TComma) pop();
        AEnumerationTypeTail node = new AEnumerationTypeTail(node1, node2, node3);
        return node;
    }

    Node new91()
    {
        PPathTypeName node1 = (PPathTypeName) pop();
        APathSimpleTypeSpecifier node = new APathSimpleTypeSpecifier(node1);
        return node;
    }

    Node new92()
    {
        PEnumerationType node1 = (PEnumerationType) pop();
        AEnumSimpleTypeSpecifier node = new AEnumSimpleTypeSpecifier(node1);
        return node;
    }

    Node new93()
    {
        TRBrace node4 = (TRBrace) pop();
        PExpressionListOrRange node3 = null;
        TLBrace node2 = (TLBrace) pop();
        PCollectionKind node1 = (PCollectionKind) pop();
        ALiteralCollection node = new ALiteralCollection(node1, node2, node3, node4);
        return node;
    }

    Node new94()
    {
        TRBrace node4 = (TRBrace) pop();
        PExpressionListOrRange node3 = (PExpressionListOrRange) pop();
        TLBrace node2 = (TLBrace) pop();
        PCollectionKind node1 = (PCollectionKind) pop();
        ALiteralCollection node = new ALiteralCollection(node1, node2, node3, node4);
        return node;
    }

    Node new95()
    {
        PExpressionListOrRangeTail node2 = null;
        PExpression node1 = (PExpression) pop();
        AExpressionListOrRange node = new AExpressionListOrRange(node1, node2);
        return node;
    }

    Node new96()
    {
        PExpressionListOrRangeTail node2 = (PExpressionListOrRangeTail) pop();
        PExpression node1 = (PExpression) pop();
        AExpressionListOrRange node = new AExpressionListOrRange(node1, node2);
        return node;
    }

    Node new97()
    {
        XPExpressionListTail node1 = (XPExpressionListTail) pop();
        AListExpressionListOrRangeTail node = new AListExpressionListOrRangeTail(node1);
        return node;
    }

    Node new98()
    {
        PExpressionListTail node2 = (PExpressionListTail) pop();
        XPExpressionListTail node1 = (XPExpressionListTail) pop();
        X1PExpressionListTail node = new X1PExpressionListTail(node1, node2);
        return node;
    }

    Node new99()
    {
        PExpressionListTail node1 = (PExpressionListTail) pop();
        X2PExpressionListTail node = new X2PExpressionListTail(node1);
        return node;
    }

    Node new100()
    {
        PExpression node2 = (PExpression) pop();
        TDdot node1 = (TDdot) pop();
        ARangeExpressionListOrRangeTail node = new ARangeExpressionListOrRangeTail(node1, node2);
        return node;
    }

    Node new101()
    {
        PExpression node2 = (PExpression) pop();
        TComma node1 = (TComma) pop();
        AExpressionListTail node = new AExpressionListTail(node1, node2);
        return node;
    }

    Node new102()
    {
        PFeatureCallParameters node4 = null;
        PQualifiers node3 = null;
        PTimeExpression node2 = null;
        PPathName node1 = (PPathName) pop();
        AFeatureCall node = new AFeatureCall(node1, node2, node3, node4);
        return node;
    }

    Node new103()
    {
        PFeatureCallParameters node4 = null;
        PQualifiers node3 = null;
        PTimeExpression node2 = (PTimeExpression) pop();
        PPathName node1 = (PPathName) pop();
        AFeatureCall node = new AFeatureCall(node1, node2, node3, node4);
        return node;
    }

    Node new104()
    {
        PFeatureCallParameters node4 = null;
        PQualifiers node3 = (PQualifiers) pop();
        PTimeExpression node2 = null;
        PPathName node1 = (PPathName) pop();
        AFeatureCall node = new AFeatureCall(node1, node2, node3, node4);
        return node;
    }

    Node new105()
    {
        PFeatureCallParameters node4 = null;
        PQualifiers node3 = (PQualifiers) pop();
        PTimeExpression node2 = (PTimeExpression) pop();
        PPathName node1 = (PPathName) pop();
        AFeatureCall node = new AFeatureCall(node1, node2, node3, node4);
        return node;
    }

    Node new106()
    {
        PFeatureCallParameters node4 = (PFeatureCallParameters) pop();
        PQualifiers node3 = null;
        PTimeExpression node2 = null;
        PPathName node1 = (PPathName) pop();
        AFeatureCall node = new AFeatureCall(node1, node2, node3, node4);
        return node;
    }

    Node new107()
    {
        PFeatureCallParameters node4 = (PFeatureCallParameters) pop();
        PQualifiers node3 = null;
        PTimeExpression node2 = (PTimeExpression) pop();
        PPathName node1 = (PPathName) pop();
        AFeatureCall node = new AFeatureCall(node1, node2, node3, node4);
        return node;
    }

    Node new108()
    {
        PFeatureCallParameters node4 = (PFeatureCallParameters) pop();
        PQualifiers node3 = (PQualifiers) pop();
        PTimeExpression node2 = null;
        PPathName node1 = (PPathName) pop();
        AFeatureCall node = new AFeatureCall(node1, node2, node3, node4);
        return node;
    }

    Node new109()
    {
        PFeatureCallParameters node4 = (PFeatureCallParameters) pop();
        PQualifiers node3 = (PQualifiers) pop();
        PTimeExpression node2 = (PTimeExpression) pop();
        PPathName node1 = (PPathName) pop();
        AFeatureCall node = new AFeatureCall(node1, node2, node3, node4);
        return node;
    }

    Node new110()
    {
        TRBracket node3 = (TRBracket) pop();
        PActualParameterList node2 = (PActualParameterList) pop();
        TLBracket node1 = (TLBracket) pop();
        AQualifiers node = new AQualifiers(node1, node2, node3);
        return node;
    }

    Node new111()
    {
        TBar node4 = (TBar) pop();
        PDeclaratorTypeDeclaration node3 = null;
        XPDeclaratorTail node2 = null;
        TName node1 = (TName) pop();
        AStandardDeclarator node = new AStandardDeclarator(node1, node2, node3, node4);
        return node;
    }

    Node new112()
    {
        TBar node4 = (TBar) pop();
        PDeclaratorTypeDeclaration node3 = null;
        XPDeclaratorTail node2 = (XPDeclaratorTail) pop();
        TName node1 = (TName) pop();
        AStandardDeclarator node = new AStandardDeclarator(node1, node2, node3, node4);
        return node;
    }

    Node new113()
    {
        PDeclaratorTail node2 = (PDeclaratorTail) pop();
        XPDeclaratorTail node1 = (XPDeclaratorTail) pop();
        X1PDeclaratorTail node = new X1PDeclaratorTail(node1, node2);
        return node;
    }

    Node new114()
    {
        PDeclaratorTail node1 = (PDeclaratorTail) pop();
        X2PDeclaratorTail node = new X2PDeclaratorTail(node1);
        return node;
    }

    Node new115()
    {
        TBar node4 = (TBar) pop();
        PDeclaratorTypeDeclaration node3 = (PDeclaratorTypeDeclaration) pop();
        XPDeclaratorTail node2 = null;
        TName node1 = (TName) pop();
        AStandardDeclarator node = new AStandardDeclarator(node1, node2, node3, node4);
        return node;
    }

    Node new116()
    {
        TBar node4 = (TBar) pop();
        PDeclaratorTypeDeclaration node3 = (PDeclaratorTypeDeclaration) pop();
        XPDeclaratorTail node2 = (XPDeclaratorTail) pop();
        TName node1 = (TName) pop();
        AStandardDeclarator node = new AStandardDeclarator(node1, node2, node3, node4);
        return node;
    }

    Node new117()
    {
        TBar node8 = (TBar) pop();
        PExpression node7 = (PExpression) pop();
        TEqual node6 = (TEqual) pop();
        PDeclaratorTypeDeclaration node5 = (PDeclaratorTypeDeclaration) pop();
        TName node4 = (TName) pop();
        TSemicolon node3 = (TSemicolon) pop();
        PDeclaratorTypeDeclaration node2 = (PDeclaratorTypeDeclaration) pop();
        TName node1 = (TName) pop();
        AIterateDeclarator node = new AIterateDeclarator(node1, node2, node3, node4, node5, node6, node7, node8);
        return node;
    }

    Node new118()
    {
        TName node2 = (TName) pop();
        TComma node1 = (TComma) pop();
        ADeclaratorTail node = new ADeclaratorTail(node1, node2);
        return node;
    }

    Node new119()
    {
        PSimpleTypeSpecifier node2 = (PSimpleTypeSpecifier) pop();
        TColon node1 = (TColon) pop();
        ADeclaratorTypeDeclaration node = new ADeclaratorTypeDeclaration(node1, node2);
        return node;
    }

    Node new120()
    {
        XPPathTypeNameTail node2 = null;
        PTypeName node1 = (PTypeName) pop();
        APathTypeName node = new APathTypeName(node1, node2);
        return node;
    }

    Node new121()
    {
        XPPathTypeNameTail node2 = (XPPathTypeNameTail) pop();
        PTypeName node1 = (PTypeName) pop();
        APathTypeName node = new APathTypeName(node1, node2);
        return node;
    }

    Node new122()
    {
        PPathTypeNameTail node2 = (PPathTypeNameTail) pop();
        XPPathTypeNameTail node1 = (XPPathTypeNameTail) pop();
        X1PPathTypeNameTail node = new X1PPathTypeNameTail(node1, node2);
        return node;
    }

    Node new123()
    {
        PPathTypeNameTail node1 = (PPathTypeNameTail) pop();
        X2PPathTypeNameTail node = new X2PPathTypeNameTail(node1);
        return node;
    }

    Node new124()
    {
        PTypeName node2 = (PTypeName) pop();
        TDcolon node1 = (TDcolon) pop();
        APathTypeNameTail node = new APathTypeNameTail(node1, node2);
        return node;
    }

    Node new125()
    {
        TSimpleTypeName node1 = (TSimpleTypeName) pop();
        ANonCollectionTypeName node = new ANonCollectionTypeName(node1);
        return node;
    }

    Node new126()
    {
        TRPar node4 = (TRPar) pop();
        TSimpleTypeName node3 = (TSimpleTypeName) pop();
        TLPar node2 = (TLPar) pop();
        PCollectionType node1 = (PCollectionType) pop();
        ACollectionTypeName node = new ACollectionTypeName(node1, node2, node3, node4);
        return node;
    }

    Node new127()
    {
        TTSet node1 = (TTSet) pop();
        ASetCollectionType node = new ASetCollectionType(node1);
        return node;
    }

    Node new128()
    {
        TTBag node1 = (TTBag) pop();
        ABagCollectionType node = new ABagCollectionType(node1);
        return node;
    }

    Node new129()
    {
        TTSequence node1 = (TTSequence) pop();
        ASequenceCollectionType node = new ASequenceCollectionType(node1);
        return node;
    }

    Node new130()
    {
        TTCollection node1 = (TTCollection) pop();
        ACollectionCollectionType node = new ACollectionCollectionType(node1);
        return node;
    }

    Node new131()
    {
        XPPathNameTail node2 = null;
        PPathNameBegin node1 = (PPathNameBegin) pop();
        APathName node = new APathName(node1, node2);
        return node;
    }

    Node new132()
    {
        XPPathNameTail node2 = (XPPathNameTail) pop();
        PPathNameBegin node1 = (PPathNameBegin) pop();
        APathName node = new APathName(node1, node2);
        return node;
    }

    Node new133()
    {
        PPathNameTail node2 = (PPathNameTail) pop();
        XPPathNameTail node1 = (XPPathNameTail) pop();
        X1PPathNameTail node = new X1PPathNameTail(node1, node2);
        return node;
    }

    Node new134()
    {
        PPathNameTail node1 = (PPathNameTail) pop();
        X2PPathNameTail node = new X2PPathNameTail(node1);
        return node;
    }

    Node new135()
    {
        PTypeName node1 = (PTypeName) pop();
        ATypeNamePathNameBegin node = new ATypeNamePathNameBegin(node1);
        return node;
    }

    Node new136()
    {
        TName node1 = (TName) pop();
        ANamePathNameBegin node = new ANamePathNameBegin(node1);
        return node;
    }

    Node new137()
    {
        PPathNameEnd node2 = (PPathNameEnd) pop();
        TDcolon node1 = (TDcolon) pop();
        APathNameTail node = new APathNameTail(node1, node2);
        return node;
    }

    Node new138()
    {
        PTypeName node1 = (PTypeName) pop();
        ATypeNamePathNameEnd node = new ATypeNamePathNameEnd(node1);
        return node;
    }

    Node new139()
    {
        TName node1 = (TName) pop();
        ANamePathNameEnd node = new ANamePathNameEnd(node1);
        return node;
    }

    Node new140()
    {
        TTPre node2 = (TTPre) pop();
        TAt node1 = (TAt) pop();
        ATimeExpression node = new ATimeExpression(node1, node2);
        return node;
    }

    Node new141()
    {
        XPActualParameterListTail node2 = null;
        PExpression node1 = (PExpression) pop();
        AActualParameterList node = new AActualParameterList(node1, node2);
        return node;
    }

    Node new142()
    {
        XPActualParameterListTail node2 = (XPActualParameterListTail) pop();
        PExpression node1 = (PExpression) pop();
        AActualParameterList node = new AActualParameterList(node1, node2);
        return node;
    }

    Node new143()
    {
        PActualParameterListTail node2 = (PActualParameterListTail) pop();
        XPActualParameterListTail node1 = (XPActualParameterListTail) pop();
        X1PActualParameterListTail node = new X1PActualParameterListTail(node1, node2);
        return node;
    }

    Node new144()
    {
        PActualParameterListTail node1 = (PActualParameterListTail) pop();
        X2PActualParameterListTail node = new X2PActualParameterListTail(node1);
        return node;
    }

    Node new145()
    {
        PExpression node2 = (PExpression) pop();
        TComma node1 = (TComma) pop();
        AActualParameterListTail node = new AActualParameterListTail(node1, node2);
        return node;
    }

    Node new146()
    {
        TAnd node1 = (TAnd) pop();
        AAndLogicalOperator node = new AAndLogicalOperator(node1);
        return node;
    }

    Node new147()
    {
        TOr node1 = (TOr) pop();
        AOrLogicalOperator node = new AOrLogicalOperator(node1);
        return node;
    }

    Node new148()
    {
        TXor node1 = (TXor) pop();
        AXorLogicalOperator node = new AXorLogicalOperator(node1);
        return node;
    }

    Node new149()
    {
        TImplies node1 = (TImplies) pop();
        AImpliesLogicalOperator node = new AImpliesLogicalOperator(node1);
        return node;
    }

    Node new150()
    {
        TTSet node1 = (TTSet) pop();
        ASetCollectionKind node = new ASetCollectionKind(node1);
        return node;
    }

    Node new151()
    {
        TTBag node1 = (TTBag) pop();
        ABagCollectionKind node = new ABagCollectionKind(node1);
        return node;
    }

    Node new152()
    {
        TTSequence node1 = (TTSequence) pop();
        ASequenceCollectionKind node = new ASequenceCollectionKind(node1);
        return node;
    }

    Node new153()
    {
        TTCollection node1 = (TTCollection) pop();
        ACollectionCollectionKind node = new ACollectionCollectionKind(node1);
        return node;
    }

    Node new154()
    {
        TEqual node1 = (TEqual) pop();
        AEqualRelationalOperator node = new AEqualRelationalOperator(node1);
        return node;
    }

    Node new155()
    {
        TNEqual node1 = (TNEqual) pop();
        ANEqualRelationalOperator node = new ANEqualRelationalOperator(node1);
        return node;
    }

    Node new156()
    {
        TGt node1 = (TGt) pop();
        AGtRelationalOperator node = new AGtRelationalOperator(node1);
        return node;
    }

    Node new157()
    {
        TLt node1 = (TLt) pop();
        ALtRelationalOperator node = new ALtRelationalOperator(node1);
        return node;
    }

    Node new158()
    {
        TGteq node1 = (TGteq) pop();
        AGteqRelationalOperator node = new AGteqRelationalOperator(node1);
        return node;
    }

    Node new159()
    {
        TLteq node1 = (TLteq) pop();
        ALteqRelationalOperator node = new ALteqRelationalOperator(node1);
        return node;
    }

    Node new160()
    {
        TPlus node1 = (TPlus) pop();
        APlusAddOperator node = new APlusAddOperator(node1);
        return node;
    }

    Node new161()
    {
        TMinus node1 = (TMinus) pop();
        AMinusAddOperator node = new AMinusAddOperator(node1);
        return node;
    }

    Node new162()
    {
        TMult node1 = (TMult) pop();
        AMultMultiplyOperator node = new AMultMultiplyOperator(node1);
        return node;
    }

    Node new163()
    {
        TDiv node1 = (TDiv) pop();
        ADivMultiplyOperator node = new ADivMultiplyOperator(node1);
        return node;
    }

    Node new164()
    {
        TMinus node1 = (TMinus) pop();
        AMinusUnaryOperator node = new AMinusUnaryOperator(node1);
        return node;
    }

    Node new165()
    {
        TNot node1 = (TNot) pop();
        ANotUnaryOperator node = new ANotUnaryOperator(node1);
        return node;
    }

    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {7, SHIFT, 1}, },
			{{-1, ERROR, 1}, {43, SHIFT, 4}, {44, SHIFT, 5}, {45, SHIFT, 6}, {46, SHIFT, 7}, {48, SHIFT, 8}, {49, SHIFT, 9}, },
			{{-1, ERROR, 2}, {53, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {9, SHIFT, 16}, {10, SHIFT, 17}, {11, SHIFT, 18}, },
			{{-1, REDUCE, 127}, },
			{{-1, REDUCE, 128}, },
			{{-1, REDUCE, 129}, },
			{{-1, REDUCE, 130}, },
			{{-1, REDUCE, 125}, },
			{{-1, ERROR, 9}, {30, SHIFT, 22}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 12}, {43, SHIFT, 4}, {44, SHIFT, 5}, {45, SHIFT, 6}, {46, SHIFT, 7}, {48, SHIFT, 8}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 8}, {29, SHIFT, 24}, },
			{{-1, ERROR, 15}, {22, SHIFT, 25}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 20}, {30, SHIFT, 26}, {49, SHIFT, 27}, },
			{{-1, REDUCE, 0}, {9, SHIFT, 16}, {10, SHIFT, 17}, {11, SHIFT, 18}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 24}, {49, SHIFT, 29}, },
			{{-1, ERROR, 25}, {48, SHIFT, 30}, },
			{{-1, ERROR, 26}, {2, SHIFT, 31}, {6, SHIFT, 32}, {22, SHIFT, 33}, {32, SHIFT, 34}, {37, SHIFT, 35}, {39, SHIFT, 36}, {43, SHIFT, 37}, {44, SHIFT, 38}, {45, SHIFT, 39}, {46, SHIFT, 40}, {47, SHIFT, 41}, {48, SHIFT, 8}, {49, SHIFT, 42}, {50, SHIFT, 43}, {51, SHIFT, 44}, {52, SHIFT, 45}, },
			{{-1, ERROR, 27}, {30, SHIFT, 64}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 29}, {22, SHIFT, 65}, },
			{{-1, ERROR, 30}, {23, SHIFT, 66}, },
			{{-1, REDUCE, 165}, },
			{{-1, REDUCE, 164}, },
			{{-1, ERROR, 33}, {2, SHIFT, 31}, {6, SHIFT, 32}, {22, SHIFT, 33}, {32, SHIFT, 34}, {37, SHIFT, 35}, {39, SHIFT, 36}, {43, SHIFT, 37}, {44, SHIFT, 38}, {45, SHIFT, 39}, {46, SHIFT, 40}, {47, SHIFT, 41}, {48, SHIFT, 8}, {49, SHIFT, 42}, {50, SHIFT, 43}, {51, SHIFT, 44}, {52, SHIFT, 45}, },
			{{-1, ERROR, 34}, {49, SHIFT, 68}, },
			{{-1, ERROR, 35}, {49, SHIFT, 69}, },
			{{-1, ERROR, 36}, {2, SHIFT, 31}, {6, SHIFT, 32}, {22, SHIFT, 33}, {32, SHIFT, 34}, {37, SHIFT, 35}, {39, SHIFT, 36}, {43, SHIFT, 37}, {44, SHIFT, 38}, {45, SHIFT, 39}, {46, SHIFT, 40}, {47, SHIFT, 41}, {48, SHIFT, 8}, {49, SHIFT, 42}, {50, SHIFT, 43}, {51, SHIFT, 44}, {52, SHIFT, 45}, },
			{{-1, REDUCE, 127}, {26, REDUCE, 150}, },
			{{-1, REDUCE, 128}, {26, REDUCE, 151}, },
			{{-1, REDUCE, 129}, {26, REDUCE, 152}, },
			{{-1, REDUCE, 130}, {26, REDUCE, 153}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 136}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 30}, {18, SHIFT, 71}, {19, SHIFT, 72}, {20, SHIFT, 73}, {21, SHIFT, 74}, },
			{{-1, REDUCE, 35}, {12, SHIFT, 78}, {13, SHIFT, 79}, {14, SHIFT, 80}, {15, SHIFT, 81}, {16, SHIFT, 82}, {17, SHIFT, 83}, },
			{{-1, REDUCE, 38}, {5, SHIFT, 86}, {6, SHIFT, 87}, },
			{{-1, REDUCE, 43}, {3, SHIFT, 91}, {4, SHIFT, 92}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 50}, {0, SHIFT, 96}, {1, SHIFT, 97}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 135}, },
			{{-1, REDUCE, 59}, {22, SHIFT, 101}, {24, SHIFT, 102}, {33, SHIFT, 103}, },
			{{-1, REDUCE, 131}, {29, SHIFT, 107}, },
			{{-1, ERROR, 61}, {26, SHIFT, 110}, },
			{{-1, ERROR, 62}, {22, SHIFT, 33}, {32, SHIFT, 34}, {39, SHIFT, 36}, {43, SHIFT, 37}, {44, SHIFT, 38}, {45, SHIFT, 39}, {46, SHIFT, 40}, {47, SHIFT, 41}, {48, SHIFT, 8}, {49, SHIFT, 42}, {50, SHIFT, 43}, {51, SHIFT, 44}, {52, SHIFT, 45}, },
			{{-1, ERROR, 63}, {2, SHIFT, 31}, {6, SHIFT, 32}, {22, SHIFT, 33}, {32, SHIFT, 34}, {37, SHIFT, 35}, {39, SHIFT, 36}, {43, SHIFT, 37}, {44, SHIFT, 38}, {45, SHIFT, 39}, {46, SHIFT, 40}, {47, SHIFT, 41}, {48, SHIFT, 8}, {49, SHIFT, 42}, {50, SHIFT, 43}, {51, SHIFT, 44}, {52, SHIFT, 45}, },
			{{-1, ERROR, 64}, {2, SHIFT, 31}, {6, SHIFT, 32}, {22, SHIFT, 33}, {32, SHIFT, 34}, {37, SHIFT, 35}, {39, SHIFT, 36}, {43, SHIFT, 37}, {44, SHIFT, 38}, {45, SHIFT, 39}, {46, SHIFT, 40}, {47, SHIFT, 41}, {48, SHIFT, 8}, {49, SHIFT, 42}, {50, SHIFT, 43}, {51, SHIFT, 44}, {52, SHIFT, 45}, },
			{{-1, ERROR, 65}, {23, SHIFT, 115}, {49, SHIFT, 116}, },
			{{-1, REDUCE, 126}, },
			{{-1, ERROR, 67}, {23, SHIFT, 119}, },
			{{-1, REDUCE, 85}, },
			{{-1, ERROR, 69}, {12, SHIFT, 120}, {30, SHIFT, 121}, },
			{{-1, ERROR, 70}, {40, SHIFT, 123}, },
			{{-1, REDUCE, 146}, },
			{{-1, REDUCE, 147}, },
			{{-1, REDUCE, 148}, },
			{{-1, REDUCE, 149}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 76}, {2, SHIFT, 31}, {6, SHIFT, 32}, {22, SHIFT, 33}, {32, SHIFT, 34}, {39, SHIFT, 36}, {43, SHIFT, 37}, {44, SHIFT, 38}, {45, SHIFT, 39}, {46, SHIFT, 40}, {47, SHIFT, 41}, {48, SHIFT, 8}, {49, SHIFT, 42}, {50, SHIFT, 43}, {51, SHIFT, 44}, {52, SHIFT, 45}, },
			{{-1, REDUCE, 31}, {18, SHIFT, 71}, {19, SHIFT, 72}, {20, SHIFT, 73}, {21, SHIFT, 74}, },
			{{-1, REDUCE, 154}, },
			{{-1, REDUCE, 155}, },
			{{-1, REDUCE, 157}, },
			{{-1, REDUCE, 156}, },
			{{-1, REDUCE, 159}, },
			{{-1, REDUCE, 158}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 85}, {2, SHIFT, 31}, {6, SHIFT, 32}, {22, SHIFT, 33}, {32, SHIFT, 34}, {39, SHIFT, 36}, {43, SHIFT, 37}, {44, SHIFT, 38}, {45, SHIFT, 39}, {46, SHIFT, 40}, {47, SHIFT, 41}, {48, SHIFT, 8}, {49, SHIFT, 42}, {50, SHIFT, 43}, {51, SHIFT, 44}, {52, SHIFT, 45}, },
			{{-1, REDUCE, 160}, },
			{{-1, REDUCE, 161}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 89}, {2, SHIFT, 31}, {6, SHIFT, 32}, {22, SHIFT, 33}, {32, SHIFT, 34}, {39, SHIFT, 36}, {43, SHIFT, 37}, {44, SHIFT, 38}, {45, SHIFT, 39}, {46, SHIFT, 40}, {47, SHIFT, 41}, {48, SHIFT, 8}, {49, SHIFT, 42}, {50, SHIFT, 43}, {51, SHIFT, 44}, {52, SHIFT, 45}, },
			{{-1, REDUCE, 39}, {5, SHIFT, 86}, {6, SHIFT, 87}, },
			{{-1, REDUCE, 162}, },
			{{-1, REDUCE, 163}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 94}, {2, SHIFT, 31}, {6, SHIFT, 32}, {22, SHIFT, 33}, {32, SHIFT, 34}, {39, SHIFT, 36}, {43, SHIFT, 37}, {44, SHIFT, 38}, {45, SHIFT, 39}, {46, SHIFT, 40}, {47, SHIFT, 41}, {48, SHIFT, 8}, {49, SHIFT, 42}, {50, SHIFT, 43}, {51, SHIFT, 44}, {52, SHIFT, 45}, },
			{{-1, REDUCE, 44}, {3, SHIFT, 91}, {4, SHIFT, 92}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 99}, {43, SHIFT, 4}, {44, SHIFT, 5}, {45, SHIFT, 6}, {46, SHIFT, 7}, {48, SHIFT, 8}, {49, SHIFT, 42}, },
			{{-1, REDUCE, 51}, {0, SHIFT, 96}, {1, SHIFT, 97}, },
			{{-1, ERROR, 101}, {2, SHIFT, 31}, {6, SHIFT, 32}, {22, SHIFT, 33}, {23, SHIFT, 134}, {32, SHIFT, 34}, {37, SHIFT, 35}, {39, SHIFT, 36}, {43, SHIFT, 37}, {44, SHIFT, 38}, {45, SHIFT, 39}, {46, SHIFT, 40}, {47, SHIFT, 41}, {48, SHIFT, 8}, {49, SHIFT, 42}, {50, SHIFT, 43}, {51, SHIFT, 44}, {52, SHIFT, 45}, },
			{{-1, ERROR, 102}, {2, SHIFT, 31}, {6, SHIFT, 32}, {22, SHIFT, 33}, {32, SHIFT, 34}, {37, SHIFT, 35}, {39, SHIFT, 36}, {43, SHIFT, 37}, {44, SHIFT, 38}, {45, SHIFT, 39}, {46, SHIFT, 40}, {47, SHIFT, 41}, {48, SHIFT, 8}, {49, SHIFT, 42}, {50, SHIFT, 43}, {51, SHIFT, 44}, {52, SHIFT, 45}, },
			{{-1, ERROR, 103}, {9, SHIFT, 138}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 61}, {22, SHIFT, 101}, },
			{{-1, REDUCE, 60}, {22, SHIFT, 101}, {24, SHIFT, 102}, },
			{{-1, ERROR, 107}, {43, SHIFT, 4}, {44, SHIFT, 5}, {45, SHIFT, 6}, {46, SHIFT, 7}, {48, SHIFT, 8}, {49, SHIFT, 142}, },
			{{-1, REDUCE, 134}, },
			{{-1, REDUCE, 132}, {29, SHIFT, 107}, },
			{{-1, ERROR, 110}, {2, SHIFT, 31}, {6, SHIFT, 32}, {22, SHIFT, 33}, {27, SHIFT, 146}, {32, SHIFT, 34}, {37, SHIFT, 35}, {39, SHIFT, 36}, {43, SHIFT, 37}, {44, SHIFT, 38}, {45, SHIFT, 39}, {46, SHIFT, 40}, {47, SHIFT, 41}, {48, SHIFT, 8}, {49, SHIFT, 42}, {50, SHIFT, 43}, {51, SHIFT, 44}, {52, SHIFT, 45}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 11}, {30, SHIFT, 149}, },
			{{-1, ERROR, 116}, {30, SHIFT, 151}, },
			{{-1, ERROR, 117}, {23, SHIFT, 152}, },
			{{-1, REDUCE, 16}, {28, SHIFT, 153}, },
			{{-1, REDUCE, 67}, },
			{{-1, ERROR, 120}, {2, SHIFT, 31}, {6, SHIFT, 32}, {22, SHIFT, 33}, {32, SHIFT, 34}, {37, SHIFT, 35}, {39, SHIFT, 36}, {43, SHIFT, 37}, {44, SHIFT, 38}, {45, SHIFT, 39}, {46, SHIFT, 40}, {47, SHIFT, 41}, {48, SHIFT, 8}, {49, SHIFT, 42}, {50, SHIFT, 43}, {51, SHIFT, 44}, {52, SHIFT, 45}, },
			{{-1, ERROR, 121}, {43, SHIFT, 4}, {44, SHIFT, 5}, {45, SHIFT, 6}, {46, SHIFT, 7}, {48, SHIFT, 8}, },
			{{-1, ERROR, 122}, {12, SHIFT, 159}, },
			{{-1, ERROR, 123}, {2, SHIFT, 31}, {6, SHIFT, 32}, {22, SHIFT, 33}, {32, SHIFT, 34}, {37, SHIFT, 35}, {39, SHIFT, 36}, {43, SHIFT, 37}, {44, SHIFT, 38}, {45, SHIFT, 39}, {46, SHIFT, 40}, {47, SHIFT, 41}, {48, SHIFT, 8}, {49, SHIFT, 42}, {50, SHIFT, 43}, {51, SHIFT, 44}, {52, SHIFT, 45}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 102}, {22, SHIFT, 101}, {24, SHIFT, 102}, {33, SHIFT, 103}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 69}, },
			{{-1, ERROR, 135}, {23, SHIFT, 164}, {28, SHIFT, 165}, {30, SHIFT, 166}, {31, SHIFT, 167}, {34, SHIFT, 168}, },
			{{-1, REDUCE, 141}, {31, SHIFT, 171}, },
			{{-1, ERROR, 137}, {25, SHIFT, 174}, },
			{{-1, REDUCE, 140}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 62}, {22, SHIFT, 101}, },
			{{-1, REDUCE, 139}, },
			{{-1, REDUCE, 138}, },
			{{-1, REDUCE, 137}, },
			{{-1, REDUCE, 133}, },
			{{-1, REDUCE, 93}, },
			{{-1, REDUCE, 95}, {31, SHIFT, 176}, {35, SHIFT, 177}, },
			{{-1, ERROR, 148}, {27, SHIFT, 181}, },
			{{-1, ERROR, 149}, {43, SHIFT, 4}, {44, SHIFT, 5}, {45, SHIFT, 6}, {46, SHIFT, 7}, {48, SHIFT, 8}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 151}, {43, SHIFT, 4}, {44, SHIFT, 5}, {45, SHIFT, 6}, {46, SHIFT, 7}, {48, SHIFT, 8}, },
			{{-1, REDUCE, 12}, {30, SHIFT, 149}, },
			{{-1, ERROR, 153}, {49, SHIFT, 116}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 17}, {28, SHIFT, 153}, },
			{{-1, ERROR, 156}, {38, SHIFT, 187}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 120}, {29, SHIFT, 188}, },
			{{-1, ERROR, 159}, {2, SHIFT, 31}, {6, SHIFT, 32}, {22, SHIFT, 33}, {32, SHIFT, 34}, {37, SHIFT, 35}, {39, SHIFT, 36}, {43, SHIFT, 37}, {44, SHIFT, 38}, {45, SHIFT, 39}, {46, SHIFT, 40}, {47, SHIFT, 41}, {48, SHIFT, 8}, {49, SHIFT, 42}, {50, SHIFT, 43}, {51, SHIFT, 44}, {52, SHIFT, 45}, },
			{{-1, ERROR, 160}, {41, SHIFT, 192}, },
			{{-1, REDUCE, 106}, },
			{{-1, REDUCE, 104}, {22, SHIFT, 101}, },
			{{-1, REDUCE, 103}, {22, SHIFT, 101}, {24, SHIFT, 102}, },
			{{-1, REDUCE, 70}, },
			{{-1, ERROR, 165}, {49, SHIFT, 196}, },
			{{-1, ERROR, 166}, {8, SHIFT, 197}, {43, SHIFT, 4}, {44, SHIFT, 5}, {45, SHIFT, 6}, {46, SHIFT, 7}, {48, SHIFT, 8}, },
			{{-1, ERROR, 167}, {2, SHIFT, 31}, {6, SHIFT, 32}, {22, SHIFT, 33}, {32, SHIFT, 34}, {37, SHIFT, 35}, {39, SHIFT, 36}, {43, SHIFT, 37}, {44, SHIFT, 38}, {45, SHIFT, 39}, {46, SHIFT, 40}, {47, SHIFT, 41}, {48, SHIFT, 8}, {49, SHIFT, 42}, {50, SHIFT, 43}, {51, SHIFT, 44}, {52, SHIFT, 45}, },
			{{-1, ERROR, 168}, {2, SHIFT, 31}, {6, SHIFT, 32}, {22, SHIFT, 33}, {32, SHIFT, 34}, {37, SHIFT, 35}, {39, SHIFT, 36}, {43, SHIFT, 37}, {44, SHIFT, 38}, {45, SHIFT, 39}, {46, SHIFT, 40}, {47, SHIFT, 41}, {48, SHIFT, 8}, {49, SHIFT, 42}, {50, SHIFT, 43}, {51, SHIFT, 44}, {52, SHIFT, 45}, },
			{{-1, REDUCE, 73}, },
			{{-1, ERROR, 170}, {23, SHIFT, 203}, {28, SHIFT, 165}, {30, SHIFT, 166}, {31, SHIFT, 167}, {34, SHIFT, 168}, },
			{{-1, ERROR, 171}, {2, SHIFT, 31}, {6, SHIFT, 32}, {22, SHIFT, 33}, {32, SHIFT, 34}, {37, SHIFT, 35}, {39, SHIFT, 36}, {43, SHIFT, 37}, {44, SHIFT, 38}, {45, SHIFT, 39}, {46, SHIFT, 40}, {47, SHIFT, 41}, {48, SHIFT, 8}, {49, SHIFT, 42}, {50, SHIFT, 43}, {51, SHIFT, 44}, {52, SHIFT, 45}, },
			{{-1, REDUCE, 144}, },
			{{-1, REDUCE, 142}, {31, SHIFT, 171}, },
			{{-1, REDUCE, 110}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 176}, {2, SHIFT, 31}, {6, SHIFT, 32}, {22, SHIFT, 33}, {32, SHIFT, 34}, {37, SHIFT, 35}, {39, SHIFT, 36}, {43, SHIFT, 37}, {44, SHIFT, 38}, {45, SHIFT, 39}, {46, SHIFT, 40}, {47, SHIFT, 41}, {48, SHIFT, 8}, {49, SHIFT, 42}, {50, SHIFT, 43}, {51, SHIFT, 44}, {52, SHIFT, 45}, },
			{{-1, ERROR, 177}, {2, SHIFT, 31}, {6, SHIFT, 32}, {22, SHIFT, 33}, {32, SHIFT, 34}, {37, SHIFT, 35}, {39, SHIFT, 36}, {43, SHIFT, 37}, {44, SHIFT, 38}, {45, SHIFT, 39}, {46, SHIFT, 40}, {47, SHIFT, 41}, {48, SHIFT, 8}, {49, SHIFT, 42}, {50, SHIFT, 43}, {51, SHIFT, 44}, {52, SHIFT, 45}, },
			{{-1, REDUCE, 96}, },
			{{-1, REDUCE, 99}, },
			{{-1, REDUCE, 97}, {31, SHIFT, 176}, },
			{{-1, REDUCE, 94}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 78}, },
			{{-1, ERROR, 188}, {43, SHIFT, 4}, {44, SHIFT, 5}, {45, SHIFT, 6}, {46, SHIFT, 7}, {48, SHIFT, 8}, },
			{{-1, REDUCE, 123}, },
			{{-1, REDUCE, 121}, {29, SHIFT, 188}, },
			{{-1, ERROR, 191}, {38, SHIFT, 212}, },
			{{-1, ERROR, 192}, {2, SHIFT, 31}, {6, SHIFT, 32}, {22, SHIFT, 33}, {32, SHIFT, 34}, {37, SHIFT, 35}, {39, SHIFT, 36}, {43, SHIFT, 37}, {44, SHIFT, 38}, {45, SHIFT, 39}, {46, SHIFT, 40}, {47, SHIFT, 41}, {48, SHIFT, 8}, {49, SHIFT, 42}, {50, SHIFT, 43}, {51, SHIFT, 44}, {52, SHIFT, 45}, },
			{{-1, REDUCE, 108}, },
			{{-1, REDUCE, 107}, },
			{{-1, REDUCE, 105}, {22, SHIFT, 101}, },
			{{-1, ERROR, 196}, {30, SHIFT, 215}, },
			{{-1, ERROR, 197}, {26, SHIFT, 216}, },
			{{-1, REDUCE, 92}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 91}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 77}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 145}, },
			{{-1, REDUCE, 143}, },
			{{-1, REDUCE, 101}, },
			{{-1, REDUCE, 100}, },
			{{-1, REDUCE, 98}, },
			{{-1, REDUCE, 124}, },
			{{-1, REDUCE, 122}, },
			{{-1, REDUCE, 79}, },
			{{-1, ERROR, 213}, {42, SHIFT, 217}, },
			{{-1, REDUCE, 109}, },
			{{-1, ERROR, 215}, {8, SHIFT, 197}, {43, SHIFT, 4}, {44, SHIFT, 5}, {45, SHIFT, 6}, {46, SHIFT, 7}, {48, SHIFT, 8}, },
			{{-1, ERROR, 216}, {32, SHIFT, 219}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 218}, {12, SHIFT, 220}, },
			{{-1, ERROR, 219}, {49, SHIFT, 221}, },
			{{-1, ERROR, 220}, {2, SHIFT, 31}, {6, SHIFT, 32}, {22, SHIFT, 33}, {32, SHIFT, 34}, {37, SHIFT, 35}, {39, SHIFT, 36}, {43, SHIFT, 37}, {44, SHIFT, 38}, {45, SHIFT, 39}, {46, SHIFT, 40}, {47, SHIFT, 41}, {48, SHIFT, 8}, {49, SHIFT, 42}, {50, SHIFT, 43}, {51, SHIFT, 44}, {52, SHIFT, 45}, },
			{{-1, ERROR, 221}, {27, SHIFT, 223}, {31, SHIFT, 224}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 86}, },
			{{-1, ERROR, 224}, {32, SHIFT, 227}, },
			{{-1, REDUCE, 89}, },
			{{-1, ERROR, 226}, {27, SHIFT, 228}, {31, SHIFT, 224}, },
			{{-1, ERROR, 227}, {49, SHIFT, 230}, },
			{{-1, REDUCE, 87}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 90}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 19}, {21, 28}, },
			{{-1, 3}, },
			{{-1, 10}, },
			{{-1, 11}, },
			{{-1, 12}, },
			{{-1, 13}, },
			{{-1, 150}, {152, 184}, },
			{{-1, 117}, },
			{{-1, 154}, {155, 186}, },
			{{-1, 118}, {153, 185}, },
			{{-1, 20}, },
			{{-1, 46}, {33, 67}, {36, 70}, {64, 114}, {101, 135}, {102, 136}, {110, 147}, {120, 156}, {123, 160}, {159, 191}, {167, 201}, {168, 202}, {171, 205}, {176, 207}, {177, 208}, {192, 213}, {220, 222}, },
			{{-1, 47}, },
			{{-1, 48}, {63, 112}, },
			{{-1, 75}, {77, 125}, },
			{{-1, 49}, {76, 124}, },
			{{-1, 84}, },
			{{-1, 50}, {85, 126}, },
			{{-1, 88}, {90, 128}, },
			{{-1, 51}, {89, 127}, },
			{{-1, 93}, {95, 130}, },
			{{-1, 52}, {94, 129}, },
			{{-1, 53}, {62, 111}, },
			{{-1, 98}, {100, 133}, },
			{{-1, 99}, },
			{{-1, 54}, },
			{{-1, 104}, {105, 139}, {106, 140}, {132, 161}, {141, 175}, {162, 193}, {163, 194}, {195, 214}, },
			{{-1, 169}, {170, 204}, },
			{{-1, 55}, {63, 113}, },
			{{-1, 122}, },
			{{-1, 56}, },
			{{-1, 198}, },
			{{-1, 225}, {226, 229}, },
			{{-1, 199}, {215, 218}, },
			{{-1, 57}, },
			{{-1, 148}, },
			{{-1, 178}, },
			{{-1, 179}, {180, 209}, },
			{{-1, 131}, },
			{{-1, 105}, {106, 141}, {132, 162}, {163, 195}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, 200}, {121, 157}, },
			{{-1, 189}, {190, 211}, },
			{{-1, 58}, {1, 14}, {12, 23}, {107, 143}, {121, 158}, {149, 182}, {151, 183}, {166, 158}, {188, 210}, {215, 158}, },
			{{-1, 15}, },
			{{-1, 59}, {99, 132}, },
			{{-1, 60}, },
			{{-1, 108}, {109, 145}, },
			{{-1, 144}, },
			{{-1, 106}, {132, 163}, },
			{{-1, 137}, },
			{{-1, 172}, {173, 206}, },
			{{-1, 76}, },
			{{-1, 61}, },
			{{-1, 85}, },
			{{-1, 89}, },
			{{-1, 94}, },
			{{-1, 62}, },
			{{-1, 21}, },
			{{-1, 155}, },
			{{-1, 63}, },
			{{-1, 77}, },
			{{-1, 90}, },
			{{-1, 95}, },
			{{-1, 100}, },
			{{-1, 170}, },
			{{-1, 226}, },
			{{-1, 180}, },
			{{-1, -1}, },
			{{-1, 190}, },
			{{-1, 109}, },
			{{-1, 173}, },
        };*/
    private static String[] errorMessages;
/*      {
			"TContext expected.",
			"TTSet TTBag TTSequence TTCollection TSimpleTypeName TName expected.",
			"EOF expected.",
			"TTPre TTPost TTInv expected.",
			"TLPar expected.",
			"TDot TArrow TMult TDiv TPlus TMinus TTPre TTPost TTInv TEqual TNEqual TLt TGt TLteq TGteq TAnd TOr TXor TImplies TLPar TRPar TLBracket TRBracket TRBrace TSemicolon TDcolon TColon TComma TAt TBar TDdot TTIn TTThen TTElse TEndif EOF expected.",
			"TColon expected.",
			"TTSet TTBag TTSequence TTCollection TSimpleTypeName expected.",
			"TTPre TTPost TTInv TDcolon expected.",
			"TColon TName expected.",
			"TTPre TTPost TTInv EOF expected.",
			"TName expected.",
			"TSimpleTypeName expected.",
			"TNot TMinus TLPar TChannel TTLet TTIf TTSet TTBag TTSequence TTCollection TBool TSimpleTypeName TName TInt TReal TStringLit expected.",
			"TRPar expected.",
			"TLPar TChannel TTIf TTSet TTBag TTSequence TTCollection TBool TSimpleTypeName TName TInt TReal TStringLit expected.",
			"TLPar TLBrace expected.",
			"TDot TArrow TMult TDiv TPlus TMinus TTPre TTPost TTInv TEqual TNEqual TLt TGt TLteq TGteq TAnd TOr TXor TImplies TRPar TRBracket TRBrace TSemicolon TColon TComma TBar TDdot TTIn TTThen TTElse TEndif EOF expected.",
			"TTPre TTPost TTInv TRPar TRBracket TRBrace TSemicolon TColon TComma TBar TDdot TTIn TTThen TTElse TEndif EOF expected.",
			"TTPre TTPost TTInv TAnd TOr TXor TImplies TRPar TRBracket TRBrace TSemicolon TColon TComma TBar TDdot TTIn TTThen TTElse TEndif EOF expected.",
			"TTPre TTPost TTInv TEqual TNEqual TLt TGt TLteq TGteq TAnd TOr TXor TImplies TRPar TRBracket TRBrace TSemicolon TColon TComma TBar TDdot TTIn TTThen TTElse TEndif EOF expected.",
			"TPlus TMinus TTPre TTPost TTInv TEqual TNEqual TLt TGt TLteq TGteq TAnd TOr TXor TImplies TRPar TRBracket TRBrace TSemicolon TColon TComma TBar TDdot TTIn TTThen TTElse TEndif EOF expected.",
			"TMult TDiv TPlus TMinus TTPre TTPost TTInv TEqual TNEqual TLt TGt TLteq TGteq TAnd TOr TXor TImplies TRPar TRBracket TRBrace TSemicolon TColon TComma TBar TDdot TTIn TTThen TTElse TEndif EOF expected.",
			"TDot TArrow TMult TDiv TPlus TMinus TTPre TTPost TTInv TEqual TNEqual TLt TGt TLteq TGteq TAnd TOr TXor TImplies TLPar TRPar TLBracket TRBracket TRBrace TSemicolon TColon TComma TAt TBar TDdot TTIn TTThen TTElse TEndif EOF expected.",
			"TLBrace expected.",
			"TRPar TName expected.",
			"TEqual TColon expected.",
			"TTThen expected.",
			"TNot TMinus TLPar TChannel TTIf TTSet TTBag TTSequence TTCollection TBool TSimpleTypeName TName TInt TReal TStringLit expected.",
			"TNot TMinus TLPar TRPar TChannel TTLet TTIf TTSet TTBag TTSequence TTCollection TBool TSimpleTypeName TName TInt TReal TStringLit expected.",
			"TTPre expected.",
			"TDot TArrow TMult TDiv TPlus TMinus TTPre TTPost TTInv TEqual TNEqual TLt TGt TLteq TGteq TAnd TOr TXor TImplies TLPar TRPar TRBracket TRBrace TSemicolon TColon TComma TBar TDdot TTIn TTThen TTElse TEndif EOF expected.",
			"TDot TArrow TMult TDiv TPlus TMinus TTPre TTPost TTInv TEqual TNEqual TLt TGt TLteq TGteq TAnd TOr TXor TImplies TLPar TRPar TLBracket TRBracket TRBrace TSemicolon TColon TComma TBar TDdot TTIn TTThen TTElse TEndif EOF expected.",
			"TNot TMinus TLPar TRBrace TChannel TTLet TTIf TTSet TTBag TTSequence TTCollection TBool TSimpleTypeName TName TInt TReal TStringLit expected.",
			"TTPre TTPost TTInv TColon expected.",
			"TRPar TSemicolon expected.",
			"TEqual expected.",
			"TRPar TSemicolon TColon TComma TBar expected.",
			"TRBracket TComma expected.",
			"TRBracket expected.",
			"TRBrace TComma TDdot expected.",
			"TRBrace expected.",
			"TTIn expected.",
			"TEqual TRPar TSemicolon TDcolon TColon TComma TBar expected.",
			"TTElse expected.",
			"TEnum TTSet TTBag TTSequence TTCollection TSimpleTypeName expected.",
			"TRBrace TComma expected.",
			"TEqual TRPar TSemicolon TColon TComma TBar expected.",
			"TEndif expected.",
			"TChannel expected.",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 4, 4, 4, 5, 6, 3, 3, 7, 3, 8, 4, 9, 9, 9, 10, 9, 10, 7, 3, 11, 12, 13, 6, 10, 4, 14, 15, 15, 13, 11, 11, 13, 16, 16, 16, 16, 17, 5, 17, 17, 17, 10, 17, 18, 19, 20, 21, 22, 22, 17, 13, 17, 17, 5, 23, 5, 24, 15, 13, 13, 25, 5, 14, 17, 26, 27, 28, 28, 28, 28, 19, 28, 19, 28, 28, 28, 28, 28, 28, 19, 28, 28, 28, 21, 28, 21, 28, 28, 22, 28, 22, 1, 1, 17, 1, 17, 29, 13, 30, 17, 31, 32, 1, 5, 5, 33, 22, 18, 13, 10, 34, 6, 14, 35, 17, 13, 7, 36, 13, 19, 19, 19, 21, 21, 22, 22, 17, 23, 17, 17, 37, 38, 39, 32, 17, 17, 31, 5, 5, 5, 5, 17, 40, 41, 7, 3, 7, 34, 11, 35, 35, 42, 36, 43, 13, 44, 17, 31, 32, 17, 11, 45, 13, 13, 37, 37, 13, 38, 38, 31, 17, 13, 13, 41, 46, 46, 17, 3, 35, 3, 35, 35, 13, 7, 43, 43, 42, 13, 17, 17, 31, 6, 24, 47, 37, 47, 37, 37, 17, 37, 38, 38, 46, 41, 46, 43, 43, 13, 48, 17, 45, 49, 17, 36, 11, 13, 46, 37, 47, 49, 46, 46, 11, 47, 46, 46, 
        };*/
}

