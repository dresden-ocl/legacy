/* This file was generated by SableCC (http://www.sable.mcgill.ca/sablecc/). */

package tudresden.ocl.parser.node;

import java.util.*;
import tudresden.ocl.parser.analysis.*;

public final class AIterateDeclarator extends PDeclarator
{
    private TName _iterator_;
    private PDeclaratorTypeDeclaration _iterType_;
    private TSemicolon _semicolon_;
    private TName _accumulator_;
    private PDeclaratorTypeDeclaration _accType_;
    private TEqual _equal_;
    private PExpression _expression_;
    private TBar _bar_;

    public AIterateDeclarator()
    {
    }

    public AIterateDeclarator(
        TName _iterator_,
        PDeclaratorTypeDeclaration _iterType_,
        TSemicolon _semicolon_,
        TName _accumulator_,
        PDeclaratorTypeDeclaration _accType_,
        TEqual _equal_,
        PExpression _expression_,
        TBar _bar_)
    {
        setIterator(_iterator_);

        setIterType(_iterType_);

        setSemicolon(_semicolon_);

        setAccumulator(_accumulator_);

        setAccType(_accType_);

        setEqual(_equal_);

        setExpression(_expression_);

        setBar(_bar_);

    }
    public Object clone()
    {
        return new AIterateDeclarator(
            (TName) cloneNode(_iterator_),
            (PDeclaratorTypeDeclaration) cloneNode(_iterType_),
            (TSemicolon) cloneNode(_semicolon_),
            (TName) cloneNode(_accumulator_),
            (PDeclaratorTypeDeclaration) cloneNode(_accType_),
            (TEqual) cloneNode(_equal_),
            (PExpression) cloneNode(_expression_),
            (TBar) cloneNode(_bar_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIterateDeclarator(this);
    }

    public TName getIterator()
    {
        return _iterator_;
    }

    public void setIterator(TName node)
    {
        if(_iterator_ != null)
        {
            _iterator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _iterator_ = node;
    }

    public PDeclaratorTypeDeclaration getIterType()
    {
        return _iterType_;
    }

    public void setIterType(PDeclaratorTypeDeclaration node)
    {
        if(_iterType_ != null)
        {
            _iterType_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _iterType_ = node;
    }

    public TSemicolon getSemicolon()
    {
        return _semicolon_;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _semicolon_ = node;
    }

    public TName getAccumulator()
    {
        return _accumulator_;
    }

    public void setAccumulator(TName node)
    {
        if(_accumulator_ != null)
        {
            _accumulator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _accumulator_ = node;
    }

    public PDeclaratorTypeDeclaration getAccType()
    {
        return _accType_;
    }

    public void setAccType(PDeclaratorTypeDeclaration node)
    {
        if(_accType_ != null)
        {
            _accType_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _accType_ = node;
    }

    public TEqual getEqual()
    {
        return _equal_;
    }

    public void setEqual(TEqual node)
    {
        if(_equal_ != null)
        {
            _equal_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _equal_ = node;
    }

    public PExpression getExpression()
    {
        return _expression_;
    }

    public void setExpression(PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expression_ = node;
    }

    public TBar getBar()
    {
        return _bar_;
    }

    public void setBar(TBar node)
    {
        if(_bar_ != null)
        {
            _bar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _bar_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_iterator_)
            + toString(_iterType_)
            + toString(_semicolon_)
            + toString(_accumulator_)
            + toString(_accType_)
            + toString(_equal_)
            + toString(_expression_)
            + toString(_bar_);
    }

    void removeChild(Node child)
    {
        if(_iterator_ == child)
        {
            _iterator_ = null;
            return;
        }

        if(_iterType_ == child)
        {
            _iterType_ = null;
            return;
        }

        if(_semicolon_ == child)
        {
            _semicolon_ = null;
            return;
        }

        if(_accumulator_ == child)
        {
            _accumulator_ = null;
            return;
        }

        if(_accType_ == child)
        {
            _accType_ = null;
            return;
        }

        if(_equal_ == child)
        {
            _equal_ = null;
            return;
        }

        if(_expression_ == child)
        {
            _expression_ = null;
            return;
        }

        if(_bar_ == child)
        {
            _bar_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_iterator_ == oldChild)
        {
            setIterator((TName) newChild);
            return;
        }

        if(_iterType_ == oldChild)
        {
            setIterType((PDeclaratorTypeDeclaration) newChild);
            return;
        }

        if(_semicolon_ == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

        if(_accumulator_ == oldChild)
        {
            setAccumulator((TName) newChild);
            return;
        }

        if(_accType_ == oldChild)
        {
            setAccType((PDeclaratorTypeDeclaration) newChild);
            return;
        }

        if(_equal_ == oldChild)
        {
            setEqual((TEqual) newChild);
            return;
        }

        if(_expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(_bar_ == oldChild)
        {
            setBar((TBar) newChild);
            return;
        }

    }
}

