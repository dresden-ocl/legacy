java.util.ArrayList<tudresden.ocl20.pivot.examples.royalsandloyals.Membership> result3;
result3 = new java.util.ArrayList<tudresden.ocl20.pivot.examples.royalsandloyals.Membership>();

/* Iterator Collect: Iterate through all elements and collect them. Elements which are collections are flattened. */
for (tudresden.ocl20.pivot.examples.royalsandloyals.LoyaltyProgram $implicitCollect0$ : aClass.programs) {
    result3.add($implicitCollect0$.membership);
}
java.util.ArrayList<tudresden.ocl20.pivot.examples.royalsandloyals.LoyaltyAccount> result2;
result2 = new java.util.ArrayList<tudresden.ocl20.pivot.examples.royalsandloyals.LoyaltyAccount>();

/* Iterator Collect: Iterate through all elements and collect them. Elements which are collections are flattened. */
for (tudresden.ocl20.pivot.examples.royalsandloyals.Membership $implicitCollect0$ : result3) {
    result2.addAll($implicitCollect0$.accounts);
}
java.util.ArrayList<tudresden.ocl20.pivot.examples.royalsandloyals.LoyaltyAccount> result1;
result1 = new java.util.ArrayList<tudresden.ocl20.pivot.examples.royalsandloyals.LoyaltyAccount>();

/* Iterator Select: Select all elements which fulfill the condition. */
for (tudresden.ocl20.pivot.examples.royalsandloyals.LoyaltyAccount $implicitVariable0$ : result2) {
    if (($implicitVariable0$.points > new Integer(0))) {
        result1.add($implicitVariable0$);
    }
    // no else
}

java.util.ArrayList<tudresden.ocl20.pivot.examples.royalsandloyals.Membership> result6;
result6 = new java.util.ArrayList<tudresden.ocl20.pivot.examples.royalsandloyals.Membership>();

/* Iterator Collect: Iterate through all elements and collect them. Elements which are collections are flattened. */
for (tudresden.ocl20.pivot.examples.royalsandloyals.LoyaltyProgram $implicitCollect0$ : aClass.programs) {
    result6.add($implicitCollect0$.membership);
}
java.util.ArrayList<tudresden.ocl20.pivot.examples.royalsandloyals.LoyaltyAccount> result5;
result5 = new java.util.ArrayList<tudresden.ocl20.pivot.examples.royalsandloyals.LoyaltyAccount>();

/* Iterator Collect: Iterate through all elements and collect them. Elements which are collections are flattened. */
for (tudresden.ocl20.pivot.examples.royalsandloyals.Membership $implicitCollect0$ : result6) {
    result5.addAll($implicitCollect0$.accounts);
}
java.util.ArrayList<tudresden.ocl20.pivot.examples.royalsandloyals.LoyaltyAccount> result4;
result4 = new java.util.ArrayList<tudresden.ocl20.pivot.examples.royalsandloyals.LoyaltyAccount>();

/* Iterator Reject: Select all elements which do not fulfill the condition. */
for (tudresden.ocl20.pivot.examples.royalsandloyals.LoyaltyAccount $implicitVariable0$ : result5) {
    if (!!($implicitVariable0$.points > new Integer(0))) {
        result4.add($implicitVariable0$);
    }
    // no else
}

tudresden.ocl20.pivot.tools.codegen.ocl2java.types.util.OclBags.equals(result1, result4)