/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * OCL Compiler                                                      *
 * Copyright (C) 2001 Steffen Zschaler (sz9@inf.tu-dresden.de).       *
 * All rights reserved.                                              *
 *                                                                   *
 * This work is free software; you can redistribute it and/or        *
 * modify it under the terms of the GNU Library General Public       *
 * License as published by the Free Software Foundation; either      *
 * version 2 of the License, or (at your option) any later version.  *
 *                                                                   *
 * This work is distributed in the hope that it will be useful,      *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of    *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *
 * Library General Public License for more details.                  *
 *                                                                   *
 * You should have received a copy of the GNU Library General Public *
 * License along with this library; if not, write to the             *
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,      *
 * Boston, MA  02111-1307, USA.                                      *
 *                                                                   *
 * To submit a bug report, send a comment, or get the latest news on *
 * this project and other projects, please visit the web site:       *
 * http://www-st.inf.tu-dresden.de/ (Chair home page) or             *
 * http://www-st.inf.tu-dresden.de/ocl/ (project home page)          *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
package tudresden.ocl.gui;

import java.lang.ref.WeakReference;

/** 
 * A quick bar for the {@link OCLEditor}
 *
 * @author  sz9
 */
public class OCLToolbar extends javax.swing.JFrame {

  /**
   * The OCLEditor for which this is the quick bar.
   */
  private WeakReference m_wrocleEditor;
  
  /** Creates new form OCLToolbar */
  public OCLToolbar (OCLEditor editor) {
    m_wrocleEditor = new WeakReference (editor);
    initComponents ();    
  }

  /**
   * Add the given text to the editor's edit pane, if a constraint is currently
   * being edited. The text will replace the current selection. If
   * saBefore/saAfter are not <code>null</code> and contain elements, these
   * will be added as items to be replaced. The first such item will be
   * selected.
   */
  protected void addText (String[] saBefore,
                             String sText,
                             String[] saAfter) {
    OCLEditor ocle = (OCLEditor) m_wrocleEditor.get();
    
    if (ocle != null) {
      ocle.addConstraintText (saBefore, sText, saAfter);
    }
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the FormEditor.
   */
  private void initComponents () {//GEN-BEGIN:initComponents
    m_jtpMain = new javax.swing.JTabbedPane ();
    m_jpGeneral = new javax.swing.JPanel ();
    m_jbInv = new javax.swing.JButton ();
    m_jbPre = new javax.swing.JButton ();
    m_jbPost = new javax.swing.JButton ();
    m_jbSelf = new javax.swing.JButton ();
    m_jbAtPre = new javax.swing.JButton ();
    m_jbResult = new javax.swing.JButton ();
    pad1 = new javax.swing.JPanel ();
    pad2 = new javax.swing.JPanel ();
    m_jpBasics = new javax.swing.JPanel ();
    m_jbEquals = new javax.swing.JButton ();
    m_jbNEquals = new javax.swing.JButton ();
    m_jbLess = new javax.swing.JButton ();
    m_jbGreater = new javax.swing.JButton ();
    m_jbLessE = new javax.swing.JButton ();
    m_jbGreaterE = new javax.swing.JButton ();
    m_jbParens = new javax.swing.JButton ();
    pad3 = new javax.swing.JPanel ();
    pad4 = new javax.swing.JPanel ();
    m_jpNumbers = new javax.swing.JPanel ();
    m_jbPlus = new javax.swing.JButton ();
    m_jbMinus = new javax.swing.JButton ();
    m_jbMultiply = new javax.swing.JButton ();
    m_jbDivide = new javax.swing.JButton ();
    pad5 = new javax.swing.JPanel ();
    m_jbModulus = new javax.swing.JButton ();
    m_jbIntDiv = new javax.swing.JButton ();
    m_jbAbs = new javax.swing.JButton ();
    m_jbMax = new javax.swing.JButton ();
    m_jbMin = new javax.swing.JButton ();
    m_jbRound = new javax.swing.JButton ();
    m_jbFloor = new javax.swing.JButton ();
    pad6 = new javax.swing.JPanel ();
    pad7 = new javax.swing.JPanel ();
    m_jpStrings = new javax.swing.JPanel ();
    m_jbConcat = new javax.swing.JButton ();
    m_jbStrSize = new javax.swing.JButton ();
    m_jbToLower = new javax.swing.JButton ();
    m_jbToUpper = new javax.swing.JButton ();
    m_jbSubstring = new javax.swing.JButton ();
    pad8 = new javax.swing.JPanel ();
    pad9 = new javax.swing.JPanel ();
    m_jpBooleans = new javax.swing.JPanel ();
    m_jbOr = new javax.swing.JButton ();
    m_jbAnd = new javax.swing.JButton ();
    m_jbXor = new javax.swing.JButton ();
    m_jbNot = new javax.swing.JButton ();
    m_jbImplies = new javax.swing.JButton ();
    m_jbIfThenElse = new javax.swing.JButton ();
    pad10 = new javax.swing.JPanel ();
    pad11 = new javax.swing.JPanel ();
    m_jpCollections = new javax.swing.JPanel ();
    m_jtbCollections = new javax.swing.JTabbedPane ();
    m_jpCollectionsGeneral = new javax.swing.JPanel ();
    m_jbConstrColl = new javax.swing.JButton ();
    m_jbConstrSet = new javax.swing.JButton ();
    m_jbConstrBag = new javax.swing.JButton ();
    m_jbConstrSeq = new javax.swing.JButton ();
    pad12 = new javax.swing.JPanel ();
    m_jbCollSize = new javax.swing.JButton ();
    m_jbColCount = new javax.swing.JButton ();
    m_jbIsEmpty = new javax.swing.JButton ();
    m_jbNotEmpty = new javax.swing.JButton ();
    m_jbIncludes = new javax.swing.JButton ();
    m_jbIncludesAll = new javax.swing.JButton ();
    pad13 = new javax.swing.JPanel ();
    m_jbIterate = new javax.swing.JButton ();
    m_jbExists = new javax.swing.JButton ();
    m_jbForAll = new javax.swing.JButton ();
    m_jbCollect = new javax.swing.JButton ();
    m_jbSelect = new javax.swing.JButton ();
    m_jbReject = new javax.swing.JButton ();
    pad14 = new javax.swing.JPanel ();
    m_jbUnion = new javax.swing.JButton ();
    m_jbIntersection = new javax.swing.JButton ();
    m_jbIncluding = new javax.swing.JButton ();
    m_jbExcluding = new javax.swing.JButton ();
    m_jbSum = new javax.swing.JButton ();
    pad15 = new javax.swing.JPanel ();
    pad16 = new javax.swing.JPanel ();
    m_jpCollectionsSet = new javax.swing.JPanel ();
    m_jbSetMinus = new javax.swing.JButton ();
    m_jbSymmetricDiff = new javax.swing.JButton ();
    jPanel27 = new javax.swing.JPanel ();
    jPanel28 = new javax.swing.JPanel ();
    m_jpCollectionsSequence = new javax.swing.JPanel ();
    m_jbSeqFirst = new javax.swing.JButton ();
    m_jbSeqLast = new javax.swing.JButton ();
    m_jbSeqAt = new javax.swing.JButton ();
    m_jbSeqAppend = new javax.swing.JButton ();
    m_jbSeqPrepend = new javax.swing.JButton ();
    m_jbSubSequence = new javax.swing.JButton ();
    jPanel29 = new javax.swing.JPanel ();
    jPanel30 = new javax.swing.JPanel ();
    getContentPane ().setLayout (new java.awt.GridBagLayout ());
    java.awt.GridBagConstraints gridBagConstraints1;
    setTitle ("OCL Editor QuickBar");


      m_jpGeneral.setLayout (new java.awt.GridBagLayout ());
      java.awt.GridBagConstraints gridBagConstraints2;
  
        m_jbInv.setText ("inv");
        m_jbInv.addActionListener (new java.awt.event.ActionListener () {
          public void actionPerformed (java.awt.event.ActionEvent evt) {
            onStereotypeButton (evt);
          }
        }
        );
    
        gridBagConstraints2 = new java.awt.GridBagConstraints ();
        gridBagConstraints2.insets = new java.awt.Insets (5, 5, 10, 0);
        m_jpGeneral.add (m_jbInv, gridBagConstraints2);
    
        m_jbPre.setText ("pre");
        m_jbPre.addActionListener (new java.awt.event.ActionListener () {
          public void actionPerformed (java.awt.event.ActionEvent evt) {
            onStereotypeButton (evt);
          }
        }
        );
    
        gridBagConstraints2 = new java.awt.GridBagConstraints ();
        gridBagConstraints2.insets = new java.awt.Insets (5, 5, 10, 0);
        m_jpGeneral.add (m_jbPre, gridBagConstraints2);
    
        m_jbPost.setText ("post");
        m_jbPost.addActionListener (new java.awt.event.ActionListener () {
          public void actionPerformed (java.awt.event.ActionEvent evt) {
            onStereotypeButton (evt);
          }
        }
        );
    
        gridBagConstraints2 = new java.awt.GridBagConstraints ();
        gridBagConstraints2.insets = new java.awt.Insets (5, 5, 10, 5);
        m_jpGeneral.add (m_jbPost, gridBagConstraints2);
    
        m_jbSelf.setText ("self");
        m_jbSelf.addActionListener (new java.awt.event.ActionListener () {
          public void actionPerformed (java.awt.event.ActionEvent evt) {
            onSelf (evt);
          }
        }
        );
    
        gridBagConstraints2 = new java.awt.GridBagConstraints ();
        gridBagConstraints2.insets = new java.awt.Insets (5, 5, 10, 5);
        m_jpGeneral.add (m_jbSelf, gridBagConstraints2);
    
        m_jbAtPre.setText ("@pre");
        m_jbAtPre.addActionListener (new java.awt.event.ActionListener () {
          public void actionPerformed (java.awt.event.ActionEvent evt) {
            onAtPre (evt);
          }
        }
        );
    
        gridBagConstraints2 = new java.awt.GridBagConstraints ();
        gridBagConstraints2.insets = new java.awt.Insets (5, 5, 10, 0);
        m_jpGeneral.add (m_jbAtPre, gridBagConstraints2);
    
        m_jbResult.setText ("result");
        m_jbResult.addActionListener (new java.awt.event.ActionListener () {
          public void actionPerformed (java.awt.event.ActionEvent evt) {
            onResult (evt);
          }
        }
        );
    
        gridBagConstraints2 = new java.awt.GridBagConstraints ();
        gridBagConstraints2.insets = new java.awt.Insets (5, 5, 10, 5);
        m_jpGeneral.add (m_jbResult, gridBagConstraints2);
    
    
        gridBagConstraints2 = new java.awt.GridBagConstraints ();
        gridBagConstraints2.gridwidth = 0;
        gridBagConstraints2.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints2.weightx = 1.0;
        m_jpGeneral.add (pad1, gridBagConstraints2);
    
    
        gridBagConstraints2 = new java.awt.GridBagConstraints ();
        gridBagConstraints2.gridwidth = 0;
        gridBagConstraints2.gridheight = 0;
        gridBagConstraints2.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints2.weightx = 1.0;
        gridBagConstraints2.weighty = 1.0;
        m_jpGeneral.add (pad2, gridBagConstraints2);
    
      m_jtpMain.addTab ("General", m_jpGeneral);
  
      m_jpBasics.setLayout (new java.awt.GridBagLayout ());
      java.awt.GridBagConstraints gridBagConstraints3;
  
        m_jbEquals.setText ("=");
        m_jbEquals.addActionListener (new java.awt.event.ActionListener () {
          public void actionPerformed (java.awt.event.ActionEvent evt) {
            onSimpleOperator (evt);
          }
        }
        );
    
        gridBagConstraints3 = new java.awt.GridBagConstraints ();
        gridBagConstraints3.insets = new java.awt.Insets (5, 5, 10, 0);
        gridBagConstraints3.anchor = java.awt.GridBagConstraints.NORTHWEST;
        m_jpBasics.add (m_jbEquals, gridBagConstraints3);
    
        m_jbNEquals.setText ("<>");
        m_jbNEquals.addActionListener (new java.awt.event.ActionListener () {
          public void actionPerformed (java.awt.event.ActionEvent evt) {
            onSimpleOperator (evt);
          }
        }
        );
    
        gridBagConstraints3 = new java.awt.GridBagConstraints ();
        gridBagConstraints3.insets = new java.awt.Insets (5, 5, 10, 0);
        gridBagConstraints3.anchor = java.awt.GridBagConstraints.NORTHWEST;
        m_jpBasics.add (m_jbNEquals, gridBagConstraints3);
    
        m_jbLess.setText ("<");
        m_jbLess.addActionListener (new java.awt.event.ActionListener () {
          public void actionPerformed (java.awt.event.ActionEvent evt) {
            onSimpleOperator (evt);
          }
        }
        );
    
        gridBagConstraints3 = new java.awt.GridBagConstraints ();
        gridBagConstraints3.insets = new java.awt.Insets (5, 5, 10, 0);
        gridBagConstraints3.anchor = java.awt.GridBagConstraints.NORTHWEST;
        m_jpBasics.add (m_jbLess, gridBagConstraints3);
    
        m_jbGreater.setText (">");
        m_jbGreater.addActionListener (new java.awt.event.ActionListener () {
          public void actionPerformed (java.awt.event.ActionEvent evt) {
            onSimpleOperator (evt);
          }
        }
        );
    
        gridBagConstraints3 = new java.awt.GridBagConstraints ();
        gridBagConstraints3.insets = new java.awt.Insets (5, 5, 10, 0);
        gridBagConstraints3.anchor = java.awt.GridBagConstraints.NORTHWEST;
        m_jpBasics.add (m_jbGreater, gridBagConstraints3);
    
        m_jbLessE.setText ("<=");
        m_jbLessE.addActionListener (new java.awt.event.ActionListener () {
          public void actionPerformed (java.awt.event.ActionEvent evt) {
            onSimpleOperator (evt);
          }
        }
        );
    
        gridBagConstraints3 = new java.awt.GridBagConstraints ();
        gridBagConstraints3.insets = new java.awt.Insets (5, 5, 10, 0);
        gridBagConstraints3.anchor = java.awt.GridBagConstraints.NORTHWEST;
        m_jpBasics.add (m_jbLessE, gridBagConstraints3);
    
        m_jbGreaterE.setText (">=");
        m_jbGreaterE.addActionListener (new java.awt.event.ActionListener () {
          public void actionPerformed (java.awt.event.ActionEvent evt) {
            onSimpleOperator (evt);
          }
        }
        );
    
        gridBagConstraints3 = new java.awt.GridBagConstraints ();
        gridBagConstraints3.insets = new java.awt.Insets (5, 5, 10, 5);
        gridBagConstraints3.anchor = java.awt.GridBagConstraints.NORTHWEST;
        m_jpBasics.add (m_jbGreaterE, gridBagConstraints3);
    
        m_jbParens.setText ("( )");
        m_jbParens.addActionListener (new java.awt.event.ActionListener () {
          public void actionPerformed (java.awt.event.ActionEvent evt) {
            onParens (evt);
          }
        }
        );
    
        gridBagConstraints3 = new java.awt.GridBagConstraints ();
        gridBagConstraints3.insets = new java.awt.Insets (5, 5, 10, 5);
        gridBagConstraints3.anchor = java.awt.GridBagConstraints.NORTHWEST;
        m_jpBasics.add (m_jbParens, gridBagConstraints3);
    
    
        gridBagConstraints3 = new java.awt.GridBagConstraints ();
        gridBagConstraints3.gridwidth = 0;
        gridBagConstraints3.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints3.weightx = 1.0;
        m_jpBasics.add (pad3, gridBagConstraints3);
    
    
        gridBagConstraints3 = new java.awt.GridBagConstraints ();
        gridBagConstraints3.gridwidth = 0;
        gridBagConstraints3.gridheight = 0;
        gridBagConstraints3.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints3.weightx = 1.0;
        gridBagConstraints3.weighty = 1.0;
        m_jpBasics.add (pad4, gridBagConstraints3);
    
      m_jtpMain.addTab ("Basic Operators", m_jpBasics);
  
      m_jpNumbers.setLayout (new java.awt.GridBagLayout ());
      java.awt.GridBagConstraints gridBagConstraints4;
  
        m_jbPlus.setText ("+");
        m_jbPlus.addActionListener (new java.awt.event.ActionListener () {
          public void actionPerformed (java.awt.event.ActionEvent evt) {
            onSimpleNumericOperator (evt);
          }
        }
        );
    
        gridBagConstraints4 = new java.awt.GridBagConstraints ();
        gridBagConstraints4.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints4.insets = new java.awt.Insets (5, 5, 5, 0);
        gridBagConstraints4.anchor = java.awt.GridBagConstraints.NORTHWEST;
        m_jpNumbers.add (m_jbPlus, gridBagConstraints4);
    
        m_jbMinus.setText ("-");
        m_jbMinus.addActionListener (new java.awt.event.ActionListener () {
          public void actionPerformed (java.awt.event.ActionEvent evt) {
            onSimpleNumericOperator (evt);
          }
        }
        );
    
        gridBagConstraints4 = new java.awt.GridBagConstraints ();
        gridBagConstraints4.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints4.insets = new java.awt.Insets (5, 5, 5, 0);
        gridBagConstraints4.anchor = java.awt.GridBagConstraints.NORTHWEST;
        m_jpNumbers.add (m_jbMinus, gridBagConstraints4);
    
        m_jbMultiply.setText ("*");
        m_jbMultiply.addActionListener (new java.awt.event.ActionListener () {
          public void actionPerformed (java.awt.event.ActionEvent evt) {
            onSimpleNumericOperator (evt);
          }
        }
        );
    
        gridBagConstraints4 = new java.awt.GridBagConstraints ();
        gridBagConstraints4.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints4.insets = new java.awt.Insets (5, 5, 5, 0);
        gridBagConstraints4.anchor = java.awt.GridBagConstraints.NORTHWEST;
        m_jpNumbers.add (m_jbMultiply, gridBagConstraints4);
    
        m_jbDivide.setText ("/");
        m_jbDivide.addActionListener (new java.awt.event.ActionListener () {
          public void actionPerformed (java.awt.event.ActionEvent evt) {
            onSimpleNumericOperator (evt);
          }
        }
        );
    
        gridBagConstraints4 = new java.awt.GridBagConstraints ();
        gridBagConstraints4.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints4.insets = new java.awt.Insets (5, 5, 5, 0);
        gridBagConstraints4.anchor = java.awt.GridBagConstraints.NORTHWEST;
        m_jpNumbers.add (m_jbDivide, gridBagConstraints4);
    
    
        gridBagConstraints4 = new java.awt.GridBagConstraints ();
        gridBagConstraints4.gridwidth = 0;
        gridBagConstraints4.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints4.insets = new java.awt.Insets (0, 0, 0, 5);
        gridBagConstraints4.weightx = 1.0;
        m_jpNumbers.add (pad5, gridBagConstraints4);
    
        m_jbModulus.setText ("mod");
        m_jbModulus.addActionListener (new java.awt.event.ActionListener () {
          public void actionPerformed (java.awt.event.ActionEvent evt) {
            onNumberMethod (evt);
          }
        }
        );
    
        gridBagConstraints4 = new java.awt.GridBagConstraints ();
        gridBagConstraints4.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints4.insets = new java.awt.Insets (0, 5, 0, 0);
        gridBagConstraints4.anchor = java.awt.GridBagConstraints.NORTHWEST;
        m_jpNumbers.add (m_jbModulus, gridBagConstraints4);
    
        m_jbIntDiv.setText ("div");
        m_jbIntDiv.addActionListener (new java.awt.event.ActionListener () {
          public void actionPerformed (java.awt.event.ActionEvent evt) {
            onNumberMethod (evt);
          }
        }
        );
    
        gridBagConstraints4 = new java.awt.GridBagConstraints ();
        gridBagConstraints4.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints4.insets = new java.awt.Insets (0, 5, 0, 0);
        gridBagConstraints4.anchor = java.awt.GridBagConstraints.NORTHWEST;
        m_jpNumbers.add (m_jbIntDiv, gridBagConstraints4);
    
        m_jbAbs.setText ("abs");
        m_jbAbs.addActionListener (new java.awt.event.ActionListener () {
          public void actionPerformed (java.awt.event.ActionEvent evt) {
            onNumberMethod (evt);
          }
        }
        );
    
        gridBagConstraints4 = new java.awt.GridBagConstraints ();
        gridBagConstraints4.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints4.insets = new java.awt.Insets (0, 5, 0, 0);
        gridBagConstraints4.anchor = java.awt.GridBagConstraints.NORTHWEST;
        m_jpNumbers.add (m_jbAbs, gridBagConstraints4);
    
        m_jbMax.setText ("max");
        m_jbMax.addActionListener (new java.awt.event.ActionListener () {
          public void actionPerformed (java.awt.event.ActionEvent evt) {
            onNumberMethod (evt);
          }
        }
        );
    
        gridBagConstraints4 = new java.awt.GridBagConstraints ();
        gridBagConstraints4.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints4.insets = new java.awt.Insets (0, 5, 0, 0);
        gridBagConstraints4.anchor = java.awt.GridBagConstraints.NORTHWEST;
        m_jpNumbers.add (m_jbMax, gridBagConstraints4);
    
        m_jbMin.setText ("min");
        m_jbMin.addActionListener (new java.awt.event.ActionListener () {
          public void actionPerformed (java.awt.event.ActionEvent evt) {
            onNumberMethod (evt);
          }
        }
        );
    
        gridBagConstraints4 = new java.awt.GridBagConstraints ();
        gridBagConstraints4.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints4.insets = new java.awt.Insets (0, 5, 0, 0);
        gridBagConstraints4.anchor = java.awt.GridBagConstraints.NORTHWEST;
        m_jpNumbers.add (m_jbMin, gridBagConstraints4);
    
        m_jbRound.setText ("round");
        m_jbRound.addActionListener (new java.awt.event.ActionListener () {
          public void actionPerformed (java.awt.event.ActionEvent evt) {
            onNumberMethod (evt);
          }
        }
        );
    
        gridBagConstraints4 = new java.awt.GridBagConstraints ();
        gridBagConstraints4.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints4.insets = new java.awt.Insets (0, 5, 0, 0);
        gridBagConstraints4.anchor = java.awt.GridBagConstraints.NORTHWEST;
        m_jpNumbers.add (m_jbRound, gridBagConstraints4);
    
        m_jbFloor.setText ("floor");
        m_jbFloor.addActionListener (new java.awt.event.ActionListener () {
          public void actionPerformed (java.awt.event.ActionEvent evt) {
            onNumberMethod (evt);
          }
        }
        );
    
        gridBagConstraints4 = new java.awt.GridBagConstraints ();
        gridBagConstraints4.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints4.insets = new java.awt.Insets (0, 5, 0, 0);
        gridBagConstraints4.anchor = java.awt.GridBagConstraints.NORTHWEST;
        m_jpNumbers.add (m_jbFloor, gridBagConstraints4);
    
    
        gridBagConstraints4 = new java.awt.GridBagConstraints ();
        gridBagConstraints4.gridwidth = 0;
        gridBagConstraints4.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints4.insets = new java.awt.Insets (0, 0, 0, 5);
        gridBagConstraints4.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints4.weightx = 1.0;
        m_jpNumbers.add (pad6, gridBagConstraints4);
    
    
        gridBagConstraints4 = new java.awt.GridBagConstraints ();
        gridBagConstraints4.gridwidth = 0;
        gridBagConstraints4.gridheight = 0;
        gridBagConstraints4.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints4.insets = new java.awt.Insets (0, 0, 0, 5);
        gridBagConstraints4.weightx = 1.0;
        gridBagConstraints4.weighty = 1.0;
        m_jpNumbers.add (pad7, gridBagConstraints4);
    
      m_jtpMain.addTab ("Numbers", m_jpNumbers);
  
      m_jpStrings.setLayout (new java.awt.GridBagLayout ());
      java.awt.GridBagConstraints gridBagConstraints5;
  
        m_jbConcat.setText ("concat");
        m_jbConcat.addActionListener (new java.awt.event.ActionListener () {
          public void actionPerformed (java.awt.event.ActionEvent evt) {
            onStringMethod (evt);
          }
        }
        );
    
        gridBagConstraints5 = new java.awt.GridBagConstraints ();
        gridBagConstraints5.insets = new java.awt.Insets (5, 5, 5, 0);
        m_jpStrings.add (m_jbConcat, gridBagConstraints5);
    
        m_jbStrSize.setText ("size");
        m_jbStrSize.addActionListener (new java.awt.event.ActionListener () {
          public void actionPerformed (java.awt.event.ActionEvent evt) {
            onStringMethod (evt);
          }
        }
        );
    
        gridBagConstraints5 = new java.awt.GridBagConstraints ();
        gridBagConstraints5.insets = new java.awt.Insets (5, 5, 5, 0);
        m_jpStrings.add (m_jbStrSize, gridBagConstraints5);
    
        m_jbToLower.setText ("toLower");
        m_jbToLower.addActionListener (new java.awt.event.ActionListener () {
          public void actionPerformed (java.awt.event.ActionEvent evt) {
            onStringMethod (evt);
          }
        }
        );
    
        gridBagConstraints5 = new java.awt.GridBagConstraints ();
        gridBagConstraints5.insets = new java.awt.Insets (5, 5, 5, 0);
        m_jpStrings.add (m_jbToLower, gridBagConstraints5);
    
        m_jbToUpper.setText ("toUpper");
        m_jbToUpper.addActionListener (new java.awt.event.ActionListener () {
          public void actionPerformed (java.awt.event.ActionEvent evt) {
            onStringMethod (evt);
          }
        }
        );
    
        gridBagConstraints5 = new java.awt.GridBagConstraints ();
        gridBagConstraints5.insets = new java.awt.Insets (5, 5, 5, 0);
        m_jpStrings.add (m_jbToUpper, gridBagConstraints5);
    
        m_jbSubstring.setText ("substring");
        m_jbSubstring.addActionListener (new java.awt.event.ActionListener () {
          public void actionPerformed (java.awt.event.ActionEvent evt) {
            onStringMethod (evt);
          }
        }
        );
    
        gridBagConstraints5 = new java.awt.GridBagConstraints ();
        gridBagConstraints5.insets = new java.awt.Insets (5, 5, 5, 5);
        m_jpStrings.add (m_jbSubstring, gridBagConstraints5);
    
    
        gridBagConstraints5 = new java.awt.GridBagConstraints ();
        gridBagConstraints5.gridwidth = 0;
        gridBagConstraints5.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints5.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints5.weightx = 1.0;
        m_jpStrings.add (pad8, gridBagConstraints5);
    
    
        gridBagConstraints5 = new java.awt.GridBagConstraints ();
        gridBagConstraints5.gridwidth = 0;
        gridBagConstraints5.gridheight = 0;
        gridBagConstraints5.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints5.weightx = 1.0;
        gridBagConstraints5.weighty = 1.0;
        m_jpStrings.add (pad9, gridBagConstraints5);
    
      m_jtpMain.addTab ("Strings", m_jpStrings);
  
      m_jpBooleans.setLayout (new java.awt.GridBagLayout ());
      java.awt.GridBagConstraints gridBagConstraints6;
  
        m_jbOr.setText ("or");
        m_jbOr.addActionListener (new java.awt.event.ActionListener () {
          public void actionPerformed (java.awt.event.ActionEvent evt) {
            onSimpleBooleanOperation (evt);
          }
        }
        );
    
        gridBagConstraints6 = new java.awt.GridBagConstraints ();
        gridBagConstraints6.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints6.insets = new java.awt.Insets (5, 5, 5, 0);
        gridBagConstraints6.anchor = java.awt.GridBagConstraints.NORTHWEST;
        m_jpBooleans.add (m_jbOr, gridBagConstraints6);
    
        m_jbAnd.setText ("and");
        m_jbAnd.addActionListener (new java.awt.event.ActionListener () {
          public void actionPerformed (java.awt.event.ActionEvent evt) {
            onSimpleBooleanOperation (evt);
          }
        }
        );
    
        gridBagConstraints6 = new java.awt.GridBagConstraints ();
        gridBagConstraints6.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints6.insets = new java.awt.Insets (5, 5, 5, 0);
        gridBagConstraints6.anchor = java.awt.GridBagConstraints.NORTHWEST;
        m_jpBooleans.add (m_jbAnd, gridBagConstraints6);
    
        m_jbXor.setText ("xor");
        m_jbXor.addActionListener (new java.awt.event.ActionListener () {
          public void actionPerformed (java.awt.event.ActionEvent evt) {
            onSimpleBooleanOperation (evt);
          }
        }
        );
    
        gridBagConstraints6 = new java.awt.GridBagConstraints ();
        gridBagConstraints6.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints6.insets = new java.awt.Insets (5, 5, 5, 0);
        gridBagConstraints6.anchor = java.awt.GridBagConstraints.NORTHWEST;
        m_jpBooleans.add (m_jbXor, gridBagConstraints6);
    
        m_jbNot.setText ("not");
        m_jbNot.addActionListener (new java.awt.event.ActionListener () {
          public void actionPerformed (java.awt.event.ActionEvent evt) {
            onSimpleBooleanOperation (evt);
          }
        }
        );
    
        gridBagConstraints6 = new java.awt.GridBagConstraints ();
        gridBagConstraints6.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints6.insets = new java.awt.Insets (5, 5, 5, 0);
        gridBagConstraints6.anchor = java.awt.GridBagConstraints.NORTHWEST;
        m_jpBooleans.add (m_jbNot, gridBagConstraints6);
    
        m_jbImplies.setText ("implies");
        m_jbImplies.addActionListener (new java.awt.event.ActionListener () {
          public void actionPerformed (java.awt.event.ActionEvent evt) {
            onSimpleBooleanOperation (evt);
          }
        }
        );
    
        gridBagConstraints6 = new java.awt.GridBagConstraints ();
        gridBagConstraints6.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints6.insets = new java.awt.Insets (5, 5, 5, 0);
        gridBagConstraints6.anchor = java.awt.GridBagConstraints.NORTHWEST;
        m_jpBooleans.add (m_jbImplies, gridBagConstraints6);
    
        m_jbIfThenElse.setText ("if then else");
        m_jbIfThenElse.addActionListener (new java.awt.event.ActionListener () {
          public void actionPerformed (java.awt.event.ActionEvent evt) {
            onIfThenElse (evt);
          }
        }
        );
    
        gridBagConstraints6 = new java.awt.GridBagConstraints ();
        gridBagConstraints6.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints6.insets = new java.awt.Insets (5, 5, 5, 5);
        gridBagConstraints6.anchor = java.awt.GridBagConstraints.NORTHWEST;
        m_jpBooleans.add (m_jbIfThenElse, gridBagConstraints6);
    
    
        gridBagConstraints6 = new java.awt.GridBagConstraints ();
        gridBagConstraints6.gridwidth = 0;
        gridBagConstraints6.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints6.weightx = 1.0;
        m_jpBooleans.add (pad10, gridBagConstraints6);
    
    
        gridBagConstraints6 = new java.awt.GridBagConstraints ();
        gridBagConstraints6.gridwidth = 0;
        gridBagConstraints6.gridheight = 0;
        gridBagConstraints6.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints6.weightx = 1.0;
        gridBagConstraints6.weighty = 1.0;
        m_jpBooleans.add (pad11, gridBagConstraints6);
    
      m_jtpMain.addTab ("Booleans", m_jpBooleans);
  
      m_jpCollections.setLayout (new java.awt.GridBagLayout ());
      java.awt.GridBagConstraints gridBagConstraints7;
  
    
          m_jpCollectionsGeneral.setLayout (new java.awt.GridBagLayout ());
          java.awt.GridBagConstraints gridBagConstraints8;
      
            m_jbConstrColl.setText ("Collection{}");
            m_jbConstrColl.setActionCommand ("Collection");
            m_jbConstrColl.addActionListener (new java.awt.event.ActionListener () {
              public void actionPerformed (java.awt.event.ActionEvent evt) {
                onConstructCollection (evt);
              }
            }
            );
        
            gridBagConstraints8 = new java.awt.GridBagConstraints ();
            gridBagConstraints8.gridwidth = 2;
            gridBagConstraints8.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints8.insets = new java.awt.Insets (5, 5, 5, 0);
            gridBagConstraints8.anchor = java.awt.GridBagConstraints.NORTHWEST;
            m_jpCollectionsGeneral.add (m_jbConstrColl, gridBagConstraints8);
        
            m_jbConstrSet.setText ("Set{}");
            m_jbConstrSet.setActionCommand ("Set");
            m_jbConstrSet.addActionListener (new java.awt.event.ActionListener () {
              public void actionPerformed (java.awt.event.ActionEvent evt) {
                onConstructCollection (evt);
              }
            }
            );
        
            gridBagConstraints8 = new java.awt.GridBagConstraints ();
            gridBagConstraints8.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints8.insets = new java.awt.Insets (5, 5, 5, 0);
            gridBagConstraints8.anchor = java.awt.GridBagConstraints.NORTHWEST;
            m_jpCollectionsGeneral.add (m_jbConstrSet, gridBagConstraints8);
        
            m_jbConstrBag.setText ("Bag{}");
            m_jbConstrBag.setActionCommand ("Bag");
            m_jbConstrBag.addActionListener (new java.awt.event.ActionListener () {
              public void actionPerformed (java.awt.event.ActionEvent evt) {
                onConstructCollection (evt);
              }
            }
            );
        
            gridBagConstraints8 = new java.awt.GridBagConstraints ();
            gridBagConstraints8.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints8.insets = new java.awt.Insets (5, 5, 5, 0);
            gridBagConstraints8.anchor = java.awt.GridBagConstraints.NORTHWEST;
            m_jpCollectionsGeneral.add (m_jbConstrBag, gridBagConstraints8);
        
            m_jbConstrSeq.setText ("Sequence{}");
            m_jbConstrSeq.setActionCommand ("Sequence");
            m_jbConstrSeq.addActionListener (new java.awt.event.ActionListener () {
              public void actionPerformed (java.awt.event.ActionEvent evt) {
                onConstructCollection (evt);
              }
            }
            );
        
            gridBagConstraints8 = new java.awt.GridBagConstraints ();
            gridBagConstraints8.gridwidth = 2;
            gridBagConstraints8.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints8.insets = new java.awt.Insets (5, 5, 5, 0);
            gridBagConstraints8.anchor = java.awt.GridBagConstraints.NORTHWEST;
            m_jpCollectionsGeneral.add (m_jbConstrSeq, gridBagConstraints8);
        
        
            gridBagConstraints8 = new java.awt.GridBagConstraints ();
            gridBagConstraints8.gridwidth = 0;
            gridBagConstraints8.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints8.anchor = java.awt.GridBagConstraints.NORTHWEST;
            gridBagConstraints8.weightx = 1.0;
            m_jpCollectionsGeneral.add (pad12, gridBagConstraints8);
        
            m_jbCollSize.setText ("size");
            m_jbCollSize.addActionListener (new java.awt.event.ActionListener () {
              public void actionPerformed (java.awt.event.ActionEvent evt) {
                onCollectionAttr (evt);
              }
            }
            );
        
            gridBagConstraints8 = new java.awt.GridBagConstraints ();
            gridBagConstraints8.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints8.insets = new java.awt.Insets (0, 5, 5, 0);
            gridBagConstraints8.anchor = java.awt.GridBagConstraints.NORTHWEST;
            m_jpCollectionsGeneral.add (m_jbCollSize, gridBagConstraints8);
        
            m_jbColCount.setText ("count");
            m_jbColCount.addActionListener (new java.awt.event.ActionListener () {
              public void actionPerformed (java.awt.event.ActionEvent evt) {
                onCollectionObjectArgMethod (evt);
              }
            }
            );
        
            gridBagConstraints8 = new java.awt.GridBagConstraints ();
            gridBagConstraints8.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints8.insets = new java.awt.Insets (0, 5, 5, 0);
            gridBagConstraints8.anchor = java.awt.GridBagConstraints.NORTHWEST;
            m_jpCollectionsGeneral.add (m_jbColCount, gridBagConstraints8);
        
            m_jbIsEmpty.setText ("isEmpty");
            m_jbIsEmpty.addActionListener (new java.awt.event.ActionListener () {
              public void actionPerformed (java.awt.event.ActionEvent evt) {
                onCollectionAttr (evt);
              }
            }
            );
        
            gridBagConstraints8 = new java.awt.GridBagConstraints ();
            gridBagConstraints8.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints8.insets = new java.awt.Insets (0, 5, 5, 0);
            gridBagConstraints8.anchor = java.awt.GridBagConstraints.NORTHWEST;
            m_jpCollectionsGeneral.add (m_jbIsEmpty, gridBagConstraints8);
        
            m_jbNotEmpty.setText ("notEmpty");
            m_jbNotEmpty.addActionListener (new java.awt.event.ActionListener () {
              public void actionPerformed (java.awt.event.ActionEvent evt) {
                onCollectionAttr (evt);
              }
            }
            );
        
            gridBagConstraints8 = new java.awt.GridBagConstraints ();
            gridBagConstraints8.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints8.insets = new java.awt.Insets (0, 5, 5, 0);
            gridBagConstraints8.anchor = java.awt.GridBagConstraints.NORTHWEST;
            m_jpCollectionsGeneral.add (m_jbNotEmpty, gridBagConstraints8);
        
            m_jbIncludes.setText ("includes");
            m_jbIncludes.addActionListener (new java.awt.event.ActionListener () {
              public void actionPerformed (java.awt.event.ActionEvent evt) {
                onCollectionObjectArgMethod (evt);
              }
            }
            );
        
            gridBagConstraints8 = new java.awt.GridBagConstraints ();
            gridBagConstraints8.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints8.insets = new java.awt.Insets (0, 5, 5, 0);
            gridBagConstraints8.anchor = java.awt.GridBagConstraints.NORTHWEST;
            m_jpCollectionsGeneral.add (m_jbIncludes, gridBagConstraints8);
        
            m_jbIncludesAll.setText ("includesAll");
            m_jbIncludesAll.addActionListener (new java.awt.event.ActionListener () {
              public void actionPerformed (java.awt.event.ActionEvent evt) {
                onCollectionCollectionArgMethod (evt);
              }
            }
            );
        
            gridBagConstraints8 = new java.awt.GridBagConstraints ();
            gridBagConstraints8.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints8.insets = new java.awt.Insets (0, 5, 5, 0);
            gridBagConstraints8.anchor = java.awt.GridBagConstraints.NORTHWEST;
            m_jpCollectionsGeneral.add (m_jbIncludesAll, gridBagConstraints8);
        
        
            gridBagConstraints8 = new java.awt.GridBagConstraints ();
            gridBagConstraints8.gridwidth = 0;
            gridBagConstraints8.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints8.anchor = java.awt.GridBagConstraints.NORTHWEST;
            m_jpCollectionsGeneral.add (pad13, gridBagConstraints8);
        
            m_jbIterate.setText ("iterate");
            m_jbIterate.addActionListener (new java.awt.event.ActionListener () {
              public void actionPerformed (java.awt.event.ActionEvent evt) {
                onCollectionIterationMethod (evt);
              }
            }
            );
        
            gridBagConstraints8 = new java.awt.GridBagConstraints ();
            gridBagConstraints8.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints8.insets = new java.awt.Insets (0, 5, 5, 0);
            gridBagConstraints8.anchor = java.awt.GridBagConstraints.NORTHWEST;
            m_jpCollectionsGeneral.add (m_jbIterate, gridBagConstraints8);
        
            m_jbExists.setText ("exists");
            m_jbExists.addActionListener (new java.awt.event.ActionListener () {
              public void actionPerformed (java.awt.event.ActionEvent evt) {
                onCollectionIterationMethod (evt);
              }
            }
            );
        
            gridBagConstraints8 = new java.awt.GridBagConstraints ();
            gridBagConstraints8.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints8.insets = new java.awt.Insets (0, 5, 5, 0);
            gridBagConstraints8.anchor = java.awt.GridBagConstraints.NORTHWEST;
            m_jpCollectionsGeneral.add (m_jbExists, gridBagConstraints8);
        
            m_jbForAll.setText ("forAll");
            m_jbForAll.addActionListener (new java.awt.event.ActionListener () {
              public void actionPerformed (java.awt.event.ActionEvent evt) {
                onCollectionIterationMethod (evt);
              }
            }
            );
        
            gridBagConstraints8 = new java.awt.GridBagConstraints ();
            gridBagConstraints8.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints8.insets = new java.awt.Insets (0, 5, 5, 0);
            gridBagConstraints8.anchor = java.awt.GridBagConstraints.NORTHWEST;
            m_jpCollectionsGeneral.add (m_jbForAll, gridBagConstraints8);
        
            m_jbCollect.setText ("collect");
            m_jbCollect.addActionListener (new java.awt.event.ActionListener () {
              public void actionPerformed (java.awt.event.ActionEvent evt) {
                onCollectionIterationMethod (evt);
              }
            }
            );
        
            gridBagConstraints8 = new java.awt.GridBagConstraints ();
            gridBagConstraints8.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints8.insets = new java.awt.Insets (0, 5, 5, 0);
            gridBagConstraints8.anchor = java.awt.GridBagConstraints.NORTHWEST;
            m_jpCollectionsGeneral.add (m_jbCollect, gridBagConstraints8);
        
            m_jbSelect.setText ("select");
            m_jbSelect.addActionListener (new java.awt.event.ActionListener () {
              public void actionPerformed (java.awt.event.ActionEvent evt) {
                onCollectionIterationMethod (evt);
              }
            }
            );
        
            gridBagConstraints8 = new java.awt.GridBagConstraints ();
            gridBagConstraints8.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints8.insets = new java.awt.Insets (0, 5, 5, 0);
            gridBagConstraints8.anchor = java.awt.GridBagConstraints.NORTHWEST;
            m_jpCollectionsGeneral.add (m_jbSelect, gridBagConstraints8);
        
            m_jbReject.setText ("reject");
            m_jbReject.addActionListener (new java.awt.event.ActionListener () {
              public void actionPerformed (java.awt.event.ActionEvent evt) {
                onCollectionIterationMethod (evt);
              }
            }
            );
        
            gridBagConstraints8 = new java.awt.GridBagConstraints ();
            gridBagConstraints8.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints8.insets = new java.awt.Insets (0, 5, 5, 0);
            gridBagConstraints8.anchor = java.awt.GridBagConstraints.NORTHWEST;
            m_jpCollectionsGeneral.add (m_jbReject, gridBagConstraints8);
        
        
            gridBagConstraints8 = new java.awt.GridBagConstraints ();
            gridBagConstraints8.gridwidth = 0;
            gridBagConstraints8.fill = java.awt.GridBagConstraints.BOTH;
            m_jpCollectionsGeneral.add (pad14, gridBagConstraints8);
        
            m_jbUnion.setText ("union");
            m_jbUnion.addActionListener (new java.awt.event.ActionListener () {
              public void actionPerformed (java.awt.event.ActionEvent evt) {
                onCollectionCollectionArgMethod (evt);
              }
            }
            );
        
            gridBagConstraints8 = new java.awt.GridBagConstraints ();
            gridBagConstraints8.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints8.insets = new java.awt.Insets (0, 5, 0, 0);
            gridBagConstraints8.anchor = java.awt.GridBagConstraints.NORTHWEST;
            m_jpCollectionsGeneral.add (m_jbUnion, gridBagConstraints8);
        
            m_jbIntersection.setText ("intersection");
            m_jbIntersection.addActionListener (new java.awt.event.ActionListener () {
              public void actionPerformed (java.awt.event.ActionEvent evt) {
                onCollectionCollectionArgMethod (evt);
              }
            }
            );
        
            gridBagConstraints8 = new java.awt.GridBagConstraints ();
            gridBagConstraints8.gridwidth = 2;
            gridBagConstraints8.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints8.insets = new java.awt.Insets (0, 5, 0, 0);
            gridBagConstraints8.anchor = java.awt.GridBagConstraints.NORTHWEST;
            m_jpCollectionsGeneral.add (m_jbIntersection, gridBagConstraints8);
        
            m_jbIncluding.setText ("including");
            m_jbIncluding.addActionListener (new java.awt.event.ActionListener () {
              public void actionPerformed (java.awt.event.ActionEvent evt) {
                onCollectionObjectArgMethod (evt);
              }
            }
            );
        
            gridBagConstraints8 = new java.awt.GridBagConstraints ();
            gridBagConstraints8.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints8.insets = new java.awt.Insets (0, 5, 0, 0);
            gridBagConstraints8.anchor = java.awt.GridBagConstraints.NORTHWEST;
            m_jpCollectionsGeneral.add (m_jbIncluding, gridBagConstraints8);
        
            m_jbExcluding.setText ("excluding");
            m_jbExcluding.addActionListener (new java.awt.event.ActionListener () {
              public void actionPerformed (java.awt.event.ActionEvent evt) {
                onCollectionObjectArgMethod (evt);
              }
            }
            );
        
            gridBagConstraints8 = new java.awt.GridBagConstraints ();
            gridBagConstraints8.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints8.insets = new java.awt.Insets (0, 5, 0, 0);
            gridBagConstraints8.anchor = java.awt.GridBagConstraints.NORTHWEST;
            m_jpCollectionsGeneral.add (m_jbExcluding, gridBagConstraints8);
        
            m_jbSum.setText ("sum");
            m_jbSum.addActionListener (new java.awt.event.ActionListener () {
              public void actionPerformed (java.awt.event.ActionEvent evt) {
                onCollectionNoArgMethod (evt);
              }
            }
            );
        
            gridBagConstraints8 = new java.awt.GridBagConstraints ();
            gridBagConstraints8.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints8.insets = new java.awt.Insets (0, 5, 0, 0);
            gridBagConstraints8.anchor = java.awt.GridBagConstraints.NORTHWEST;
            m_jpCollectionsGeneral.add (m_jbSum, gridBagConstraints8);
        
        
            gridBagConstraints8 = new java.awt.GridBagConstraints ();
            gridBagConstraints8.gridwidth = 0;
            gridBagConstraints8.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints8.anchor = java.awt.GridBagConstraints.NORTHWEST;
            m_jpCollectionsGeneral.add (pad15, gridBagConstraints8);
        
        
            gridBagConstraints8 = new java.awt.GridBagConstraints ();
            gridBagConstraints8.gridwidth = 0;
            gridBagConstraints8.gridheight = 0;
            gridBagConstraints8.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints8.weightx = 1.0;
            gridBagConstraints8.weighty = 1.0;
            m_jpCollectionsGeneral.add (pad16, gridBagConstraints8);
        
          m_jtbCollections.addTab ("General", m_jpCollectionsGeneral);
      
          m_jpCollectionsSet.setLayout (new java.awt.GridBagLayout ());
          java.awt.GridBagConstraints gridBagConstraints9;
      
            m_jbSetMinus.setText ("-");
            m_jbSetMinus.addActionListener (new java.awt.event.ActionListener () {
              public void actionPerformed (java.awt.event.ActionEvent evt) {
                onSetMinus (evt);
              }
            }
            );
        
            gridBagConstraints9 = new java.awt.GridBagConstraints ();
            gridBagConstraints9.insets = new java.awt.Insets (5, 5, 5, 0);
            gridBagConstraints9.anchor = java.awt.GridBagConstraints.NORTHWEST;
            m_jpCollectionsSet.add (m_jbSetMinus, gridBagConstraints9);
        
            m_jbSymmetricDiff.setText ("symmetricDifference");
            m_jbSymmetricDiff.addActionListener (new java.awt.event.ActionListener () {
              public void actionPerformed (java.awt.event.ActionEvent evt) {
                onSetSymDiff (evt);
              }
            }
            );
        
            gridBagConstraints9 = new java.awt.GridBagConstraints ();
            gridBagConstraints9.insets = new java.awt.Insets (5, 5, 5, 5);
            gridBagConstraints9.anchor = java.awt.GridBagConstraints.NORTHWEST;
            m_jpCollectionsSet.add (m_jbSymmetricDiff, gridBagConstraints9);
        
        
            gridBagConstraints9 = new java.awt.GridBagConstraints ();
            gridBagConstraints9.gridwidth = 0;
            gridBagConstraints9.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints9.weightx = 1.0;
            m_jpCollectionsSet.add (jPanel27, gridBagConstraints9);
        
        
            gridBagConstraints9 = new java.awt.GridBagConstraints ();
            gridBagConstraints9.gridwidth = 0;
            gridBagConstraints9.gridheight = 0;
            gridBagConstraints9.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints9.weightx = 1.0;
            gridBagConstraints9.weighty = 1.0;
            m_jpCollectionsSet.add (jPanel28, gridBagConstraints9);
        
          m_jtbCollections.addTab ("Sets", m_jpCollectionsSet);
      
          m_jpCollectionsSequence.setLayout (new java.awt.GridBagLayout ());
          java.awt.GridBagConstraints gridBagConstraints10;
      
            m_jbSeqFirst.setText ("first");
            m_jbSeqFirst.addActionListener (new java.awt.event.ActionListener () {
              public void actionPerformed (java.awt.event.ActionEvent evt) {
                onSequenceAttr (evt);
              }
            }
            );
        
            gridBagConstraints10 = new java.awt.GridBagConstraints ();
            gridBagConstraints10.insets = new java.awt.Insets (5, 5, 10, 0);
            m_jpCollectionsSequence.add (m_jbSeqFirst, gridBagConstraints10);
        
            m_jbSeqLast.setText ("last");
            m_jbSeqLast.addActionListener (new java.awt.event.ActionListener () {
              public void actionPerformed (java.awt.event.ActionEvent evt) {
                onSequenceAttr (evt);
              }
            }
            );
        
            gridBagConstraints10 = new java.awt.GridBagConstraints ();
            gridBagConstraints10.insets = new java.awt.Insets (5, 5, 10, 5);
            m_jpCollectionsSequence.add (m_jbSeqLast, gridBagConstraints10);
        
            m_jbSeqAt.setText ("at");
            m_jbSeqAt.addActionListener (new java.awt.event.ActionListener () {
              public void actionPerformed (java.awt.event.ActionEvent evt) {
                onSequenceAt (evt);
              }
            }
            );
        
            gridBagConstraints10 = new java.awt.GridBagConstraints ();
            gridBagConstraints10.insets = new java.awt.Insets (5, 5, 10, 5);
            m_jpCollectionsSequence.add (m_jbSeqAt, gridBagConstraints10);
        
            m_jbSeqAppend.setText ("append");
            m_jbSeqAppend.addActionListener (new java.awt.event.ActionListener () {
              public void actionPerformed (java.awt.event.ActionEvent evt) {
                onSequenceObjectArgMethod (evt);
              }
            }
            );
        
            gridBagConstraints10 = new java.awt.GridBagConstraints ();
            gridBagConstraints10.insets = new java.awt.Insets (5, 5, 10, 0);
            m_jpCollectionsSequence.add (m_jbSeqAppend, gridBagConstraints10);
        
            m_jbSeqPrepend.setText ("prepend");
            m_jbSeqPrepend.addActionListener (new java.awt.event.ActionListener () {
              public void actionPerformed (java.awt.event.ActionEvent evt) {
                onSequenceObjectArgMethod (evt);
              }
            }
            );
        
            gridBagConstraints10 = new java.awt.GridBagConstraints ();
            gridBagConstraints10.insets = new java.awt.Insets (5, 5, 10, 5);
            m_jpCollectionsSequence.add (m_jbSeqPrepend, gridBagConstraints10);
        
            m_jbSubSequence.setText ("subSequence");
            m_jbSubSequence.addActionListener (new java.awt.event.ActionListener () {
              public void actionPerformed (java.awt.event.ActionEvent evt) {
                onSequenceSubSequence (evt);
              }
            }
            );
        
            gridBagConstraints10 = new java.awt.GridBagConstraints ();
            gridBagConstraints10.insets = new java.awt.Insets (5, 5, 10, 5);
            m_jpCollectionsSequence.add (m_jbSubSequence, gridBagConstraints10);
        
        
            gridBagConstraints10 = new java.awt.GridBagConstraints ();
            gridBagConstraints10.gridwidth = 0;
            gridBagConstraints10.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints10.weightx = 1.0;
            m_jpCollectionsSequence.add (jPanel29, gridBagConstraints10);
        
        
            gridBagConstraints10 = new java.awt.GridBagConstraints ();
            gridBagConstraints10.gridwidth = 0;
            gridBagConstraints10.gridheight = 0;
            gridBagConstraints10.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints10.weightx = 1.0;
            gridBagConstraints10.weighty = 1.0;
            m_jpCollectionsSequence.add (jPanel30, gridBagConstraints10);
        
          m_jtbCollections.addTab ("Sequences", m_jpCollectionsSequence);
      
        gridBagConstraints7 = new java.awt.GridBagConstraints ();
        gridBagConstraints7.gridwidth = 0;
        gridBagConstraints7.gridheight = 0;
        gridBagConstraints7.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints7.insets = new java.awt.Insets (5, 5, 10, 5);
        gridBagConstraints7.weightx = 1.0;
        gridBagConstraints7.weighty = 1.0;
        m_jpCollections.add (m_jtbCollections, gridBagConstraints7);
    
      m_jtpMain.addTab ("Collections", m_jpCollections);
  

    gridBagConstraints1 = new java.awt.GridBagConstraints ();
    gridBagConstraints1.gridwidth = 0;
    gridBagConstraints1.gridheight = 0;
    gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints1.weightx = 1.0;
    gridBagConstraints1.weighty = 1.0;
    getContentPane ().add (m_jtpMain, gridBagConstraints1);

    pack ();
    java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
    java.awt.Dimension dialogSize = getSize();
    setSize (new java.awt.Dimension (650, 300));
    setLocation((screenSize.width-650)/2, (screenSize.height-300)/2);
  }//GEN-END:initComponents

  private void onParens (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onParens
    addText (new String[] {"tmp"}, ")", null);
    addText (null, "(", new String[] {"expression"});
  }//GEN-LAST:event_onParens

  private void onSequenceSubSequence (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onSequenceSubSequence
    addText (new String[] {"tmp"}, ")", null);
    addText (new String[] {"tmp"}, ", ", new String[] {"integer expression"});
    addText (new String[] {"sequence"}, "->" + evt.getActionCommand() + " (", new String[] {"integer expression"});
  }//GEN-LAST:event_onSequenceSubSequence

  private void onSequenceObjectArgMethod (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onSequenceObjectArgMethod
    addText (new String[] {"tmp"}, ")", null);
    addText (new String[] {"sequence"}, "->" + evt.getActionCommand() + " (", new String[] {"element"});
  }//GEN-LAST:event_onSequenceObjectArgMethod

  private void onSequenceAt (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onSequenceAt
    addText (new String[] {"tmp"}, ")", null);
    addText (new String[] {"sequence"}, "->at (", new String[] {"integer expression"});
  }//GEN-LAST:event_onSequenceAt

  private void onSequenceAttr (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onSequenceAttr
    addText (new String[] {"sequence"}, "->" + evt.getActionCommand(), null);
  }//GEN-LAST:event_onSequenceAttr

  private void onSetSymDiff (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onSetSymDiff
    addText (new String[] {"tmp"}, ")", null);
    addText (new String[] {"set"}, "->symmetricDifference (", new String[] {"set"});
  }//GEN-LAST:event_onSetSymDiff

  private void onSetMinus (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onSetMinus
    addText (new String[] {"set"}, " - ", new String[] {"set"});
  }//GEN-LAST:event_onSetMinus

  private void onCollectionIterationMethod (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onCollectionIterationMethod
    addText (new String[] {"tmp"}, ")", null);
    addText (new String[] {"tmp"}, " | ", new String[] {"expression"});
    addText (new String[] {"tmp"}, " : ", new String[] {"type"});
    addText (new String[] {"collection"}, "->" + evt.getActionCommand() + " (", new String[] {"element"});
  }//GEN-LAST:event_onCollectionIterationMethod

  private void onCollectionCollectionArgMethod (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onCollectionCollectionArgMethod
    addText (new String[] {"tmp"}, ")", null);
    addText (new String[] {"collection"}, "->" + evt.getActionCommand() + " (", new String[] {"collection"});
  }//GEN-LAST:event_onCollectionCollectionArgMethod

  private void onCollectionNoArgMethod (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onCollectionNoArgMethod
    addText (new String[] {"collection"}, "->" + evt.getActionCommand() + "()", null);
  }//GEN-LAST:event_onCollectionNoArgMethod

  private void onCollectionObjectArgMethod (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onCollectionObjectArgMethod
    addText (new String[] {"tmp"}, ")", null);
    addText (new String[] {"collection"}, "->" + evt.getActionCommand() + " (", new String[] {"element"});
  }//GEN-LAST:event_onCollectionObjectArgMethod

  private void onCollectionAttr (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onCollectionAttr
    addText (new String[] {"collection"}, "->" + evt.getActionCommand(), null);
  }//GEN-LAST:event_onCollectionAttr

  private void onConstructCollection (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onConstructCollection
    addText (new String[] {"tmp"}, "}", null);
    addText (null, evt.getActionCommand() + " {", new String[] {"element list"});
  }//GEN-LAST:event_onConstructCollection

  private void onIfThenElse (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onIfThenElse
    addText (new String[] {"tmp"}, " endif", null);
    addText (new String[] {"tmp"}, " else ", new String[] {"expression"});
    addText (new String[] {"tmp"}, " then ", new String[] {"expression"});
    addText (null, "if ", new String[] {"boolean expression"});
  }//GEN-LAST:event_onIfThenElse

  private void onSimpleBooleanOperation (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onSimpleBooleanOperation
    addText (new String[] {"boolean expression"}, " " + evt.getActionCommand() + " ", new String[] {"boolean expression"});
  }//GEN-LAST:event_onSimpleBooleanOperation

  private void onStringMethod (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onStringMethod
    if (evt.getActionCommand().equals ("concat")) {
      addText (new String[] {"tmp"}, ")", null);
      addText (new String[] {"string expression"}, "." + evt.getActionCommand() + " (", new String[] {"string expression"});
    }
    else if (evt.getActionCommand().equals ("substring")) {
      addText (new String[] {"tmp"}, ")", null);
      addText (new String[] {"tmp"}, ", ", new String[] {"integer expression"});
      addText (new String[] {"string expression"}, "." + evt.getActionCommand() + " (", new String[] {"integer expression"});
    }
    else {
      addText (new String[] {"string expression"},
          "." + evt.getActionCommand() + " ", null);
    }
  }//GEN-LAST:event_onStringMethod

  private void onNumberMethod (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onNumberMethod
    if ((evt.getActionCommand().equals ("abs")) ||
         (evt.getActionCommand().equals ("round")) ||
         (evt.getActionCommand().equals ("floor"))) {
      addText (new String[] {"numeric expression"}, "." + evt.getActionCommand() + " ", null);
    }
    else {
      addText (new String[] {"tmp"}, ")", null);
      addText (new String[] {"numeric expression"}, "." + evt.getActionCommand() + " (", new String[] {"numeric expression"});
    }
  }//GEN-LAST:event_onNumberMethod

  private void onSimpleNumericOperator (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onSimpleNumericOperator
    addText (new String[] {"numeric expression"}, " " + evt.getActionCommand() + " ", new String[] {"numeric expression"});
  }//GEN-LAST:event_onSimpleNumericOperator

  private void onSimpleOperator (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onSimpleOperator
    addText (new String[] {"expression"}, " " + evt.getActionCommand() + " ", new String[] {"expression"});
  }//GEN-LAST:event_onSimpleOperator

  private void onResult (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onResult
    addText (null, "result ", null);
  }//GEN-LAST:event_onResult

  private void onAtPre (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onAtPre
    addText (new String[] {"attribute or association"}, "@pre ", null);
  }//GEN-LAST:event_onAtPre

  private void onSelf (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onSelf
    addText (null, "self.", new String[] {"attribute, association or query method"});
  }//GEN-LAST:event_onSelf

  private void onStereotypeButton (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onStereotypeButton
    addText (null, "\n" + evt.getActionCommand() + " ", new String[] {"tmp"});
    addText (new String[] {"constraint name"}, ": ", new String[] {"constraint expression"});
  }//GEN-LAST:event_onStereotypeButton


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JTabbedPane m_jtpMain;
  private javax.swing.JPanel m_jpGeneral;
  private javax.swing.JButton m_jbInv;
  private javax.swing.JButton m_jbPre;
  private javax.swing.JButton m_jbPost;
  private javax.swing.JButton m_jbSelf;
  private javax.swing.JButton m_jbAtPre;
  private javax.swing.JButton m_jbResult;
  private javax.swing.JPanel pad1;
  private javax.swing.JPanel pad2;
  private javax.swing.JPanel m_jpBasics;
  private javax.swing.JButton m_jbEquals;
  private javax.swing.JButton m_jbNEquals;
  private javax.swing.JButton m_jbLess;
  private javax.swing.JButton m_jbGreater;
  private javax.swing.JButton m_jbLessE;
  private javax.swing.JButton m_jbGreaterE;
  private javax.swing.JButton m_jbParens;
  private javax.swing.JPanel pad3;
  private javax.swing.JPanel pad4;
  private javax.swing.JPanel m_jpNumbers;
  private javax.swing.JButton m_jbPlus;
  private javax.swing.JButton m_jbMinus;
  private javax.swing.JButton m_jbMultiply;
  private javax.swing.JButton m_jbDivide;
  private javax.swing.JPanel pad5;
  private javax.swing.JButton m_jbModulus;
  private javax.swing.JButton m_jbIntDiv;
  private javax.swing.JButton m_jbAbs;
  private javax.swing.JButton m_jbMax;
  private javax.swing.JButton m_jbMin;
  private javax.swing.JButton m_jbRound;
  private javax.swing.JButton m_jbFloor;
  private javax.swing.JPanel pad6;
  private javax.swing.JPanel pad7;
  private javax.swing.JPanel m_jpStrings;
  private javax.swing.JButton m_jbConcat;
  private javax.swing.JButton m_jbStrSize;
  private javax.swing.JButton m_jbToLower;
  private javax.swing.JButton m_jbToUpper;
  private javax.swing.JButton m_jbSubstring;
  private javax.swing.JPanel pad8;
  private javax.swing.JPanel pad9;
  private javax.swing.JPanel m_jpBooleans;
  private javax.swing.JButton m_jbOr;
  private javax.swing.JButton m_jbAnd;
  private javax.swing.JButton m_jbXor;
  private javax.swing.JButton m_jbNot;
  private javax.swing.JButton m_jbImplies;
  private javax.swing.JButton m_jbIfThenElse;
  private javax.swing.JPanel pad10;
  private javax.swing.JPanel pad11;
  private javax.swing.JPanel m_jpCollections;
  private javax.swing.JTabbedPane m_jtbCollections;
  private javax.swing.JPanel m_jpCollectionsGeneral;
  private javax.swing.JButton m_jbConstrColl;
  private javax.swing.JButton m_jbConstrSet;
  private javax.swing.JButton m_jbConstrBag;
  private javax.swing.JButton m_jbConstrSeq;
  private javax.swing.JPanel pad12;
  private javax.swing.JButton m_jbCollSize;
  private javax.swing.JButton m_jbColCount;
  private javax.swing.JButton m_jbIsEmpty;
  private javax.swing.JButton m_jbNotEmpty;
  private javax.swing.JButton m_jbIncludes;
  private javax.swing.JButton m_jbIncludesAll;
  private javax.swing.JPanel pad13;
  private javax.swing.JButton m_jbIterate;
  private javax.swing.JButton m_jbExists;
  private javax.swing.JButton m_jbForAll;
  private javax.swing.JButton m_jbCollect;
  private javax.swing.JButton m_jbSelect;
  private javax.swing.JButton m_jbReject;
  private javax.swing.JPanel pad14;
  private javax.swing.JButton m_jbUnion;
  private javax.swing.JButton m_jbIntersection;
  private javax.swing.JButton m_jbIncluding;
  private javax.swing.JButton m_jbExcluding;
  private javax.swing.JButton m_jbSum;
  private javax.swing.JPanel pad15;
  private javax.swing.JPanel pad16;
  private javax.swing.JPanel m_jpCollectionsSet;
  private javax.swing.JButton m_jbSetMinus;
  private javax.swing.JButton m_jbSymmetricDiff;
  private javax.swing.JPanel jPanel27;
  private javax.swing.JPanel jPanel28;
  private javax.swing.JPanel m_jpCollectionsSequence;
  private javax.swing.JButton m_jbSeqFirst;
  private javax.swing.JButton m_jbSeqLast;
  private javax.swing.JButton m_jbSeqAt;
  private javax.swing.JButton m_jbSeqAppend;
  private javax.swing.JButton m_jbSeqPrepend;
  private javax.swing.JButton m_jbSubSequence;
  private javax.swing.JPanel jPanel29;
  private javax.swing.JPanel jPanel30;
  // End of variables declaration//GEN-END:variables

}