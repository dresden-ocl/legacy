/* This file was generated by SableCC (http://www.sablecc.org/). */

package tudresden.ocl.codegen.decl.treegen.node;

import java.util.*;
import tudresden.ocl.codegen.decl.treegen.analysis.*;

public final class AOrBooleanExpression extends PBooleanExpression
{
    private final LinkedList _booleanExpression_ = new TypedLinkedList(new BooleanExpression_Cast());

    public AOrBooleanExpression()
    {
    }

    public AOrBooleanExpression(
        List _booleanExpression_)
    {
        {
            this._booleanExpression_.clear();
            this._booleanExpression_.addAll(_booleanExpression_);
        }

    }

    public AOrBooleanExpression(
        XPBooleanExpression _booleanExpression_)
    {
        if(_booleanExpression_ != null)
        {
            while(_booleanExpression_ instanceof X1PBooleanExpression)
            {
                this._booleanExpression_.addFirst(((X1PBooleanExpression) _booleanExpression_).getPBooleanExpression());
                _booleanExpression_ = ((X1PBooleanExpression) _booleanExpression_).getXPBooleanExpression();
            }
            this._booleanExpression_.addFirst(((X2PBooleanExpression) _booleanExpression_).getPBooleanExpression());
        }

    }
    public Object clone()
    {
        return new AOrBooleanExpression(
            cloneList(_booleanExpression_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOrBooleanExpression(this);
    }

    public LinkedList getBooleanExpression()
    {
        return _booleanExpression_;
    }

    public void setBooleanExpression(List list)
    {
        _booleanExpression_.clear();
        _booleanExpression_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_booleanExpression_);
    }

    void removeChild(Node child)
    {
        if(_booleanExpression_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        for(ListIterator i = _booleanExpression_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class BooleanExpression_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PBooleanExpression node = (PBooleanExpression) o;

            if((node.parent() != null) &&
                (node.parent() != AOrBooleanExpression.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AOrBooleanExpression.this))
            {
                node.parent(AOrBooleanExpression.this);
            }

            return node;
        }
    }
}
