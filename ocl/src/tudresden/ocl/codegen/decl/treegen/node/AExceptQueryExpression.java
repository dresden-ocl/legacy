/* This file was generated by SableCC (http://www.sablecc.org/). */

package tudresden.ocl.codegen.decl.treegen.node;

import java.util.*;
import tudresden.ocl.codegen.decl.treegen.analysis.*;

public final class AExceptQueryExpression extends PQueryExpression
{
    private TAll _all_;
    private PQueryExpression _op1_;
    private PQueryExpression _op2_;

    public AExceptQueryExpression()
    {
    }

    public AExceptQueryExpression(
        TAll _all_,
        PQueryExpression _op1_,
        PQueryExpression _op2_)
    {
        setAll(_all_);

        setOp1(_op1_);

        setOp2(_op2_);

    }
    public Object clone()
    {
        return new AExceptQueryExpression(
            (TAll) cloneNode(_all_),
            (PQueryExpression) cloneNode(_op1_),
            (PQueryExpression) cloneNode(_op2_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExceptQueryExpression(this);
    }

    public TAll getAll()
    {
        return _all_;
    }

    public void setAll(TAll node)
    {
        if(_all_ != null)
        {
            _all_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _all_ = node;
    }

    public PQueryExpression getOp1()
    {
        return _op1_;
    }

    public void setOp1(PQueryExpression node)
    {
        if(_op1_ != null)
        {
            _op1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _op1_ = node;
    }

    public PQueryExpression getOp2()
    {
        return _op2_;
    }

    public void setOp2(PQueryExpression node)
    {
        if(_op2_ != null)
        {
            _op2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _op2_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_all_)
            + toString(_op1_)
            + toString(_op2_);
    }

    void removeChild(Node child)
    {
        if(_all_ == child)
        {
            _all_ = null;
            return;
        }

        if(_op1_ == child)
        {
            _op1_ = null;
            return;
        }

        if(_op2_ == child)
        {
            _op2_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_all_ == oldChild)
        {
            setAll((TAll) newChild);
            return;
        }

        if(_op1_ == oldChild)
        {
            setOp1((PQueryExpression) newChild);
            return;
        }

        if(_op2_ == oldChild)
        {
            setOp2((PQueryExpression) newChild);
            return;
        }

    }
}
