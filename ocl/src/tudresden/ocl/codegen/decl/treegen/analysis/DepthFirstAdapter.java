/* This file was generated by SableCC (http://www.sablecc.org/). */

package tudresden.ocl.codegen.decl.treegen.analysis;

import java.util.*;
import tudresden.ocl.codegen.decl.treegen.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.getPQueryExpression().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAUnionQueryExpression(AUnionQueryExpression node)
    {
        defaultIn(node);
    }

    public void outAUnionQueryExpression(AUnionQueryExpression node)
    {
        defaultOut(node);
    }

    public void caseAUnionQueryExpression(AUnionQueryExpression node)
    {
        inAUnionQueryExpression(node);
        if(node.getAll() != null)
        {
            node.getAll().apply(this);
        }
        {
            Object temp[] = node.getQueryExpression().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PQueryExpression) temp[i]).apply(this);
            }
        }
        outAUnionQueryExpression(node);
    }

    public void inAIntersectQueryExpression(AIntersectQueryExpression node)
    {
        defaultIn(node);
    }

    public void outAIntersectQueryExpression(AIntersectQueryExpression node)
    {
        defaultOut(node);
    }

    public void caseAIntersectQueryExpression(AIntersectQueryExpression node)
    {
        inAIntersectQueryExpression(node);
        if(node.getAll() != null)
        {
            node.getAll().apply(this);
        }
        {
            Object temp[] = node.getQueryExpression().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PQueryExpression) temp[i]).apply(this);
            }
        }
        outAIntersectQueryExpression(node);
    }

    public void inAExceptQueryExpression(AExceptQueryExpression node)
    {
        defaultIn(node);
    }

    public void outAExceptQueryExpression(AExceptQueryExpression node)
    {
        defaultOut(node);
    }

    public void caseAExceptQueryExpression(AExceptQueryExpression node)
    {
        inAExceptQueryExpression(node);
        if(node.getAll() != null)
        {
            node.getAll().apply(this);
        }
        if(node.getOp1() != null)
        {
            node.getOp1().apply(this);
        }
        if(node.getOp2() != null)
        {
            node.getOp2().apply(this);
        }
        outAExceptQueryExpression(node);
    }

    public void inAQuerySpecQueryExpression(AQuerySpecQueryExpression node)
    {
        defaultIn(node);
    }

    public void outAQuerySpecQueryExpression(AQuerySpecQueryExpression node)
    {
        defaultOut(node);
    }

    public void caseAQuerySpecQueryExpression(AQuerySpecQueryExpression node)
    {
        inAQuerySpecQueryExpression(node);
        if(node.getSelectClause() != null)
        {
            node.getSelectClause().apply(this);
        }
        if(node.getFromClause() != null)
        {
            node.getFromClause().apply(this);
        }
        if(node.getWhereClause() != null)
        {
            node.getWhereClause().apply(this);
        }
        outAQuerySpecQueryExpression(node);
    }

    public void inAEmptyQueryExpression(AEmptyQueryExpression node)
    {
        defaultIn(node);
    }

    public void outAEmptyQueryExpression(AEmptyQueryExpression node)
    {
        defaultOut(node);
    }

    public void caseAEmptyQueryExpression(AEmptyQueryExpression node)
    {
        inAEmptyQueryExpression(node);
        outAEmptyQueryExpression(node);
    }

    public void inASelectClause(ASelectClause node)
    {
        defaultIn(node);
    }

    public void outASelectClause(ASelectClause node)
    {
        defaultOut(node);
    }

    public void caseASelectClause(ASelectClause node)
    {
        inASelectClause(node);
        if(node.getSetQuantifier() != null)
        {
            node.getSetQuantifier().apply(this);
        }
        if(node.getSelectList() != null)
        {
            node.getSelectList().apply(this);
        }
        outASelectClause(node);
    }

    public void inADistinctSetQuantifier(ADistinctSetQuantifier node)
    {
        defaultIn(node);
    }

    public void outADistinctSetQuantifier(ADistinctSetQuantifier node)
    {
        defaultOut(node);
    }

    public void caseADistinctSetQuantifier(ADistinctSetQuantifier node)
    {
        inADistinctSetQuantifier(node);
        outADistinctSetQuantifier(node);
    }

    public void inAAllSetQuantifier(AAllSetQuantifier node)
    {
        defaultIn(node);
    }

    public void outAAllSetQuantifier(AAllSetQuantifier node)
    {
        defaultOut(node);
    }

    public void caseAAllSetQuantifier(AAllSetQuantifier node)
    {
        inAAllSetQuantifier(node);
        outAAllSetQuantifier(node);
    }

    public void inAEmptySetQuantifier(AEmptySetQuantifier node)
    {
        defaultIn(node);
    }

    public void outAEmptySetQuantifier(AEmptySetQuantifier node)
    {
        defaultOut(node);
    }

    public void caseAEmptySetQuantifier(AEmptySetQuantifier node)
    {
        inAEmptySetQuantifier(node);
        outAEmptySetQuantifier(node);
    }

    public void inAAsteriskSelectList(AAsteriskSelectList node)
    {
        defaultIn(node);
    }

    public void outAAsteriskSelectList(AAsteriskSelectList node)
    {
        defaultOut(node);
    }

    public void caseAAsteriskSelectList(AAsteriskSelectList node)
    {
        inAAsteriskSelectList(node);
        if(node.getTableQualifier() != null)
        {
            node.getTableQualifier().apply(this);
        }
        outAAsteriskSelectList(node);
    }

    public void inAFunctionSelectList(AFunctionSelectList node)
    {
        defaultIn(node);
    }

    public void outAFunctionSelectList(AFunctionSelectList node)
    {
        defaultOut(node);
    }

    public void caseAFunctionSelectList(AFunctionSelectList node)
    {
        inAFunctionSelectList(node);
        if(node.getFunctionName() != null)
        {
            node.getFunctionName().apply(this);
        }
        if(node.getParameter() != null)
        {
            node.getParameter().apply(this);
        }
        outAFunctionSelectList(node);
    }

    public void inASubListSelectList(ASubListSelectList node)
    {
        defaultIn(node);
    }

    public void outASubListSelectList(ASubListSelectList node)
    {
        defaultOut(node);
    }

    public void caseASubListSelectList(ASubListSelectList node)
    {
        inASubListSelectList(node);
        {
            Object temp[] = node.getSelectSubListItem().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PSelectSubListItem) temp[i]).apply(this);
            }
        }
        outASubListSelectList(node);
    }

    public void inAEmptySelectList(AEmptySelectList node)
    {
        defaultIn(node);
    }

    public void outAEmptySelectList(AEmptySelectList node)
    {
        defaultOut(node);
    }

    public void caseAEmptySelectList(AEmptySelectList node)
    {
        inAEmptySelectList(node);
        outAEmptySelectList(node);
    }

    public void inAStringSelectSubListItem(AStringSelectSubListItem node)
    {
        defaultIn(node);
    }

    public void outAStringSelectSubListItem(AStringSelectSubListItem node)
    {
        defaultOut(node);
    }

    public void caseAStringSelectSubListItem(AStringSelectSubListItem node)
    {
        inAStringSelectSubListItem(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        if(node.getAsClause() != null)
        {
            node.getAsClause().apply(this);
        }
        outAStringSelectSubListItem(node);
    }

    public void inAColumnSelectSubListItem(AColumnSelectSubListItem node)
    {
        defaultIn(node);
    }

    public void outAColumnSelectSubListItem(AColumnSelectSubListItem node)
    {
        defaultOut(node);
    }

    public void caseAColumnSelectSubListItem(AColumnSelectSubListItem node)
    {
        inAColumnSelectSubListItem(node);
        if(node.getColumn() != null)
        {
            node.getColumn().apply(this);
        }
        outAColumnSelectSubListItem(node);
    }

    public void inAEmptySelectSubListItem(AEmptySelectSubListItem node)
    {
        defaultIn(node);
    }

    public void outAEmptySelectSubListItem(AEmptySelectSubListItem node)
    {
        defaultOut(node);
    }

    public void caseAEmptySelectSubListItem(AEmptySelectSubListItem node)
    {
        inAEmptySelectSubListItem(node);
        outAEmptySelectSubListItem(node);
    }

    public void inAColumn(AColumn node)
    {
        defaultIn(node);
    }

    public void outAColumn(AColumn node)
    {
        defaultOut(node);
    }

    public void caseAColumn(AColumn node)
    {
        inAColumn(node);
        if(node.getTableQualifier() != null)
        {
            node.getTableQualifier().apply(this);
        }
        if(node.getColumnName() != null)
        {
            node.getColumnName().apply(this);
        }
        if(node.getAsClause() != null)
        {
            node.getAsClause().apply(this);
        }
        outAColumn(node);
    }

    public void inAFromClause(AFromClause node)
    {
        defaultIn(node);
    }

    public void outAFromClause(AFromClause node)
    {
        defaultOut(node);
    }

    public void caseAFromClause(AFromClause node)
    {
        inAFromClause(node);
        {
            Object temp[] = node.getTableReference().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PTableReference) temp[i]).apply(this);
            }
        }
        outAFromClause(node);
    }

    public void inATableNameTableReference(ATableNameTableReference node)
    {
        defaultIn(node);
    }

    public void outATableNameTableReference(ATableNameTableReference node)
    {
        defaultOut(node);
    }

    public void caseATableNameTableReference(ATableNameTableReference node)
    {
        inATableNameTableReference(node);
        if(node.getTableName() != null)
        {
            node.getTableName().apply(this);
        }
        if(node.getCorrelationName() != null)
        {
            node.getCorrelationName().apply(this);
        }
        outATableNameTableReference(node);
    }

    public void inADerivedTableTableReference(ADerivedTableTableReference node)
    {
        defaultIn(node);
    }

    public void outADerivedTableTableReference(ADerivedTableTableReference node)
    {
        defaultOut(node);
    }

    public void caseADerivedTableTableReference(ADerivedTableTableReference node)
    {
        inADerivedTableTableReference(node);
        if(node.getQueryExpression() != null)
        {
            node.getQueryExpression().apply(this);
        }
        if(node.getCorrelationName() != null)
        {
            node.getCorrelationName().apply(this);
        }
        outADerivedTableTableReference(node);
    }

    public void inAEmptyTableReference(AEmptyTableReference node)
    {
        defaultIn(node);
    }

    public void outAEmptyTableReference(AEmptyTableReference node)
    {
        defaultOut(node);
    }

    public void caseAEmptyTableReference(AEmptyTableReference node)
    {
        inAEmptyTableReference(node);
        outAEmptyTableReference(node);
    }

    public void inAWhereClause(AWhereClause node)
    {
        defaultIn(node);
    }

    public void outAWhereClause(AWhereClause node)
    {
        defaultOut(node);
    }

    public void caseAWhereClause(AWhereClause node)
    {
        inAWhereClause(node);
        if(node.getBooleanExpression() != null)
        {
            node.getBooleanExpression().apply(this);
        }
        outAWhereClause(node);
    }

    public void inAAndBooleanExpression(AAndBooleanExpression node)
    {
        defaultIn(node);
    }

    public void outAAndBooleanExpression(AAndBooleanExpression node)
    {
        defaultOut(node);
    }

    public void caseAAndBooleanExpression(AAndBooleanExpression node)
    {
        inAAndBooleanExpression(node);
        {
            Object temp[] = node.getBooleanExpression().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PBooleanExpression) temp[i]).apply(this);
            }
        }
        outAAndBooleanExpression(node);
    }

    public void inAOrBooleanExpression(AOrBooleanExpression node)
    {
        defaultIn(node);
    }

    public void outAOrBooleanExpression(AOrBooleanExpression node)
    {
        defaultOut(node);
    }

    public void caseAOrBooleanExpression(AOrBooleanExpression node)
    {
        inAOrBooleanExpression(node);
        {
            Object temp[] = node.getBooleanExpression().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PBooleanExpression) temp[i]).apply(this);
            }
        }
        outAOrBooleanExpression(node);
    }

    public void inANotBooleanExpression(ANotBooleanExpression node)
    {
        defaultIn(node);
    }

    public void outANotBooleanExpression(ANotBooleanExpression node)
    {
        defaultOut(node);
    }

    public void caseANotBooleanExpression(ANotBooleanExpression node)
    {
        inANotBooleanExpression(node);
        if(node.getBooleanExpression() != null)
        {
            node.getBooleanExpression().apply(this);
        }
        outANotBooleanExpression(node);
    }

    public void inANullBooleanExpression(ANullBooleanExpression node)
    {
        defaultIn(node);
    }

    public void outANullBooleanExpression(ANullBooleanExpression node)
    {
        defaultOut(node);
    }

    public void caseANullBooleanExpression(ANullBooleanExpression node)
    {
        inANullBooleanExpression(node);
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        outANullBooleanExpression(node);
    }

    public void inAInBooleanExpression(AInBooleanExpression node)
    {
        defaultIn(node);
    }

    public void outAInBooleanExpression(AInBooleanExpression node)
    {
        defaultOut(node);
    }

    public void caseAInBooleanExpression(AInBooleanExpression node)
    {
        inAInBooleanExpression(node);
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        if(node.getQueryExpression() != null)
        {
            node.getQueryExpression().apply(this);
        }
        outAInBooleanExpression(node);
    }

    public void inAExistsBooleanExpression(AExistsBooleanExpression node)
    {
        defaultIn(node);
    }

    public void outAExistsBooleanExpression(AExistsBooleanExpression node)
    {
        defaultOut(node);
    }

    public void caseAExistsBooleanExpression(AExistsBooleanExpression node)
    {
        inAExistsBooleanExpression(node);
        if(node.getQueryExpression() != null)
        {
            node.getQueryExpression().apply(this);
        }
        outAExistsBooleanExpression(node);
    }

    public void inARExpBooleanExpression(ARExpBooleanExpression node)
    {
        defaultIn(node);
    }

    public void outARExpBooleanExpression(ARExpBooleanExpression node)
    {
        defaultOut(node);
    }

    public void caseARExpBooleanExpression(ARExpBooleanExpression node)
    {
        inARExpBooleanExpression(node);
        if(node.getRelationalExpression() != null)
        {
            node.getRelationalExpression().apply(this);
        }
        outARExpBooleanExpression(node);
    }

    public void inATrueBooleanExpression(ATrueBooleanExpression node)
    {
        defaultIn(node);
    }

    public void outATrueBooleanExpression(ATrueBooleanExpression node)
    {
        defaultOut(node);
    }

    public void caseATrueBooleanExpression(ATrueBooleanExpression node)
    {
        inATrueBooleanExpression(node);
        outATrueBooleanExpression(node);
    }

    public void inAFalseBooleanExpression(AFalseBooleanExpression node)
    {
        defaultIn(node);
    }

    public void outAFalseBooleanExpression(AFalseBooleanExpression node)
    {
        defaultOut(node);
    }

    public void caseAFalseBooleanExpression(AFalseBooleanExpression node)
    {
        inAFalseBooleanExpression(node);
        outAFalseBooleanExpression(node);
    }

    public void inAEmptyBooleanExpression(AEmptyBooleanExpression node)
    {
        defaultIn(node);
    }

    public void outAEmptyBooleanExpression(AEmptyBooleanExpression node)
    {
        defaultOut(node);
    }

    public void caseAEmptyBooleanExpression(AEmptyBooleanExpression node)
    {
        inAEmptyBooleanExpression(node);
        outAEmptyBooleanExpression(node);
    }

    public void inAEqRelationalExpression(AEqRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outAEqRelationalExpression(AEqRelationalExpression node)
    {
        defaultOut(node);
    }

    public void caseAEqRelationalExpression(AEqRelationalExpression node)
    {
        inAEqRelationalExpression(node);
        if(node.getOp1() != null)
        {
            node.getOp1().apply(this);
        }
        if(node.getOp2() != null)
        {
            node.getOp2().apply(this);
        }
        outAEqRelationalExpression(node);
    }

    public void inANeqRelationalExpression(ANeqRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outANeqRelationalExpression(ANeqRelationalExpression node)
    {
        defaultOut(node);
    }

    public void caseANeqRelationalExpression(ANeqRelationalExpression node)
    {
        inANeqRelationalExpression(node);
        if(node.getOp1() != null)
        {
            node.getOp1().apply(this);
        }
        if(node.getOp2() != null)
        {
            node.getOp2().apply(this);
        }
        outANeqRelationalExpression(node);
    }

    public void inAGtRelationalExpression(AGtRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outAGtRelationalExpression(AGtRelationalExpression node)
    {
        defaultOut(node);
    }

    public void caseAGtRelationalExpression(AGtRelationalExpression node)
    {
        inAGtRelationalExpression(node);
        if(node.getOp1() != null)
        {
            node.getOp1().apply(this);
        }
        if(node.getOp2() != null)
        {
            node.getOp2().apply(this);
        }
        outAGtRelationalExpression(node);
    }

    public void inALtRelationalExpression(ALtRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outALtRelationalExpression(ALtRelationalExpression node)
    {
        defaultOut(node);
    }

    public void caseALtRelationalExpression(ALtRelationalExpression node)
    {
        inALtRelationalExpression(node);
        if(node.getOp1() != null)
        {
            node.getOp1().apply(this);
        }
        if(node.getOp2() != null)
        {
            node.getOp2().apply(this);
        }
        outALtRelationalExpression(node);
    }

    public void inAGteqRelationalExpression(AGteqRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outAGteqRelationalExpression(AGteqRelationalExpression node)
    {
        defaultOut(node);
    }

    public void caseAGteqRelationalExpression(AGteqRelationalExpression node)
    {
        inAGteqRelationalExpression(node);
        if(node.getOp1() != null)
        {
            node.getOp1().apply(this);
        }
        if(node.getOp2() != null)
        {
            node.getOp2().apply(this);
        }
        outAGteqRelationalExpression(node);
    }

    public void inALteqRelationalExpression(ALteqRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outALteqRelationalExpression(ALteqRelationalExpression node)
    {
        defaultOut(node);
    }

    public void caseALteqRelationalExpression(ALteqRelationalExpression node)
    {
        inALteqRelationalExpression(node);
        if(node.getOp1() != null)
        {
            node.getOp1().apply(this);
        }
        if(node.getOp2() != null)
        {
            node.getOp2().apply(this);
        }
        outALteqRelationalExpression(node);
    }

    public void inANumExpRelationalExpression(ANumExpRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outANumExpRelationalExpression(ANumExpRelationalExpression node)
    {
        defaultOut(node);
    }

    public void caseANumExpRelationalExpression(ANumExpRelationalExpression node)
    {
        inANumExpRelationalExpression(node);
        if(node.getNumericExpression() != null)
        {
            node.getNumericExpression().apply(this);
        }
        outANumExpRelationalExpression(node);
    }

    public void inAEmptyRelationalExpression(AEmptyRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outAEmptyRelationalExpression(AEmptyRelationalExpression node)
    {
        defaultOut(node);
    }

    public void caseAEmptyRelationalExpression(AEmptyRelationalExpression node)
    {
        inAEmptyRelationalExpression(node);
        outAEmptyRelationalExpression(node);
    }

    public void inAMultNumericExpression(AMultNumericExpression node)
    {
        defaultIn(node);
    }

    public void outAMultNumericExpression(AMultNumericExpression node)
    {
        defaultOut(node);
    }

    public void caseAMultNumericExpression(AMultNumericExpression node)
    {
        inAMultNumericExpression(node);
        if(node.getOp1() != null)
        {
            node.getOp1().apply(this);
        }
        if(node.getOp2() != null)
        {
            node.getOp2().apply(this);
        }
        outAMultNumericExpression(node);
    }

    public void inADivNumericExpression(ADivNumericExpression node)
    {
        defaultIn(node);
    }

    public void outADivNumericExpression(ADivNumericExpression node)
    {
        defaultOut(node);
    }

    public void caseADivNumericExpression(ADivNumericExpression node)
    {
        inADivNumericExpression(node);
        if(node.getOp1() != null)
        {
            node.getOp1().apply(this);
        }
        if(node.getOp2() != null)
        {
            node.getOp2().apply(this);
        }
        outADivNumericExpression(node);
    }

    public void inAPlusNumericExpression(APlusNumericExpression node)
    {
        defaultIn(node);
    }

    public void outAPlusNumericExpression(APlusNumericExpression node)
    {
        defaultOut(node);
    }

    public void caseAPlusNumericExpression(APlusNumericExpression node)
    {
        inAPlusNumericExpression(node);
        if(node.getOp1() != null)
        {
            node.getOp1().apply(this);
        }
        if(node.getOp2() != null)
        {
            node.getOp2().apply(this);
        }
        outAPlusNumericExpression(node);
    }

    public void inAMinusNumericExpression(AMinusNumericExpression node)
    {
        defaultIn(node);
    }

    public void outAMinusNumericExpression(AMinusNumericExpression node)
    {
        defaultOut(node);
    }

    public void caseAMinusNumericExpression(AMinusNumericExpression node)
    {
        inAMinusNumericExpression(node);
        if(node.getOp1() != null)
        {
            node.getOp1().apply(this);
        }
        if(node.getOp2() != null)
        {
            node.getOp2().apply(this);
        }
        outAMinusNumericExpression(node);
    }

    public void inAValueNumericExpression(AValueNumericExpression node)
    {
        defaultIn(node);
    }

    public void outAValueNumericExpression(AValueNumericExpression node)
    {
        defaultOut(node);
    }

    public void caseAValueNumericExpression(AValueNumericExpression node)
    {
        inAValueNumericExpression(node);
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        outAValueNumericExpression(node);
    }

    public void inAEmptyNumericExpression(AEmptyNumericExpression node)
    {
        defaultIn(node);
    }

    public void outAEmptyNumericExpression(AEmptyNumericExpression node)
    {
        defaultOut(node);
    }

    public void caseAEmptyNumericExpression(AEmptyNumericExpression node)
    {
        inAEmptyNumericExpression(node);
        outAEmptyNumericExpression(node);
    }

    public void inANumericUnaryExpression(ANumericUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outANumericUnaryExpression(ANumericUnaryExpression node)
    {
        defaultOut(node);
    }

    public void caseANumericUnaryExpression(ANumericUnaryExpression node)
    {
        inANumericUnaryExpression(node);
        if(node.getNumericValue() != null)
        {
            node.getNumericValue().apply(this);
        }
        outANumericUnaryExpression(node);
    }

    public void inAStringUnaryExpression(AStringUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outAStringUnaryExpression(AStringUnaryExpression node)
    {
        defaultOut(node);
    }

    public void caseAStringUnaryExpression(AStringUnaryExpression node)
    {
        inAStringUnaryExpression(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAStringUnaryExpression(node);
    }

    public void inAColumnUnaryExpression(AColumnUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outAColumnUnaryExpression(AColumnUnaryExpression node)
    {
        defaultOut(node);
    }

    public void caseAColumnUnaryExpression(AColumnUnaryExpression node)
    {
        inAColumnUnaryExpression(node);
        if(node.getColumn() != null)
        {
            node.getColumn().apply(this);
        }
        outAColumnUnaryExpression(node);
    }

    public void inAFunctionUnaryExpression(AFunctionUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outAFunctionUnaryExpression(AFunctionUnaryExpression node)
    {
        defaultOut(node);
    }

    public void caseAFunctionUnaryExpression(AFunctionUnaryExpression node)
    {
        inAFunctionUnaryExpression(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            Object temp[] = node.getUnaryExpression().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PUnaryExpression) temp[i]).apply(this);
            }
        }
        outAFunctionUnaryExpression(node);
    }

    public void inABooleanUnaryExpression(ABooleanUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outABooleanUnaryExpression(ABooleanUnaryExpression node)
    {
        defaultOut(node);
    }

    public void caseABooleanUnaryExpression(ABooleanUnaryExpression node)
    {
        inABooleanUnaryExpression(node);
        if(node.getBooleanExpression() != null)
        {
            node.getBooleanExpression().apply(this);
        }
        outABooleanUnaryExpression(node);
    }

    public void inAParUnaryExpression(AParUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outAParUnaryExpression(AParUnaryExpression node)
    {
        defaultOut(node);
    }

    public void caseAParUnaryExpression(AParUnaryExpression node)
    {
        inAParUnaryExpression(node);
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        outAParUnaryExpression(node);
    }

    public void inAQueryUnaryExpression(AQueryUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outAQueryUnaryExpression(AQueryUnaryExpression node)
    {
        defaultOut(node);
    }

    public void caseAQueryUnaryExpression(AQueryUnaryExpression node)
    {
        inAQueryUnaryExpression(node);
        if(node.getQueryExpression() != null)
        {
            node.getQueryExpression().apply(this);
        }
        outAQueryUnaryExpression(node);
    }

    public void inAMinusUnaryExpression(AMinusUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outAMinusUnaryExpression(AMinusUnaryExpression node)
    {
        defaultOut(node);
    }

    public void caseAMinusUnaryExpression(AMinusUnaryExpression node)
    {
        inAMinusUnaryExpression(node);
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        outAMinusUnaryExpression(node);
    }

    public void inAEmptyUnaryExpression(AEmptyUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outAEmptyUnaryExpression(AEmptyUnaryExpression node)
    {
        defaultOut(node);
    }

    public void caseAEmptyUnaryExpression(AEmptyUnaryExpression node)
    {
        inAEmptyUnaryExpression(node);
        outAEmptyUnaryExpression(node);
    }
}
