/* This file was generated by SableCC (http://www.sable.mcgill.ca/sablecc/). */

package tudresden.ocl.parser.node;

import java.util.*;
import tudresden.ocl.parser.analysis.*;

public final class AColonFcpHelper extends PFcpHelper
{
    private TColon _colon_;
    private PSimpleTypeSpecifier _simpleTypeSpecifier_;

    public AColonFcpHelper()
    {
    }

    public AColonFcpHelper(
        TColon _colon_,
        PSimpleTypeSpecifier _simpleTypeSpecifier_)
    {
        setColon(_colon_);

        setSimpleTypeSpecifier(_simpleTypeSpecifier_);

    }
    public Object clone()
    {
        return new AColonFcpHelper(
            (TColon) cloneNode(_colon_),
            (PSimpleTypeSpecifier) cloneNode(_simpleTypeSpecifier_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAColonFcpHelper(this);
    }

    public TColon getColon()
    {
        return _colon_;
    }

    public void setColon(TColon node)
    {
        if(_colon_ != null)
        {
            _colon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _colon_ = node;
    }

    public PSimpleTypeSpecifier getSimpleTypeSpecifier()
    {
        return _simpleTypeSpecifier_;
    }

    public void setSimpleTypeSpecifier(PSimpleTypeSpecifier node)
    {
        if(_simpleTypeSpecifier_ != null)
        {
            _simpleTypeSpecifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _simpleTypeSpecifier_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_colon_)
            + toString(_simpleTypeSpecifier_);
    }

    void removeChild(Node child)
    {
        if(_colon_ == child)
        {
            _colon_ = null;
            return;
        }

        if(_simpleTypeSpecifier_ == child)
        {
            _simpleTypeSpecifier_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_colon_ == oldChild)
        {
            setColon((TColon) newChild);
            return;
        }

        if(_simpleTypeSpecifier_ == oldChild)
        {
            setSimpleTypeSpecifier((PSimpleTypeSpecifier) newChild);
            return;
        }

    }
}
