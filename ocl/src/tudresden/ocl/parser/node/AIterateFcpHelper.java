/* This file was generated by SableCC (http://www.sable.mcgill.ca/sablecc/). */

package tudresden.ocl.parser.node;

import java.util.*;
import tudresden.ocl.parser.analysis.*;

public final class AIterateFcpHelper extends PFcpHelper
{
    private TSemicolon _semicolon_;
    private TName _name_;
    private TColon _colon_;
    private PSimpleTypeSpecifier _simpleTypeSpecifier_;
    private TEqual _equal_;
    private PExpression _expression_;

    public AIterateFcpHelper()
    {
    }

    public AIterateFcpHelper(
        TSemicolon _semicolon_,
        TName _name_,
        TColon _colon_,
        PSimpleTypeSpecifier _simpleTypeSpecifier_,
        TEqual _equal_,
        PExpression _expression_)
    {
        setSemicolon(_semicolon_);

        setName(_name_);

        setColon(_colon_);

        setSimpleTypeSpecifier(_simpleTypeSpecifier_);

        setEqual(_equal_);

        setExpression(_expression_);

    }
    public Object clone()
    {
        return new AIterateFcpHelper(
            (TSemicolon) cloneNode(_semicolon_),
            (TName) cloneNode(_name_),
            (TColon) cloneNode(_colon_),
            (PSimpleTypeSpecifier) cloneNode(_simpleTypeSpecifier_),
            (TEqual) cloneNode(_equal_),
            (PExpression) cloneNode(_expression_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIterateFcpHelper(this);
    }

    public TSemicolon getSemicolon()
    {
        return _semicolon_;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _semicolon_ = node;
    }

    public TName getName()
    {
        return _name_;
    }

    public void setName(TName node)
    {
        if(_name_ != null)
        {
            _name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _name_ = node;
    }

    public TColon getColon()
    {
        return _colon_;
    }

    public void setColon(TColon node)
    {
        if(_colon_ != null)
        {
            _colon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _colon_ = node;
    }

    public PSimpleTypeSpecifier getSimpleTypeSpecifier()
    {
        return _simpleTypeSpecifier_;
    }

    public void setSimpleTypeSpecifier(PSimpleTypeSpecifier node)
    {
        if(_simpleTypeSpecifier_ != null)
        {
            _simpleTypeSpecifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _simpleTypeSpecifier_ = node;
    }

    public TEqual getEqual()
    {
        return _equal_;
    }

    public void setEqual(TEqual node)
    {
        if(_equal_ != null)
        {
            _equal_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _equal_ = node;
    }

    public PExpression getExpression()
    {
        return _expression_;
    }

    public void setExpression(PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expression_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_semicolon_)
            + toString(_name_)
            + toString(_colon_)
            + toString(_simpleTypeSpecifier_)
            + toString(_equal_)
            + toString(_expression_);
    }

    void removeChild(Node child)
    {
        if(_semicolon_ == child)
        {
            _semicolon_ = null;
            return;
        }

        if(_name_ == child)
        {
            _name_ = null;
            return;
        }

        if(_colon_ == child)
        {
            _colon_ = null;
            return;
        }

        if(_simpleTypeSpecifier_ == child)
        {
            _simpleTypeSpecifier_ = null;
            return;
        }

        if(_equal_ == child)
        {
            _equal_ = null;
            return;
        }

        if(_expression_ == child)
        {
            _expression_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_semicolon_ == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

        if(_name_ == oldChild)
        {
            setName((TName) newChild);
            return;
        }

        if(_colon_ == oldChild)
        {
            setColon((TColon) newChild);
            return;
        }

        if(_simpleTypeSpecifier_ == oldChild)
        {
            setSimpleTypeSpecifier((PSimpleTypeSpecifier) newChild);
            return;
        }

        if(_equal_ == oldChild)
        {
            setEqual((TEqual) newChild);
            return;
        }

        if(_expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

    }
}

