/* This file was generated by SableCC (http://www.sable.mcgill.ca/sablecc/). */

package tudresden.ocl.parser.node;

import java.util.*;
import tudresden.ocl.parser.analysis.*;

public final class AIfExpression extends PIfExpression
{
    private TTIf _tIf_;
    private PExpression _ifBranch_;
    private TTThen _tThen_;
    private PExpression _thenBranch_;
    private TTElse _tElse_;
    private PExpression _elseBranch_;
    private TEndif _endif_;

    public AIfExpression()
    {
    }

    public AIfExpression(
        TTIf _tIf_,
        PExpression _ifBranch_,
        TTThen _tThen_,
        PExpression _thenBranch_,
        TTElse _tElse_,
        PExpression _elseBranch_,
        TEndif _endif_)
    {
        setTIf(_tIf_);

        setIfBranch(_ifBranch_);

        setTThen(_tThen_);

        setThenBranch(_thenBranch_);

        setTElse(_tElse_);

        setElseBranch(_elseBranch_);

        setEndif(_endif_);

    }
    public Object clone()
    {
        return new AIfExpression(
            (TTIf) cloneNode(_tIf_),
            (PExpression) cloneNode(_ifBranch_),
            (TTThen) cloneNode(_tThen_),
            (PExpression) cloneNode(_thenBranch_),
            (TTElse) cloneNode(_tElse_),
            (PExpression) cloneNode(_elseBranch_),
            (TEndif) cloneNode(_endif_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfExpression(this);
    }

    public TTIf getTIf()
    {
        return _tIf_;
    }

    public void setTIf(TTIf node)
    {
        if(_tIf_ != null)
        {
            _tIf_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _tIf_ = node;
    }

    public PExpression getIfBranch()
    {
        return _ifBranch_;
    }

    public void setIfBranch(PExpression node)
    {
        if(_ifBranch_ != null)
        {
            _ifBranch_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _ifBranch_ = node;
    }

    public TTThen getTThen()
    {
        return _tThen_;
    }

    public void setTThen(TTThen node)
    {
        if(_tThen_ != null)
        {
            _tThen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _tThen_ = node;
    }

    public PExpression getThenBranch()
    {
        return _thenBranch_;
    }

    public void setThenBranch(PExpression node)
    {
        if(_thenBranch_ != null)
        {
            _thenBranch_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _thenBranch_ = node;
    }

    public TTElse getTElse()
    {
        return _tElse_;
    }

    public void setTElse(TTElse node)
    {
        if(_tElse_ != null)
        {
            _tElse_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _tElse_ = node;
    }

    public PExpression getElseBranch()
    {
        return _elseBranch_;
    }

    public void setElseBranch(PExpression node)
    {
        if(_elseBranch_ != null)
        {
            _elseBranch_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _elseBranch_ = node;
    }

    public TEndif getEndif()
    {
        return _endif_;
    }

    public void setEndif(TEndif node)
    {
        if(_endif_ != null)
        {
            _endif_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _endif_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_tIf_)
            + toString(_ifBranch_)
            + toString(_tThen_)
            + toString(_thenBranch_)
            + toString(_tElse_)
            + toString(_elseBranch_)
            + toString(_endif_);
    }

    void removeChild(Node child)
    {
        if(_tIf_ == child)
        {
            _tIf_ = null;
            return;
        }

        if(_ifBranch_ == child)
        {
            _ifBranch_ = null;
            return;
        }

        if(_tThen_ == child)
        {
            _tThen_ = null;
            return;
        }

        if(_thenBranch_ == child)
        {
            _thenBranch_ = null;
            return;
        }

        if(_tElse_ == child)
        {
            _tElse_ = null;
            return;
        }

        if(_elseBranch_ == child)
        {
            _elseBranch_ = null;
            return;
        }

        if(_endif_ == child)
        {
            _endif_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_tIf_ == oldChild)
        {
            setTIf((TTIf) newChild);
            return;
        }

        if(_ifBranch_ == oldChild)
        {
            setIfBranch((PExpression) newChild);
            return;
        }

        if(_tThen_ == oldChild)
        {
            setTThen((TTThen) newChild);
            return;
        }

        if(_thenBranch_ == oldChild)
        {
            setThenBranch((PExpression) newChild);
            return;
        }

        if(_tElse_ == oldChild)
        {
            setTElse((TTElse) newChild);
            return;
        }

        if(_elseBranch_ == oldChild)
        {
            setElseBranch((PExpression) newChild);
            return;
        }

        if(_endif_ == oldChild)
        {
            setEndif((TEndif) newChild);
            return;
        }

    }
}

