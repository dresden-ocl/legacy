/* This file was generated by SableCC (http://www.sable.mcgill.ca/sablecc/). */

package tudresden.ocl.parser.node;

import java.util.*;
import tudresden.ocl.parser.analysis.*;

public final class APostfixExpression extends PPostfixExpression
{
    private PPrimaryExpression _primaryExpression_;
    private final LinkedList _postfixExpressionTail_ = new TypedLinkedList(new PostfixExpressionTail_Cast());

    public APostfixExpression()
    {
    }

    public APostfixExpression(
        PPrimaryExpression _primaryExpression_,
        List _postfixExpressionTail_)
    {
        setPrimaryExpression(_primaryExpression_);

        {
            Object temp[] = _postfixExpressionTail_.toArray();
            for(int i = 0; i < temp.length; i++)
            {
                this._postfixExpressionTail_.add(temp[i]);
            }
        }

    }

    public APostfixExpression(
        PPrimaryExpression _primaryExpression_,
        XPPostfixExpressionTail _postfixExpressionTail_)
    {
        setPrimaryExpression(_primaryExpression_);

        if(_postfixExpressionTail_ != null)
        {
            while(_postfixExpressionTail_ instanceof X1PPostfixExpressionTail)
            {
                this._postfixExpressionTail_.addFirst(((X1PPostfixExpressionTail) _postfixExpressionTail_).getPPostfixExpressionTail());
                _postfixExpressionTail_ = ((X1PPostfixExpressionTail) _postfixExpressionTail_).getXPPostfixExpressionTail();
            }
            this._postfixExpressionTail_.addFirst(((X2PPostfixExpressionTail) _postfixExpressionTail_).getPPostfixExpressionTail());
        }

    }
    public Object clone()
    {
        return new APostfixExpression(
            (PPrimaryExpression) cloneNode(_primaryExpression_),
            cloneList(_postfixExpressionTail_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPostfixExpression(this);
    }

    public PPrimaryExpression getPrimaryExpression()
    {
        return _primaryExpression_;
    }

    public void setPrimaryExpression(PPrimaryExpression node)
    {
        if(_primaryExpression_ != null)
        {
            _primaryExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _primaryExpression_ = node;
    }

    public LinkedList getPostfixExpressionTail()
    {
        return _postfixExpressionTail_;
    }

    public void setPostfixExpressionTail(List list)
    {
        Object temp[] = list.toArray();
        for(int i = 0; i < temp.length; i++)
        {
            _postfixExpressionTail_.add(temp[i]);
        }
    }

    public String toString()
    {
        return ""
            + toString(_primaryExpression_)
            + toString(_postfixExpressionTail_);
    }

    void removeChild(Node child)
    {
        if(_primaryExpression_ == child)
        {
            _primaryExpression_ = null;
            return;
        }

        if(_postfixExpressionTail_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_primaryExpression_ == oldChild)
        {
            setPrimaryExpression((PPrimaryExpression) newChild);
            return;
        }

        for(ListIterator i = _postfixExpressionTail_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class PostfixExpressionTail_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PPostfixExpressionTail node = (PPostfixExpressionTail) o;

            if((node.parent() != null) &&
                (node.parent() != APostfixExpression.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != APostfixExpression.this))
            {
                node.parent(APostfixExpression.this);
            }

            return node;
        }
    }
}
