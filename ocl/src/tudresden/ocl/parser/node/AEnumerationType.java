/* This file was generated by SableCC (http://www.sable.mcgill.ca/sablecc/). */

package tudresden.ocl.parser.node;

import java.util.*;
import tudresden.ocl.parser.analysis.*;

public final class AEnumerationType extends PEnumerationType
{
    private TEnum _enum_;
    private TLBrace _lBrace_;
    private TChannel _channel_;
    private TName _name_;
    private final LinkedList _enumerationTypeTail_ = new TypedLinkedList(new EnumerationTypeTail_Cast());
    private TRBrace _rBrace_;

    public AEnumerationType()
    {
    }

    public AEnumerationType(
        TEnum _enum_,
        TLBrace _lBrace_,
        TChannel _channel_,
        TName _name_,
        List _enumerationTypeTail_,
        TRBrace _rBrace_)
    {
        setEnum(_enum_);

        setLBrace(_lBrace_);

        setChannel(_channel_);

        setName(_name_);

        {
            Object temp[] = _enumerationTypeTail_.toArray();
            for(int i = 0; i < temp.length; i++)
            {
                this._enumerationTypeTail_.add(temp[i]);
            }
        }

        setRBrace(_rBrace_);

    }

    public AEnumerationType(
        TEnum _enum_,
        TLBrace _lBrace_,
        TChannel _channel_,
        TName _name_,
        XPEnumerationTypeTail _enumerationTypeTail_,
        TRBrace _rBrace_)
    {
        setEnum(_enum_);

        setLBrace(_lBrace_);

        setChannel(_channel_);

        setName(_name_);

        if(_enumerationTypeTail_ != null)
        {
            while(_enumerationTypeTail_ instanceof X1PEnumerationTypeTail)
            {
                this._enumerationTypeTail_.addFirst(((X1PEnumerationTypeTail) _enumerationTypeTail_).getPEnumerationTypeTail());
                _enumerationTypeTail_ = ((X1PEnumerationTypeTail) _enumerationTypeTail_).getXPEnumerationTypeTail();
            }
            this._enumerationTypeTail_.addFirst(((X2PEnumerationTypeTail) _enumerationTypeTail_).getPEnumerationTypeTail());
        }

        setRBrace(_rBrace_);

    }
    public Object clone()
    {
        return new AEnumerationType(
            (TEnum) cloneNode(_enum_),
            (TLBrace) cloneNode(_lBrace_),
            (TChannel) cloneNode(_channel_),
            (TName) cloneNode(_name_),
            cloneList(_enumerationTypeTail_),
            (TRBrace) cloneNode(_rBrace_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAEnumerationType(this);
    }

    public TEnum getEnum()
    {
        return _enum_;
    }

    public void setEnum(TEnum node)
    {
        if(_enum_ != null)
        {
            _enum_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _enum_ = node;
    }

    public TLBrace getLBrace()
    {
        return _lBrace_;
    }

    public void setLBrace(TLBrace node)
    {
        if(_lBrace_ != null)
        {
            _lBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lBrace_ = node;
    }

    public TChannel getChannel()
    {
        return _channel_;
    }

    public void setChannel(TChannel node)
    {
        if(_channel_ != null)
        {
            _channel_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _channel_ = node;
    }

    public TName getName()
    {
        return _name_;
    }

    public void setName(TName node)
    {
        if(_name_ != null)
        {
            _name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _name_ = node;
    }

    public LinkedList getEnumerationTypeTail()
    {
        return _enumerationTypeTail_;
    }

    public void setEnumerationTypeTail(List list)
    {
        Object temp[] = list.toArray();
        for(int i = 0; i < temp.length; i++)
        {
            _enumerationTypeTail_.add(temp[i]);
        }
    }

    public TRBrace getRBrace()
    {
        return _rBrace_;
    }

    public void setRBrace(TRBrace node)
    {
        if(_rBrace_ != null)
        {
            _rBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rBrace_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_enum_)
            + toString(_lBrace_)
            + toString(_channel_)
            + toString(_name_)
            + toString(_enumerationTypeTail_)
            + toString(_rBrace_);
    }

    void removeChild(Node child)
    {
        if(_enum_ == child)
        {
            _enum_ = null;
            return;
        }

        if(_lBrace_ == child)
        {
            _lBrace_ = null;
            return;
        }

        if(_channel_ == child)
        {
            _channel_ = null;
            return;
        }

        if(_name_ == child)
        {
            _name_ = null;
            return;
        }

        if(_enumerationTypeTail_.remove(child))
        {
            return;
        }

        if(_rBrace_ == child)
        {
            _rBrace_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_enum_ == oldChild)
        {
            setEnum((TEnum) newChild);
            return;
        }

        if(_lBrace_ == oldChild)
        {
            setLBrace((TLBrace) newChild);
            return;
        }

        if(_channel_ == oldChild)
        {
            setChannel((TChannel) newChild);
            return;
        }

        if(_name_ == oldChild)
        {
            setName((TName) newChild);
            return;
        }

        for(ListIterator i = _enumerationTypeTail_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(_rBrace_ == oldChild)
        {
            setRBrace((TRBrace) newChild);
            return;
        }

    }

    private class EnumerationTypeTail_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PEnumerationTypeTail node = (PEnumerationTypeTail) o;

            if((node.parent() != null) &&
                (node.parent() != AEnumerationType.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AEnumerationType.this))
            {
                node.parent(AEnumerationType.this);
            }

            return node;
        }
    }
}
