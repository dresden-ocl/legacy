/* This file was generated by SableCC (http://www.sable.mcgill.ca/sablecc/). */

package tudresden.ocl.parser.node;

import java.util.*;
import tudresden.ocl.parser.analysis.*;

public final class AStandardDeclarator extends PDeclarator
{
    private TName _name_;
    private final LinkedList _declaratorTail_ = new TypedLinkedList(new DeclaratorTail_Cast());
    private PDeclaratorTypeDeclaration _declaratorTypeDeclaration_;
    private TBar _bar_;

    public AStandardDeclarator()
    {
    }

    public AStandardDeclarator(
        TName _name_,
        List _declaratorTail_,
        PDeclaratorTypeDeclaration _declaratorTypeDeclaration_,
        TBar _bar_)
    {
        setName(_name_);

        {
            Object temp[] = _declaratorTail_.toArray();
            for(int i = 0; i < temp.length; i++)
            {
                this._declaratorTail_.add(temp[i]);
            }
        }

        setDeclaratorTypeDeclaration(_declaratorTypeDeclaration_);

        setBar(_bar_);

    }

    public AStandardDeclarator(
        TName _name_,
        XPDeclaratorTail _declaratorTail_,
        PDeclaratorTypeDeclaration _declaratorTypeDeclaration_,
        TBar _bar_)
    {
        setName(_name_);

        if(_declaratorTail_ != null)
        {
            while(_declaratorTail_ instanceof X1PDeclaratorTail)
            {
                this._declaratorTail_.addFirst(((X1PDeclaratorTail) _declaratorTail_).getPDeclaratorTail());
                _declaratorTail_ = ((X1PDeclaratorTail) _declaratorTail_).getXPDeclaratorTail();
            }
            this._declaratorTail_.addFirst(((X2PDeclaratorTail) _declaratorTail_).getPDeclaratorTail());
        }

        setDeclaratorTypeDeclaration(_declaratorTypeDeclaration_);

        setBar(_bar_);

    }
    public Object clone()
    {
        return new AStandardDeclarator(
            (TName) cloneNode(_name_),
            cloneList(_declaratorTail_),
            (PDeclaratorTypeDeclaration) cloneNode(_declaratorTypeDeclaration_),
            (TBar) cloneNode(_bar_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAStandardDeclarator(this);
    }

    public TName getName()
    {
        return _name_;
    }

    public void setName(TName node)
    {
        if(_name_ != null)
        {
            _name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _name_ = node;
    }

    public LinkedList getDeclaratorTail()
    {
        return _declaratorTail_;
    }

    public void setDeclaratorTail(List list)
    {
        Object temp[] = list.toArray();
        for(int i = 0; i < temp.length; i++)
        {
            _declaratorTail_.add(temp[i]);
        }
    }

    public PDeclaratorTypeDeclaration getDeclaratorTypeDeclaration()
    {
        return _declaratorTypeDeclaration_;
    }

    public void setDeclaratorTypeDeclaration(PDeclaratorTypeDeclaration node)
    {
        if(_declaratorTypeDeclaration_ != null)
        {
            _declaratorTypeDeclaration_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _declaratorTypeDeclaration_ = node;
    }

    public TBar getBar()
    {
        return _bar_;
    }

    public void setBar(TBar node)
    {
        if(_bar_ != null)
        {
            _bar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _bar_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_name_)
            + toString(_declaratorTail_)
            + toString(_declaratorTypeDeclaration_)
            + toString(_bar_);
    }

    void removeChild(Node child)
    {
        if(_name_ == child)
        {
            _name_ = null;
            return;
        }

        if(_declaratorTail_.remove(child))
        {
            return;
        }

        if(_declaratorTypeDeclaration_ == child)
        {
            _declaratorTypeDeclaration_ = null;
            return;
        }

        if(_bar_ == child)
        {
            _bar_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_name_ == oldChild)
        {
            setName((TName) newChild);
            return;
        }

        for(ListIterator i = _declaratorTail_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(_declaratorTypeDeclaration_ == oldChild)
        {
            setDeclaratorTypeDeclaration((PDeclaratorTypeDeclaration) newChild);
            return;
        }

        if(_bar_ == oldChild)
        {
            setBar((TBar) newChild);
            return;
        }

    }

    private class DeclaratorTail_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PDeclaratorTail node = (PDeclaratorTail) o;

            if((node.parent() != null) &&
                (node.parent() != AStandardDeclarator.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AStandardDeclarator.this))
            {
                node.parent(AStandardDeclarator.this);
            }

            return node;
        }
    }
}

