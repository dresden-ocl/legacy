/* This file was generated by SableCC (http://www.sable.mcgill.ca/sablecc/). */

package tudresden.ocl.parser.node;

import java.util.*;
import tudresden.ocl.parser.analysis.*;

public final class AFormalParameterListTail extends PFormalParameterListTail
{
    private TSemicolon _semicolon_;
    private PFormalParameter _formalParameter_;

    public AFormalParameterListTail()
    {
    }

    public AFormalParameterListTail(
        TSemicolon _semicolon_,
        PFormalParameter _formalParameter_)
    {
        setSemicolon(_semicolon_);

        setFormalParameter(_formalParameter_);

    }
    public Object clone()
    {
        return new AFormalParameterListTail(
            (TSemicolon) cloneNode(_semicolon_),
            (PFormalParameter) cloneNode(_formalParameter_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFormalParameterListTail(this);
    }

    public TSemicolon getSemicolon()
    {
        return _semicolon_;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _semicolon_ = node;
    }

    public PFormalParameter getFormalParameter()
    {
        return _formalParameter_;
    }

    public void setFormalParameter(PFormalParameter node)
    {
        if(_formalParameter_ != null)
        {
            _formalParameter_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _formalParameter_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_semicolon_)
            + toString(_formalParameter_);
    }

    void removeChild(Node child)
    {
        if(_semicolon_ == child)
        {
            _semicolon_ = null;
            return;
        }

        if(_formalParameter_ == child)
        {
            _formalParameter_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_semicolon_ == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

        if(_formalParameter_ == oldChild)
        {
            setFormalParameter((PFormalParameter) newChild);
            return;
        }

    }
}

