/* This file was generated by SableCC (http://www.sable.mcgill.ca/sablecc/). */

package tudresden.ocl.parser.node;

import java.util.*;
import tudresden.ocl.parser.analysis.*;

public final class AUnaryUnaryExpression extends PUnaryExpression
{
    private PUnaryOperator _unaryOperator_;
    private PPostfixExpression _postfixExpression_;

    public AUnaryUnaryExpression()
    {
    }

    public AUnaryUnaryExpression(
        PUnaryOperator _unaryOperator_,
        PPostfixExpression _postfixExpression_)
    {
        setUnaryOperator(_unaryOperator_);

        setPostfixExpression(_postfixExpression_);

    }
    public Object clone()
    {
        return new AUnaryUnaryExpression(
            (PUnaryOperator) cloneNode(_unaryOperator_),
            (PPostfixExpression) cloneNode(_postfixExpression_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAUnaryUnaryExpression(this);
    }

    public PUnaryOperator getUnaryOperator()
    {
        return _unaryOperator_;
    }

    public void setUnaryOperator(PUnaryOperator node)
    {
        if(_unaryOperator_ != null)
        {
            _unaryOperator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _unaryOperator_ = node;
    }

    public PPostfixExpression getPostfixExpression()
    {
        return _postfixExpression_;
    }

    public void setPostfixExpression(PPostfixExpression node)
    {
        if(_postfixExpression_ != null)
        {
            _postfixExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _postfixExpression_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_unaryOperator_)
            + toString(_postfixExpression_);
    }

    void removeChild(Node child)
    {
        if(_unaryOperator_ == child)
        {
            _unaryOperator_ = null;
            return;
        }

        if(_postfixExpression_ == child)
        {
            _postfixExpression_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_unaryOperator_ == oldChild)
        {
            setUnaryOperator((PUnaryOperator) newChild);
            return;
        }

        if(_postfixExpression_ == oldChild)
        {
            setPostfixExpression((PPostfixExpression) newChild);
            return;
        }

    }
}
