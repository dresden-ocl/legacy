
1. REQUIREMENTS
---------------

JDK 1.3
  Sun Microsystems, Inc.

Ant 1.4 and 1.3
  Build Tool
  by The Jakarta Project
     Apache Software Foundation
  http://jakarta.apache.org/ant/

SableCC 2.16.2 (sablecc.jar)
  Parser Generator
  by Etienne M. Gagnon
  http://www.sablecc.org/
  maintained in CVS

Xerces 1.4.3 (xerces.jar)
  XML Parser
  by The Apache XML Project
  http://xml.apache.org/xerces-j/
  maintained in CVS

JUnit 3.7 (junit.jar)
  Test Framework
  by Kent Beck and Erich Gamma
  http://junit.org/
  maintained in CVS

NOTES:
* JDK 1.2 will fail with field java.util.Collections.EMPTY_MAP missing.


2. CHECK IN POLICY
------------------

All the rules below are valid regardless whether a conflict is
caused by a bug in one of the tools. If a conflict really
causes pain, I may decide to upgrade the version of the tool.

No one gets hung, when violating the rules (I even did this
myself). You'll get a friendly email.

2.1 Compile
-----------

"ant clean compile" must succeed with the following compilers:

* javac of the SUN JDK java version "1.3" and later
* jikes Version 1.06 (17 Sep 99) BUT NOT LATER

For how to enable jikes, and which versions to use, see file
jikes.properties in this directory.


NOTE:
It may be the case that the javac compiler produces out of memory exceptions.
When using the javac compiler directly,this problem can be solved by using
the -J-mx<number> switch.
When using Ant to compile the sources, one must increase the available memory
to the compiler by editing the last line of the file ant (or ant.bat respectivly)
in the bin folder of Ant's installation path in the following way:

$JAVACMD -Xms128m -Xmx128m -classpath "$LOCALCLASSPATH" -Dant.home="${ANT_HOME}" $ANT_OPTS org.apache.tools.ant.Main "$@"

The example shows how to increase the available memory to 128 mb by the first two
parameters.

2.2 Jars
--------

"ant clean jar" must succeed.

Besides compiling jar-files are created and checked for static
closure. Note, that "ant jar" does not compile test classes as
"ant compile" does.

2.3 Javadoc
-----------

"ant docs" must succeed and must not produce any warnings.

2.4 Test Suites
---------------

"ant test" must succeed.

2.5 Tabs
--------
You are free to use tabs for identing or not. If you do, a single
tab is exactly ONE level of identation.
You may mix tabs and spaces within a file, but then tab width is 2,
in words "two".

2.6 CHANGELOG
-------------
Every commit resulting in a changed behaviour (probably anything
besides beautifying code) gets a record there. Please don't forget
to document your changes. A policy for CHANGELOG entries is at the
end of that file.


3. RELEASE POLICY
-----------------

3.1. Release Numbers
--------------------
Each release gets a unique number in the form of major.minor.revision.

* Major numbers are reserved for compatibility breaking restructurings
  of the whole project.
* Minor numbers are for changes breaking source or binary compatibility,
  but require small efforts to adapt existing applications using the
  OCL Toolkit.
* Revision upgrades guarantuee source and binary compatibility.

3.2. CVS Tags
-------------
Each release is tagged with "RELEASE_<release number>". Where dots ('.')
in <release number> are replaced by underscores ('_'). This is necessary
because cvs tags may not contain dots.

The following is strictly required: after a

   cvs update -r RELEASE_<release number>
   ant clean dist -Ddist.version=<release number>

one gets exactly the released files offered for download on the server,
except of the file time stamps.

3.3 RELEASE PROCEDURE (as a result of the above)
------------------------------------------------
1)  Get the desired version (probably the most current) from CVS

2a) ant clean all,
    proceed only if everything is ok, according to CHECK-IN policy in README

2b) Do any additional tests, which cannot be done automatically. Yet to be
    specified, at least the interactive applets should be started and a minimal
    clickthrough should be performed.

3)  Choose a release number according to 3.1.
    This number is represesented by <new release number> below.

4a) Edit CHANGELOG: Replace the title of the first section
      "Changes from release x.y.z to current CVS"
    to
      "Changes from release x.y.z to release <new release number>"

4b) cvs commit -m "closed section for <new release number>" CHANGELOG

5)  cvs tag RELEASE_<new release number>, where dots ('.')
    in <release number> are replaced by underscores ('_').

6)  ant dist -Ddist.version=<new release number>
    After that, you will find the following in directory dist

    * dresden-ocl-<new release number>.tar.gz
      containing everything needed for using the toolkit: jars, docs, etc.
    * dresden-ocl-<new release number>-src.tar.gz
      containing the image of a freshly checked out cvs of this version.
      This means: all files maintained in CVS.

7a) Edit CHANGELOG: Add a new section on top:
      "Changes from release <new release number> to current CVS"

    Don't forget to add in the appropriate subsections that are also present
    in the other release sections.

7b) cvs commit -m "opened section for post-<new release number>" CHANGELOG

8)  Upload the files created by 6) to sourceforge into the
    "released files section".

    8a) FTP the files to sourceforge's incoming directory:

      1. cd dist
      2. ftp upload.sourceforge.net (sourceforge doesn't allow scp or sftp here)
      3. Login as "anonymous"
      4. Use your e-mail address as the password for this login
      5. binary
      6. cd /incoming
      7. put dresden-ocl-<new release number>.tar.gz
      8. put dresden-ocl-<new release number>-src.tar.gz
      9. bye
      
    8b) Login to sourceforge and go to the project page
    8c) Access the File Release System under 'Admin'->'Edit/Release Files'
    8d) Click on 'Add Release' next to the line for the 'dresden-ocl' package.
    8e) enter <new release number> for the name of the release and make sure
        that the name of the package is indeed 'dresden-ocl'.
    8f) Provide release notes and the relevant section of the CHANGELOG. 
        Everything else should normally stay at the defaults.
        Hit 'Submit/Refresh'
    8g) Check the files you just uploaded via ftp on the list lower on the 
        same page and hit the 'Add Files' button.
    8h) Select the appropriate file types as well as 'Platform independent' for
        the processor type for both files. Note that there's a difference between
        'GZ' and 'Source GZ'! Also make sure that all the other info is correct.
        Then hit the 'Update/Refresh' button. Do so for each file one after the other,
        Sourceforge will forget whatever you entered for the second file (except the
        things you already stored :-) ) when you update the first one.
    8i) If people monitor the package send them an announcement (same text as to 
        everybody else).
    8k) Download the files from sourceforge and check that they are identical to the
        files in dist.
        
      1. Go to the project summary page.
      2. Select the release from the 'Files Released' section.
      3. Download your released files to a separate directory.
      4. Use diff to compare the files.
      5. If any differences occur repeat from 8a) (except you don't need to create the
         release anymore, instead remove the faulty files and reassign the correct files.)

9)  Make announcement in dresden-ocl-discussion.
    Subject is "released version <new release number>". Put the corresponding
    section of CHANGELOG into that mail.

10) (Optional) Propose an announcement for dresden-ocl-announce on
    dresden-ocl-discussion. Such an announcement demands careful evaluation.
    There should be at least three month between messages on dresden-ocl-announce.



Ralf.
