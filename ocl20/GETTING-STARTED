
  GETTING STARTED WITH THE DRESDEN OCL TOOLKIT FOR OCL2.0 (Source Release)

  This document is still in a very early stage and covers only the most basic
  information needed to get the toolkit running. If you encounter problems,
  please don't hesitate to report them (See "Contact" at the end of this 
  document).

  Prerequisites
  -------------

  To get the toolkit running from a binary release, you need:
  1. Java JRE 1.5
  2. Make sure that your system's environment variable $JAVA_HOME is set 
     properly and "tools.jar" is located at $JAVA_HOME/lib/tools.jar
  
  To get the toolkit running from source code, you additionally need:
  1. Jakarta Ant (I used Ant 1.6.2. For other versions, your mileage may vary).
  2. Java SDK 1.5
  
  For the Parser GUI:
  If you want to load models into the parser GUI other than those provided with
  the distribution , I recommend using the XMI export in Gentleware's "Poseidon
  for UML 3.0". I used the community edition, which can be obtained for the cost
  of its download at http://www.gentleware.com/. Make sure your model's XMI file
  does not containe diagram data (untag the corresponding option when saving XMI
  file).

  For Transformation Framework:
  If you want to transform uml models with the transformation framework other 
  than those provided with the distribution , I recommend using the XMI export 
  in Gentleware's "Poseidon for UML 3.2". I used the community edition, 
  which can be obtained for the cost of its download at http://www.gentleware.com/.
  Make sure your model's XMI file does not containe diagram data (untag the 
  corresponding option when saving XMI file).
  A detailed HOWTO can be found under $BASE/resources/cwm/howto
  Example models can be found under $BASE/resources/cwm/UmlModels
  
  
  Project configuration
  ---------------------
  
  If you are using Eclipse, follow these instructions to configure the project:
	1. checkout "ocl20" and all subfolders
	2. add all .jar-files in "lib/external", "lib/external/lib", "lib/external/mdr"
		 to the project
	3. "build.xml"->Run As->2 Ant Build...: check "jar" and run the script
	4. refresh the project
	5. add "src" and "generated_src/generatedJMI" as source files
	
  
  Conventions
  -----------

  In this document, the variable $BASE refers to the directory where you
  unpacked the distribution jar file into. E. g. if you unpacked the toolkit
  into /home/adam/ocl20, then $BASE would have the value "/home/adam/ocl20".
	

  Build targets
  -------------

  There are seven applications in the toolkit by now.

  1. OCL2.0 Workbench
     This software was written by Stefan Ocke for his diploma thesis. It provides
     following functions:
     a. loading metamodels into the repository using XMI
     b. creation of OCL invariants for loaded metamodels
     c. generating code for those invariants
     d. loading of models and execution of generated code to check for compliance
        with invariants

  2. OCL2.0 Parser GUI
     This software was written by Ansgar Konermann for his diploma thesis. It
     provides a GUI to the OCL2.0 parser and allows:
     a. editing, loading and saving of text files containing OCL2.0 constraints
     b. parsing OCL2.0 constraints into a concrete syntax tree and visualizing
        this tree
     c. loading UML15 models to run attribute evaluation/AST generation against
        (using XMI)
     d. browse UML models in the repository (very basic browsing only)
     e. running an attribute evaluator over the concrete syntax tree to create
        the abstract syntax tree.
        
   3. OCL22SQL tool
      This software was written as a prototype example for the DeclarativeCode-
      Generator by Florian Heidenreich for his diploma thesis. It provides a GUI 
      to create integrity views from textual OCL invariants and allows:
      a. loading of OCL constraint files
      b. loading UML15 models to run attribute evaluation/AST generation against
         (using XMI)
      c. choosing between different object-relational mapping schemes to create
         DDL-scripts for table schemas and DDL-scripts for object views
      d. generating of SQL integrity views from the AST
      
      Please note, that this tool doesn't support association classes and OCL 
      constraints which use the class names instead of association ends for
      navigation.
      
   4. UtilityTest 
   	  This Software was written by Jordi Cabot Sagrera. It is an example 
   	  how to use the Class Utility which provides some helper methods. Take a 
   	  look at the classes UtilityTest and Utility if you plan to work directly on the 
   	  repository. It is a text-based application, which uses the CarWorld-Model 
   	  in /resources/PoseidonProjects.
   	  
   5. Transformation Framework
   	  This Software was written by Christian Wende for his student research project 
   	  (Großer Beleg). It provides a framework to implement, manage, configure and 
   	  execute metamodelbased transformations.
   	  The distribution comes with a implementation of transformations performing
   	  a database-shema generation from uml models.
   	  
   6. Eclipse Plugins
      There are three Eclipse plugins shipped with this toolkit. The Base plugin and 
      the OCL Editor plugin were written by Mirko Stölzel. The Visualization plugin 
      was written by Kai-Uwe Gärtner.
      The OCL Editor plugin provides a text editor for OCL Constraints.
      The Visualization plugin helps you to see what is inside the Netbeans Repository.
      The Base provides the basic functions of the toolkit to other plugins.
  	  
   7. Java Codegenerator GUI
      This software was written by Ronny Brandt for his student research project
      (Großer Beleg). It is an extension of the codegenerator written by
      Stefan Ocke. With this software you can load UML-models provided as XMI files
      and OCL-constraints and generate java code to check these constraints at runtime.
      This generated code also can be injected in existing java files (instrumentation)
      and they can be reverse engineered too.  

   All applications share a common codebase. To faciliate building and running
   them, there is an Ant script in $BASE/build.xml.

   To build and run the OCL workbench, change working directory to $BASE and
   type:

        ant run.workbench (for source releases)
        java -jar ocl20workbench.jar (for binary releases)

   For the OCL2.0 parser GUI, change the working directory to $BASE and type:

        ant run.parser-gui (for source releases)
        java -jar ocl20parsertools.jar (for binary releases)
        
   For the OCL22SQL tool, change the working directory to $BASE and type:
   
        ant run.ocl22sql (for source releases)
        java -jar ocl22sql.jar (for binary releases)
        
   For the UtilityTest, change the working directory to $BASE and type:
   		
   		ant run.utilityexample (only for source releases)

   For the Transformation Framework , change the working directory to $BASE and type:
   		
   		ant run.transformationGUI (for source releases)
   		java -jar trans_engine.jar (for binary releases)
   
   For the codegenerator GUI, change the working directory to $BASE and type:
   
      ant run.codegenGUI (for source releases)
      java -jar ocl20codegenGUI-java.jar (for binary releases
          (classes for injection in $BASE\resources\classpath))
      java -cp ocl20codegenGUI-java.jar;./CLASSPATH tudresden.ocl20.codegen.java.JavaCodeGeneratorGUI
          (for binary releases (classes for injection CLASSPATH))

   OCL2.0 Workbench
   ----------------

   TODO: short introduction on how to work with the workbench


   OCL2.0 Parser GUI
   -----------------

   To run the parser, load an OCL constraint file, say "OCL-Syntaxtest.ocl".
   The application automatically switches over to the "CST" tab. Click button
   "Parse (CS)" to parse the constraint into a concrete syntax tree.

   The concrete syntax tree will be displayed. Click "Expand all" to expand all
   tree nodes. If you want to have the CST visualized, click "Visualize". This 
   will take a while. The GUI will switch to the "CST Viz" panel after when done.
   
   Next, load a model. Click the "Model" tab and import CarOwner.xmi. This will
   again take a while. When done, you may switch to the "Repo" tab and click
   "Browse Mdls". This will show all UML models in the repository. You can
   expand package and classifier nodes. Button "Erase Mdl" has no function yet.

   Click "ASTGen log", where you can find the logging output of the AST generator.
   Click "Generate". It might result in an exception. If the log output suggests
   to you that there's a problem with the parser, feel free to report it (see
   section "Contact" below).
   You can use "Clear" to clear the logging console. For the example file named
   above, aside from some "not yet implemented" notes for attribute definitions,
   the AST generation should complete successfully.

   Press "Export XMI" to export the model including all the OCL constraints.
   Select a descriptive name for your exported model (e. g. "CarOwner-WithOCL.xmi").
   Export will again take a while. Default export directory is 
        $BASE/resources/PoseidonProjects
   Review the exported file with a text editor. Search for strings matching
   "constraint". 

   Report any violations of OCL2.0 AST generation rules to Ansgar Konermann.
   Thank you. :o)
   
   
   OCL22SQL tool
   -----------------

   First choose a project directory where the various *.sql files should be
   generated to and choose a OCL constraint file, for example 
   "university_example.ocl".
   
   Then choose the corresponding model as XMI, for example
   "university_example.xmi".
   
   Choose the transformation parameters for the object-relational
   mapping and press "Next". You'll notice some status messages
   appearing on your console.
   
   After the text "Finished!" is displayed on the console, switch to the 
   "Output" tab and have a look at the generated DDL and SQL code.
   
   
   UtilityTest
   -----------------
   
   For this Example you shoult take a look at the code to understand what 
   is printed out during execution. 


   Transformation Framework
   ------------------
   
   A short introduction how to use the Transformation Framework can be found in:
   $BASE/resources/cwm/howto
   Example models can be found under $BASE/resources/cwm/UmlModels
   
   
   Visualization Plugin for Eclipse SDK
   ------------------
   
   To run the visualization plugin you need the following:
   
    - at least Eclipse SDK 3.0
    - Eclipse GEF
    
   If you have a binary release you can simply copy the contents of the 'eclipse' 
   folder to your local eclipse folder. If you have a source release you can find 
   instructions in eclipse/GETTING_STARTED.
   
   To visualize an OCL constraint proceed the following steps:
   
    1. Import your UML-Model (XMI file) and you OCL constraint (OCL file) into a 
       project.
    2. Load the UML-Model by right-clicking the XMI file and choosing 
       "Model Visualization->Load XMI file".
    3. Load you OCL-Constraint the same way
    4. You will see the visualized repository content in a new view


   Codegenerator GUI
   ------------------
   
   Whithin the codegenerator GUI you con choose between generating code as a
   string (tab 'CodeGenerator'), to generate code an instrument existing java
   files (tab 'CodeInjector') or to reverse engineer instrumented java files
   (tab 'ReverseEngineering').
   To instrument existing java files (generate code as a string is similar) you
   have to load an UML-model provided as an XMI file (XMI files created with
   argoUML and Poseidon For UML 3.0 are tested, XMI files created with
   Poseidon For UML 4.x can be transformed using the XmiTool by Florian Heidenreich)
   and an .ocl file containing the constraints. Besides you have to choose the
   java files to be instrumented.
   For injection the classes for the java files to be injected have to be within
   the classpath. 
   An example containing an XMI file, an OCL file and some working java files
   can be found in $BASE\resources\javacodegenexample. The class files for the
   example are already included in $BASE\resources\classpath.
   
  
   Contact
   -------

   Report problems with the OCL parser to Ansgar Konermann. You can reach him
   by email: ansgar at itikko dot net
   
   Report problems with the OCL22SQL tool to Florian Heidenreich. You can reach
   him by email: mail at fheidenreich dot de

   TODO: ask Stefan whether we may publish his email address here and which
         address should be used
         
   Report problems with the Transformation Framework to Christian Wende. You can reach
   him by email: chr dot wende at gmx dot de
   
   Report problems with the codegenerator GUI to Ronny Brandt. You can reach him
   by email: ronny_brandt at gmx dot de

   Version information
   -------------------
   
   Not versioned at the moment. Please check the CVS repository at
    http://sourceforge.net/cvs/?group_id=5840
   for the latest version of the toolkit.

   
