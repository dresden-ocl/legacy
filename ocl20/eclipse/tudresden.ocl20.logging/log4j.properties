# This file provides log4j settings for loggers that have not been retrieved from the 
# ILogManager created for their plugin. More precisely, instead of using
#
#    Logger logger = LoggingPlugin.getLogManager(MyPlugin.getDefault()).getLogger(MyClass.class);
#
# the logger was created using the traditional log4j way:
#
#    Logger logger = Logger.getLogger(MyClass.class);
#
# Client plugins may opt to do so if their code must not introduce dependencies to the Eclipse
# Plugin API because it is supposed to be used outside of Eclipse as well.
#
# In this case, the PluginLogFileAppender cannot be defined because no state location for saving the
# log file could be found. The ErrorLogAppender, on the other hand, can still be used, but it will
# log everything using the LoggingPlugin's ILog.
#
# Client plugins may extend these settings by supplying an own log4j.properties file and configuring
# it via LoggingPlugin.configureDefaultLogging() 

# by default log warnings and errors to the error log
log4j.rootLogger = warn

# the error log appender
log4j.appender.errorLog = tudresden.ocl20.logging.appender.ErrorLogAppender
log4j.appender.errorLog.layout = org.apache.log4j.PatternLayout
log4j.appender.errorLog.layout.ConversionPattern = %c: %m%n
