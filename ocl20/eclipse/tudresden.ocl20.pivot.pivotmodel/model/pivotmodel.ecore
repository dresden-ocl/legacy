<?xml version="1.0" encoding="UTF-8"?>
<ecore:EPackage xmi:version="2.0"
    xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="pivotmodel"
    nsURI="http://www.tu-dresden.de/ocl20/pivot/2007/pivotmodel" nsPrefix="pivot">
  <eClassifiers xsi:type="ecore:EClass" name="NamedElement" abstract="true">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>&#xD;&#xA;A &lt;code>NamedElement&lt;/code> represents elements that &#xD;&#xA;may have a name. The name is used for identification of &#xD;&#xA;the named element within the elements owned by its owner. &#xD;&#xA;A named element also has a qualified name that allows it to &#xD;&#xA;be unambiguously identified within a hierarchy of nested &#xD;&#xA;named elements. &lt;code>NamedElement&lt;/code> is an &#xD;&#xA;abstract metaclass.&#xD;&#xA;&lt;/p>"/>
    </eAnnotations>
    <eOperations name="clone" lowerBound="1" eType="#//NamedElement" eExceptions="#//CloneNotSupportedException">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;Creates a copy of this &lt;code>NamedElement&lt;/code>. In the Pivot Model,&#xD;&#xA;all clone operations are intended to perform deep cloning (as opposed&#xD;&#xA;to a shallow clone). That means, that all contained elements (i.e., all elements&#xD;&#xA;for which this &lt;code>NamedElement&lt;/code> is the owner) have to be&#xD;&#xA;cloned as well. Cloning support is necessary for binding {@link GenericElement}s&#xD;&#xA;because such an element needs to be cloned first before its {@link TypeParameter}s&#xD;&#xA;can be bound.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" ordered="false" lowerBound="1"
        eType="ecore:EDataType datatypes.ecore#//String" defaultValueLiteral="">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;Represents the name of the &lt;code>NamedElement&lt;/code>.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="qualifiedName" eType="ecore:EDataType datatypes.ecore#//String"
        changeable="false" volatile="true" transient="true" derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;A qualified name allows the &lt;code>NamedElement to be &#xD;&#xA;identified within a hierarchy of nested elements. It is &#xD;&#xA;constructed from the names of the owners starting at the &#xD;&#xA;root of the hierarchy and ending with the name of the &#xD;&#xA;&lt;code>NamedElement&lt;/code>  itself. This is a derived &#xD;&#xA;attribute.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="owner" eType="#//NamedElement"
        changeable="false" volatile="true" transient="true" resolveProxies="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;A &lt;code>NamedElement&lt;/code> may have an owner &#xD;&#xA;whose name is used for constructing the qualified name of &#xD;&#xA;the &lt;code>NamedElement&lt;/code>. This is a derived &#xD;&#xA;attribute.&#xD;&#xA;&#xD;&#xA;The concept of an owner was introduced in the Pivot &#xD;&#xA;Model to facilitate the computation of qualified names &#xD;&#xA;which are not available in UML::Core::Basic. However, the &#xD;&#xA;Pivot Model does not extend the concept of a {@link &#xD;&#xA;Namespace} to {@link Type types} and {@link Operation &#xD;&#xA;operations} as in the complete UML 2.0 specification. &#xD;&#xA;That's why arbitrary named elements are not necessarily &#xD;&#xA;located in a namespace.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="TypedElement" abstract="true" eSuperTypes="#//NamedElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>&#xD;&#xA;A &lt;code>TypedElement&lt;/code> represents elements that &#xD;&#xA;have a {@link Type}.&#xD;&#xA;&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="type" lowerBound="1" eType="#//Type"
        resolveProxies="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;Specifies the type of the element.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="genericType" eType="#//GenericType"
        containment="true" eOpposite="#//GenericType/typedElement"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Feature" abstract="true" eSuperTypes="#//TypedElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>&#xD;&#xA;An additional metaclass in comparison with &#xD;&#xA;UML::Core::Basic, a &lt;code>Feature&lt;/code> introduces &#xD;&#xA;the notion of a class-scope (i.e. static) feature in a {@link &#xD;&#xA;Type}.&#xD;&#xA;&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="static" eType="ecore:EDataType datatypes.ecore#//Boolean"
        defaultValueLiteral="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;code>&#xD;&#xA;Specifies whether this feature characterizes individual &#xD;&#xA;instances classified by a {@link Type} &#xD;&#xA;(&lt;code>false&lt;/code>) or the type itself &#xD;&#xA;(&lt;code>true&lt;/code>). Default value is &#xD;&#xA;&lt;code>false&lt;/code>.&#xD;&#xA;&lt;/code>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="MultiplicityElement" abstract="true"
      interface="true">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>&#xD;&#xA;A &lt;code>MultiplicityElement&lt;/code> is an abstract &#xD;&#xA;metaclass which includes optional attributes for defining &#xD;&#xA;properties related to the multiplicity of an element.&#xD;&#xA;&lt;/p>&#xD;&#xA;"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="ordered" eType="ecore:EDataType datatypes.ecore#//Boolean"
        defaultValueLiteral="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;For a multivalued multiplicity, this attribute specifies whether &#xD;&#xA;the values in an instantiation of this element are&#xD;&#xA;sequentially ordered. Default is &lt;code>false&lt;/code>.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="unique" eType="ecore:EDataType datatypes.ecore#//Boolean"
        defaultValueLiteral="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;For a multivalued multiplicity, this attributes specifies &#xD;&#xA;whether the values in an instantiation of this element are &#xD;&#xA;unique. Default is &lt;code>true&lt;/code>.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="multiple" eType="ecore:EDataType datatypes.ecore#//Boolean"
        defaultValueLiteral="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;Specifies whether this multiplity element has an upper bound larger than 1. Default is &lt;code>false&lt;/code>.&#xD;&#xA;&#xD;&#xA;The reason for not including concrete lower and upper &#xD;&#xA;bounds in the Pivot Model is that for an evaluation with &#xD;&#xA;OCL this information is not needed. The distinction between &#xD;&#xA;single-valued and multi-valued multiplicities suffices.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="GenericElement" abstract="true" interface="true"
      eSuperTypes="#//NamedElement">
    <eOperations name="bindTypeParameter" lowerBound="1" eType="#//NamedElement">
      <eParameters name="parameters" lowerBound="1">
        <eGenericType eClassifier="ecore:EDataType datatypes.ecore#//Sequence">
          <eTypeArguments eClassifier="#//TypeParameter"/>
        </eGenericType>
      </eParameters>
      <eParameters name="types" lowerBound="1">
        <eGenericType eClassifier="ecore:EDataType datatypes.ecore#//Sequence">
          <eTypeArguments>
            <eUpperBound eClassifier="#//Type"/>
          </eTypeArguments>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="addTypeParameter" eType="#//GenericElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;Adds a {@link TypeParameter} to the type parameters of this&#xD;&#xA;&lt;code>GenericElement&lt;/code>. This operation is required to&#xD;&#xA;properly support cloning generic elements. The operation returns&#xD;&#xA;a reference to this &lt;code>GenericElement&lt;/code>.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
      <eParameters name="typeParameter" eType="#//TypeParameter"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedTypeParameter" upperBound="-1"
        eType="#//TypeParameter" containment="true" eOpposite="#//TypeParameter/genericElement"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ConstrainableElement" abstract="true"
      interface="true">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>&#xD;&#xA;A &lt;code>ConstrainableElement&lt;/code> can be &#xD;&#xA;constrained by a {@link Constraint}. Depending on the &#xD;&#xA;concrete type of the constrainable element different forms &#xD;&#xA;of constraints are possible. A constraint may even define &#xD;&#xA;the value of a constrainable element, in the form of derived &#xD;&#xA;values or defined operations.&#xD;&#xA;&lt;/p>"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Namespace" eSuperTypes="#//NamedElement #//GenericElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>&#xD;&#xA;A &lt;code>Namespace&lt;/code> is a container for types and &#xD;&#xA;other namespaces.&#xD;&#xA;&lt;/p>"/>
    </eAnnotations>
    <eOperations name="addType" lowerBound="1" eType="#//Namespace">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;Adds a {@link Type} to this &lt;code>Namespace&lt;/code>.&#xD;&#xA;This is an additional operation in the Pivot Model to support&#xD;&#xA;cloning namespaces when type parameters are bound.&#xD;&#xA;The operation returns a reference to this&#xD;&#xA;&lt;code>Namespace&lt;/code>.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
      <eParameters name="type" eType="#//Type"/>
    </eOperations>
    <eOperations name="addRule" lowerBound="1" eType="#//Namespace">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;Adds a {@link Constraint} to this &lt;code>Namespace&lt;/code>.&#xD;&#xA;This is an additional operation in the Pivot Model to support&#xD;&#xA;parsers of constraint languages with a textual syntax (e.g. OCL)&#xD;&#xA;that allow to specify the context of a constraint without explicitly&#xD;&#xA;adding the &lt;code>Constraint&lt;/code> instance to the model.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
      <eParameters name="rule" eType="#//Constraint"/>
    </eOperations>
    <eOperations name="addNestedNamespace" lowerBound="1" eType="#//Namespace">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;Adds a nested &lt;code>Namespace&lt;/code> to this &lt;code>Namespace&lt;/code>.&#xD;&#xA;This is an additional operation in the Pivot Model to support cloning namespaces&#xD;&#xA;when type parameters are bound. The operation returns a reference to this&#xD;&#xA;&lt;code>Namespace&lt;/code>.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
      <eParameters name="namespace" eType="#//Namespace"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedType" upperBound="-1"
        eType="#//Type" containment="true" eOpposite="#//Type/namespace">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;This is the set of {@link Type types} that are contained in this namespace.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedRule" upperBound="-1"
        eType="#//Constraint" containment="true" eOpposite="#//Constraint/namespace">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;Specifies a set of {@link Constraint}s owned by this &lt;code>Namespace&lt;/code>.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="nestedNamespace" upperBound="-1"
        eType="#//Namespace" containment="true" eOpposite="#//Namespace/nestingNamespace">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;This is the set of namespaces contained in this namespace.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="nestingNamespace" eType="#//Namespace"
        resolveProxies="false" eOpposite="#//Namespace/nestedNamespace">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;This specifies the &lt;code>Namespace&lt;/code> that is the &#xD;&#xA;owner of this namespace.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Type" eSuperTypes="#//NamedElement #//ConstrainableElement #//GenericElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>&#xD;&#xA;A &lt;code>Type&lt;/code> represents a set of values. A {@link TypedElement} that has this type is constrained to represent values within this set. Contrary to &lt;code>Core::Basic::Type&lt;/code>, this is not an abstract metaclass. Instead, the definition of a type in the pivot model is extended to what in many metamodels is called &lt;code>Classifier&lt;/code> or &lt;code>Class&lt;/code>. In particular, a &lt;code>Type&lt;/code> can own {@link Property properties} and {@link Operation operations}. It also may have super types.&#xD;&#xA;&lt;/p>"/>
    </eAnnotations>
    <eOperations name="conformsTo" eType="ecore:EDataType datatypes.ecore#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;The query &lt;code>conformsTo()&lt;/code> gives true for a&#xD;&#xA;type that conforms to another. &#xD;&#xA;&#xD;&#xA;It is specified as follows:&#xD;&#xA;&lt;pre>&#xD;&#xA;context Type&#xD;&#xA;def: conformsTo(other: Type): Boolean =&#xD;&#xA;   (self=other) or (self.allParents()->includes(other))&#xD;&#xA;&lt;/pre>&#xD;&#xA;where the query &lt;code>allParents()&lt;/code> returns all of &#xD;&#xA;the direct and indirect ancestors of a type and is defined &#xD;&#xA;as:&#xD;&#xA;&lt;pre>&#xD;&#xA;context Type&#xD;&#xA;def: allParents(): Set(Type) =&#xD;&#xA;   self.superType->union(self.superType.allParents())&#xD;&#xA;&lt;/pre>&#xD;&#xA;&lt;/p>&#xD;&#xA;"/>
      </eAnnotations>
      <eParameters name="other" eType="#//Type"/>
    </eOperations>
    <eOperations name="commonSuperType" eType="#//Type">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;The operation &lt;code>commonSuperType&lt;/code> results &#xD;&#xA;in the most specific common supertype of two {@link Type types}.&#xD;&#xA;&#xD;&#xA;It is specified as follows:&#xD;&#xA;&lt;pre>&#xD;&#xA;context Type&#xD;&#xA;def: commonSuperType (other : Type) : Type =&#xD;&#xA;   Type::allInstances()->select (cst |&#xD;&#xA;      other.conformsTo (cst) and&#xD;&#xA;      self.conformsTo (cst) and&#xD;&#xA;      not Type::allInstances()->exists (clst |&#xD;&#xA;         other.conformsTo (clst) and&#xD;&#xA;         self.conformsTo (clst) and&#xD;&#xA;         clst.conformsTo (cst) and&#xD;&#xA;         clst &lt;> cst&#xD;&#xA;      )&#xD;&#xA;   )->any (true)&#xD;&#xA;&lt;/pre>&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
      <eParameters name="other" eType="#//Type"/>
    </eOperations>
    <eOperations name="allProperties">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;Returns all properties of this &lt;code>Type&lt;/code> and its supertypes.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
      <eGenericType eClassifier="ecore:EDataType datatypes.ecore#//Sequence">
        <eTypeArguments eClassifier="#//Property"/>
      </eGenericType>
    </eOperations>
    <eOperations name="allOperations">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;Returns all operations of this &lt;code>Type&lt;/code> and its supertypes.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
      <eGenericType eClassifier="ecore:EDataType datatypes.ecore#//Sequence">
        <eTypeArguments eClassifier="#//Operation"/>
      </eGenericType>
    </eOperations>
    <eOperations name="lookupProperty" eType="#//Property">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;Returns a {@link Property} of this &lt;code>Type&lt;/code> with the&#xD;&#xA;given name.&#xD;&#xA;&#xD;&#xA;It is specified as follows:&#xD;&#xA;&lt;pre>&#xD;&#xA;context Type&#xD;&#xA;def: lookupProperty(name : String) : Property =&#xD;&#xA;   self.allProperties()->any(p | p.name = name)&#xD;&#xA;&lt;/pre>&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
      <eParameters name="name" eType="ecore:EDataType datatypes.ecore#//String"/>
    </eOperations>
    <eOperations name="lookupOperation" eType="#//Operation">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;Returns an {@link Operation} of this &lt;code>Type&lt;/code> with the given name and the given parameter types.&#xD;&#xA;&#xD;&#xA;It is specified as follows:&#xD;&#xA;&lt;pre>&#xD;&#xA;context Type&#xD;&#xA;def: lookupOperation (name: String, paramTypes: Sequence(Type)): Operation =&#xD;&#xA;   self.allOperations()->any (op | op.name = name and&#xD;&#xA;      op.hasMatchingSignature(paramTypes))&#xD;&#xA;&lt;/pre>&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
      <eParameters name="name" eType="ecore:EDataType datatypes.ecore#//String"/>
      <eParameters name="paramTypes">
        <eGenericType eClassifier="ecore:EDataType datatypes.ecore#//Sequence">
          <eTypeArguments eClassifier="#//Type"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="addProperty" lowerBound="1" eType="#//Type">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;Adds a {@link Property} to this &lt;code>Type&lt;/code>. This is an additional operation in the Pivot Model to support properties defined via a {@link ConstraintKind#definition definition} constraint.The operation returns a reference to this &lt;code>Type&lt;/code>.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
      <eParameters name="property" eType="#//Property"/>
    </eOperations>
    <eOperations name="addOperation" lowerBound="1" eType="#//Type">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;Adds an {@link Operation} to this &lt;code>Type&lt;/code>. This is an additional operation in the Pivot Model to support operations defined via a {@link ConstraintKind#definition definition} constraint.The operation returns a reference to this &lt;code>Type&lt;/code>.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
      <eParameters name="operation" eType="#//Operation"/>
    </eOperations>
    <eOperations name="addSuperType" lowerBound="1" eType="#//Type">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;Adds a {@link Type} to the supertypes of this &lt;code>Type&lt;/code>.&#xD;&#xA;This is an additional operation in the Pivot Model to support adding&#xD;&#xA;the OclAny type as a supertype. We cannot simply add it to the list&#xD;&#xA;returned by {@link #getSuperType()} because subclasses may&#xD;&#xA;override the behaviour of that list to adapt to custom repositories.&#xD;&#xA;The operation returns a reference to this &lt;code>Type&lt;/code>.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
      <eParameters name="type" eType="#//Type"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="superType" upperBound="-1"
        eType="#//Type">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;References the immediate supertypes of a &#xD;&#xA;&lt;code>Type&lt;/code>, from which the type inherits.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedOperation" upperBound="-1"
        eType="#//Operation" containment="true" eOpposite="#//Operation/owningType">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;References the {@link Operation operations} owned by this &lt;code>Type&lt;/code>. This is an ordered association.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedProperty" upperBound="-1"
        eType="#//Property" containment="true" eOpposite="#//Property/owningType">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;References the {@link Property properties} owned by this &lt;code>Type&lt;/code>. This is an ordered association.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="namespace" eType="#//Namespace"
        transient="true" eOpposite="#//Namespace/ownedType">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;References the {@link Namespace} that contains this &lt;code>Type&lt;/code>.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="PrimitiveType" eSuperTypes="#//Type">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>&#xD;&#xA;A &lt;code>PrimitiveType&lt;/code> defines a predefined data &#xD;&#xA;type, without any relevant substructure (i.e., it has no parts). &#xD;&#xA;A primitive datatype may have an algebra and operations &#xD;&#xA;defined outside of the Pivot Model, for example, &#xD;&#xA;mathematically.&#xD;&#xA;&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="kind" lowerBound="1" eType="#//PrimitiveTypeKind"
        defaultValueLiteral="Unknown">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;Specifies the {@link PrimitiveTypeKind kind} of this &lt;code>PrimitiveType&lt;/code>.&#xD;&#xA;Different DSLs may have different predefined primitive types, but it should be&#xD;&#xA;possible to classify them according to the literals defined in the Pivot Model.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="PrimitiveTypeKind">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>&#xD;&#xA;An enumeration that defines literals for the predefined kinds of {@link PrimitiveType}s.&#xD;&#xA;&lt;/p>"/>
    </eAnnotations>
    <eLiterals name="Unknown"/>
    <eLiterals name="Integer" value="1"/>
    <eLiterals name="Real" value="2"/>
    <eLiterals name="Boolean" value="3"/>
    <eLiterals name="String" value="4"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Enumeration" eSuperTypes="#//Type">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>&#xD;&#xA;An &lt;code>Enumeration&lt;/code> defines a set of &#xD;&#xA;{@link EnumerationLiteral literals} that can be used as its &#xD;&#xA;values.&#xD;&#xA;&lt;/p>"/>
    </eAnnotations>
    <eOperations name="addLiteral" lowerBound="1" eType="#//Enumeration">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;Adds an {@link EnumerationLiteral} to this &lt;code>Enumeration&lt;/code>.&#xD;&#xA;This operation is required to properly support cloning enumerations.&#xD;&#xA;The operation returns a reference to this &lt;code>Enumeration&lt;/code>.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
      <eParameters name="literal" lowerBound="1" eType="#//EnumerationLiteral"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedLiteral" upperBound="-1"
        eType="#//EnumerationLiteral" containment="true" eOpposite="#//EnumerationLiteral/enumeration">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;This is the ordered collection of literals for the enumeration.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="EnumerationLiteral" eSuperTypes="#//NamedElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>&#xD;&#xA;An &lt;code>EnumerationLiteral&lt;/code> is a value of an &#xD;&#xA;{@link Enumeration}.&#xD;&#xA;&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="enumeration" eType="#//Enumeration"
        transient="true" eOpposite="#//Enumeration/ownedLiteral">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;The enumeration that this literal belongs to.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Property" eSuperTypes="#//Feature #//TypedElement #//NamedElement #//MultiplicityElement #//ConstrainableElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>&#xD;&#xA;A &lt;code>Property&lt;/code> is a {@link TypedElement} &#xD;&#xA;typed element that represents an attribute of a {@link &#xD;&#xA;Type} or an association to another type.&#xD;&#xA;&lt;/p>"/>
    </eAnnotations>
    <eOperations name="cmpSlots" eType="ecore:EDataType datatypes.ecore#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;The operation cmpSlots returns true if the compared &#xD;&#xA;property has identical name and type.&#xD;&#xA;&#xD;&#xA;It is specified as follows:&#xD;&#xA;&lt;pre>&#xD;&#xA;context Parameter::cmpSlots(p : Property): Boolean =&#xD;&#xA;   p.name = self.name and p.type = self.type&#xD;&#xA;&lt;/pre>&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
      <eParameters name="p" eType="#//Property"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="owningType" eType="#//Type"
        transient="true" eOpposite="#//Type/ownedProperty">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;Specifies the owner of this &lt;code>Property&lt;/code>.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Operation" eSuperTypes="#//Feature #//TypedElement #//NamedElement #//MultiplicityElement #//ConstrainableElement #//GenericElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>&#xD;&#xA;An operation is a behavioral feature of a {@link Type} that &#xD;&#xA;specifies the name, type, parameters, and constraints for &#xD;&#xA;invoking an associated behavior.&#xD;&#xA;&lt;/p>"/>
    </eAnnotations>
    <eOperations name="hasMatchingSignature" eType="ecore:EDataType datatypes.ecore#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;An additional operation defined in the OCL specification &#xD;&#xA;(Section 8.3.8) which checks whether the &#xD;&#xA;&lt;code>Operation&lt;/code>'s signature matches with a &#xD;&#xA;sequence of {@link Type types}. Note that in making the &#xD;&#xA;match only parameters with {@link ParameterDirectionKind &#xD;&#xA;direction kind} &lt;code>in&lt;/code> or &lt;code>inout&lt;/code>&#xD;&#xA;are considered.&#xD;&#xA;&#xD;&#xA;The operation is specified as follows:&#xD;&#xA;&lt;pre>&#xD;&#xA;context Operation&#xD;&#xA;def: hasMatchingSignature(paramTypes: Sequence(Type)) : Boolean =&#xD;&#xA;   let sigParamTypes: Sequence(Type) =&#xD;&#xA;      self.inParameter.union(self.inoutParameter).type in&#xD;&#xA;   (&#xD;&#xA;      ( sigParamTypes->size() = paramTypes->size() ) and&#xD;&#xA;      ( Set{1..paramTypes->size()}->forAll ( i |&#xD;&#xA;         paramTypes->at(i).conformsTo(sigParamTypes->at(i)) )&#xD;&#xA;      )&#xD;&#xA;   )&#xD;&#xA;&lt;/pre>&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
      <eParameters name="paramTypes">
        <eGenericType eClassifier="ecore:EDataType datatypes.ecore#//Sequence">
          <eTypeArguments eClassifier="#//Type"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="addParameter" eType="#//Operation">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;Adds a {@link Parameter} to this operation. This is required &#xD;&#xA;to define new operations via a {@link ConstraintKind#definition definition} constraint.&#xD;&#xA;The operation returns a reference to this &lt;code>Operation&lt;/code>.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
      <eParameters name="param" eType="#//Parameter"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="owningType" eType="#//Type"
        transient="true" eOpposite="#//Type/ownedOperation">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;Specifies the owner of this &lt;code>Operation&lt;/code>.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedParameter" upperBound="-1"
        eType="#//Parameter" containment="true" eOpposite="#//Parameter/operation">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;Specifies the {@link Parameter parameters} owned by this &lt;code>Operation&lt;/code>.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="inputParameter" upperBound="-1"
        eType="#//Parameter" changeable="false" volatile="true" transient="true" resolveProxies="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;This is the subset of all parameters with direction {@link ParameterDirectionKind#IN in} or {@link ParameterDirectionKind#INOUT inout}.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="outputParameter" upperBound="-1"
        eType="#//Parameter" changeable="false" volatile="true" transient="true" resolveProxies="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;This is the subset of all parameters with direction {@link ParameterDirectionKind#OUT out} or {@link ParameterDirectionKind#INOUT inout}.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="returnParameter" eType="#//Parameter"
        changeable="false" volatile="true" transient="true" resolveProxies="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;References the return parameter of this &lt;code>Operation&lt;/code>, if existent.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="signatureParameter" upperBound="-1"
        eType="#//Parameter" changeable="false" volatile="true" transient="true" resolveProxies="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;This is the subset of all parameters except the&#xD;&#xA;{@link ParameterDirectionKind#RETURN return}&#xD;&#xA;parameter.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Parameter" eSuperTypes="#//TypedElement #//NamedElement #//MultiplicityElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>&#xD;&#xA;A &lt;code>Parameter&lt;/code> is a specification of an argument used to pass information into or out of an invocation of an {@link Operation}.&#xD;&#xA;&lt;/p>"/>
    </eAnnotations>
    <eOperations name="asProperty" eType="#//Property">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;This is an additional operation defined in the OCL specification (Section 8.3.8). It results in a {@link Property} that has the same name, type, etc. as the parameter. This is necessary, for instance, to create tuple types from the out parameters of an {@link Operation}.&#xD;&#xA;&#xD;&#xA;The operation is specified as:&#xD;&#xA;&lt;pre>&#xD;&#xA;context Parameter::asProperty(): Property&#xD;&#xA;   pre: -- none&#xD;&#xA;   post: result.name = self.name&#xD;&#xA;   post: result.type = self.type&#xD;&#xA;   post: result.isOrdered = self.isOrdered&#xD;&#xA;   post: result.isMultiple = self.isMultiple&#xD;&#xA;   post: result.isUnique = self.isUnique&#xD;&#xA;   post: result.isStatic = false&#xD;&#xA;&lt;/pre>&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="kind" eType="#//ParameterDirectionKind"
        defaultValueLiteral="in">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;Specifies the {@link ParameterDirectionKind direction kind} of this &lt;code>Parameter&lt;/code>.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="operation" eType="#//Operation"
        transient="true" eOpposite="#//Operation/ownedParameter">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;References the {@link Operation} for which this is a formal parameter.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="ParameterDirectionKind">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>&#xD;&#xA;An enumeration type that defines literals used to specify direction of {@link Parameter parameters}.&#xD;&#xA;&lt;/p>"/>
    </eAnnotations>
    <eLiterals name="in">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;Indicates that parameter values are passed into the &#xD;&#xA;{@link Operation} by the caller.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="out" value="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;Indicates that parameter values are passed from an &#xD;&#xA;{@link Operation} out to the caller.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="inout" value="2">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;Indicates that parameter values are passed into an {@link &#xD;&#xA;Operation} by the caller and then back out to&#xD;&#xA;the caller from the {@link Operation}.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="return" value="3">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;Indicates that parameter values are passed as return&#xD;&#xA;values from an {@link Operation} back to the caller.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eLiterals>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="GenericType" abstract="true" eSuperTypes="#//NamedElement">
    <eOperations name="bindTypedElement" lowerBound="1" eType="#//TypedElement">
      <eParameters name="parameters" lowerBound="1">
        <eGenericType eClassifier="ecore:EDataType datatypes.ecore#//Sequence">
          <eTypeArguments eClassifier="#//TypeParameter"/>
        </eGenericType>
      </eParameters>
      <eParameters name="types" lowerBound="1">
        <eGenericType eClassifier="ecore:EDataType datatypes.ecore#//Sequence">
          <eTypeArguments>
            <eUpperBound eClassifier="#//Type"/>
          </eTypeArguments>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="typedElement" eType="#//TypedElement"
        eOpposite="#//TypedElement/genericType"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ParameterGenericType" eSuperTypes="#//GenericType">
    <eStructuralFeatures xsi:type="ecore:EReference" name="typeParameter" eType="#//TypeParameter"
        resolveProxies="false"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ComplexGenericType" eSuperTypes="#//GenericType">
    <eOperations name="addTypeArgument" eType="#//ComplexGenericType">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;Adds a {@link TypeArgument} to this &lt;code>ComplexGenericType&lt;/code>.&#xD;&#xA;This operation is required to properly support cloning complex generic types.&#xD;&#xA;The operation returns a reference to this &lt;code>ComplexGenericType&lt;/code>.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
      <eParameters name="typeArgument" lowerBound="1" eType="#//TypeArgument"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="unboundType" eType="#//Type"
        resolveProxies="false"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="typeArgument" upperBound="-1"
        eType="#//TypeArgument" containment="true" resolveProxies="false" eOpposite="#//TypeArgument/owningGenericType"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="TypeParameter" eSuperTypes="#//NamedElement">
    <eStructuralFeatures xsi:type="ecore:EReference" name="genericElement" eType="#//GenericElement"
        resolveProxies="false" eOpposite="#//GenericElement/ownedTypeParameter"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="TypeArgument" eSuperTypes="#//TypedElement">
    <eStructuralFeatures xsi:type="ecore:EReference" name="owningGenericType" eType="#//ComplexGenericType"
        eOpposite="#//ComplexGenericType/typeArgument"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Constraint" eSuperTypes="#//NamedElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>&#xD;&#xA;A &lt;code>Constraint&lt;/code> is a condition or restriction &#xD;&#xA;expressed in natural language text or in a machine readable &#xD;&#xA;language for the purpose of declaring some of the &#xD;&#xA;semantics of an element. The semantics are specified via &#xD;&#xA;an associated {@link Expression}.&#xD;&#xA;&lt;/p>"/>
    </eAnnotations>
    <eOperations name="addConstrainedElement" lowerBound="1" eType="#//Constraint">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;Adds a {@link ConstrainableElement} to the constrained elements of&#xD;&#xA;this &lt;code>Constraint&lt;/code>. This operation is required to properly&#xD;&#xA;support cloning constraints. The operation returns a reference to this&#xD;&#xA;&lt;code>Constraint&lt;/code>.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
      <eParameters name="constrainedElement" lowerBound="1" eType="#//ConstrainableElement"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="kind" lowerBound="1" eType="#//ConstraintKind">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;This attribute determines the semantics of a constraint in &#xD;&#xA;relation to its {@link #getConstrainedElement() constrained &#xD;&#xA;elements}.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="namespace" eType="#//Namespace"
        transient="true" eOpposite="#//Namespace/ownedRule">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;This is the {@link Namespace} this constraint is contained &#xD;&#xA;in. Essentially, this is just a way of placing the constraint &#xD;&#xA;somewhere in the model that it is part of. Contrary to the &#xD;&#xA;UML specification, the namespace of a constraint need&#xD;&#xA;not to be the context where the constraint is evaluated.&#xD;&#xA;This is mainly due to the different notion of a namespace&#xD;&#xA;in the Pivot Model, i.e. a {@link Type} is not a namespace.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="specification" lowerBound="1"
        eType="#//Expression" containment="true" eOpposite="#//Expression/constraint">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;This is the specification of the constraint as an {@link &#xD;&#xA;Expression} in a human- or machine-readable language.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="constrainedElement" upperBound="-1"
        eType="#//ConstrainableElement" resolveProxies="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;This is the ordered set of {@link ConstrainableElement}s &#xD;&#xA;referenced by this Constraint.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="definedFeature" eType="#//Feature"
        resolveProxies="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;References the defined feature of a {@link &#xD;&#xA;ConstraintKind#DEFINITION} constraint.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="ConstraintKind">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>&#xD;&#xA;A &lt;code>ConstraintKind&lt;/code> determines the semantics &#xD;&#xA;of a {@link Constraint}.&#xD;&#xA;&lt;/p>"/>
    </eAnnotations>
    <eLiterals name="invariant">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;An invariant constraint is linked to a {@link Type}. It &#xD;&#xA;specifies invariants for the type, i.e. boolean conditions that &#xD;&#xA;must be true upon completion of every public operation, but &#xD;&#xA;not necessarily during the execution of operations.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="definition" value="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;A definition constraint is linked to a {@link Type} and is &#xD;&#xA;used to define {@link Property properties} or {@link &#xD;&#xA;Operation operations} for that type. Defining a property or &#xD;&#xA;operation this way means that every instance of the type &#xD;&#xA;holds a property or operation that conforms to the given &#xD;&#xA;definition.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="precondition" value="2">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;A precondition is a boolean expression that must be true at &#xD;&#xA;the moment when an {@link Operation} starts its execution;&#xD;&#xA;otherwise, the operation will not be executed.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="postcondition" value="3">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;A postcondition is a boolean expression that must be true at &#xD;&#xA;the moment when an {@link Operation} ends its execution; &#xD;&#xA;otherwise, the operation has not executed correctly.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="initial" value="4">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;A constraint with the kind &lt;em>initial&lt;/em> specifies the &#xD;&#xA;value of a {@link Property} at the moment an instance of a &#xD;&#xA;{@link Type} is created.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="derived" value="5">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;A derivation rule specifies that the value of a {@link &#xD;&#xA;Property} should always be equal to the value given by the &#xD;&#xA;constraint expression.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="body" value="6">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;An {@link Operation} can be fully defined by specifying the &#xD;&#xA;result of the operation in a single expression. Commonly, &#xD;&#xA;operations specified using a body constraint do not have &#xD;&#xA;side effects; i.e. they are pure query operations returning a &#xD;&#xA;value or a set of values.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eLiterals>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Expression">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>&#xD;&#xA;An &lt;code>Expression&lt;/code> contains a language-&#xD;&#xA;specific text string used to describe a value or values, and &#xD;&#xA;an optional specification of the language. One predefined &#xD;&#xA;language for specifying expressions is OCL. Natural &#xD;&#xA;language or programming languages may also be&#xD;&#xA;used.&#xD;&#xA;Contrary to the UML specification, the Pivot Model only &#xD;&#xA;permits one body string for each expression. This is &#xD;&#xA;because the Pivot Model has been designed with an OCL&#xD;&#xA;integration in mind.&#xD;&#xA;&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="body" eType="ecore:EDataType datatypes.ecore#//String">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;This is the uninterpreted text of the expression.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="language" eType="ecore:EDataType datatypes.ecore#//String">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;The language the expression is written in. &#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="constraint" eType="#//Constraint"
        transient="true" eOpposite="#//Constraint/specification"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EDataType" name="CloneNotSupportedException" instanceClassName="java.lang.CloneNotSupportedException"
      serializable="false"/>
</ecore:EPackage>
