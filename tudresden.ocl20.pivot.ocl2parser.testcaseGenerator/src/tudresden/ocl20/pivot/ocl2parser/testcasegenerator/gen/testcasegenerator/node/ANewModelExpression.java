/* This file was generated by SableCC (http://www.sablecc.org/). */

package tudresden.ocl20.pivot.ocl2parser.testcasegenerator.gen.testcasegenerator.node;

import java.util.*;
import tudresden.ocl20.pivot.ocl2parser.testcasegenerator.gen.testcasegenerator.analysis.*;

public final class ANewModelExpression extends PModelExpression
{
    private TNew _new_;
    private TIdent _ident_;
    private TOpenparen _openparen_;
    private PParameters _parameters_;
    private TCloseparen _closeparen_;

    public ANewModelExpression()
    {
    }

    public ANewModelExpression(
        TNew _new_,
        TIdent _ident_,
        TOpenparen _openparen_,
        PParameters _parameters_,
        TCloseparen _closeparen_)
    {
        setNew(_new_);

        setIdent(_ident_);

        setOpenparen(_openparen_);

        setParameters(_parameters_);

        setCloseparen(_closeparen_);

    }
    public Object clone()
    {
        return new ANewModelExpression(
            (TNew) cloneNode(_new_),
            (TIdent) cloneNode(_ident_),
            (TOpenparen) cloneNode(_openparen_),
            (PParameters) cloneNode(_parameters_),
            (TCloseparen) cloneNode(_closeparen_));
    }

    public void apply(Switch sw) {
        ((Analysis) sw).caseANewModelExpression(this);
    }

    public Object apply(SwitchWithReturn sw, Object param) throws AttrEvalException {
        return ((AnalysisWithReturn) sw).caseANewModelExpression(this, param);
    }

    public TNew getNew()
    {
        return _new_;
    }

    public void setNew(TNew node)
    {
        if(_new_ != null)
        {
            _new_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _new_ = node;
    }

    public TIdent getIdent()
    {
        return _ident_;
    }

    public void setIdent(TIdent node)
    {
        if(_ident_ != null)
        {
            _ident_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _ident_ = node;
    }

    public TOpenparen getOpenparen()
    {
        return _openparen_;
    }

    public void setOpenparen(TOpenparen node)
    {
        if(_openparen_ != null)
        {
            _openparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _openparen_ = node;
    }

    public PParameters getParameters()
    {
        return _parameters_;
    }

    public void setParameters(PParameters node)
    {
        if(_parameters_ != null)
        {
            _parameters_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _parameters_ = node;
    }

    public TCloseparen getCloseparen()
    {
        return _closeparen_;
    }

    public void setCloseparen(TCloseparen node)
    {
        if(_closeparen_ != null)
        {
            _closeparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _closeparen_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_new_)
            + toString(_ident_)
            + toString(_openparen_)
            + toString(_parameters_)
            + toString(_closeparen_);
    }

    void removeChild(Node child)
    {
        if(_new_ == child)
        {
            _new_ = null;
            return;
        }

        if(_ident_ == child)
        {
            _ident_ = null;
            return;
        }

        if(_openparen_ == child)
        {
            _openparen_ = null;
            return;
        }

        if(_parameters_ == child)
        {
            _parameters_ = null;
            return;
        }

        if(_closeparen_ == child)
        {
            _closeparen_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_new_ == oldChild)
        {
            setNew((TNew) newChild);
            return;
        }

        if(_ident_ == oldChild)
        {
            setIdent((TIdent) newChild);
            return;
        }

        if(_openparen_ == oldChild)
        {
            setOpenparen((TOpenparen) newChild);
            return;
        }

        if(_parameters_ == oldChild)
        {
            setParameters((PParameters) newChild);
            return;
        }

        if(_closeparen_ == oldChild)
        {
            setCloseparen((TCloseparen) newChild);
            return;
        }

    }
}
