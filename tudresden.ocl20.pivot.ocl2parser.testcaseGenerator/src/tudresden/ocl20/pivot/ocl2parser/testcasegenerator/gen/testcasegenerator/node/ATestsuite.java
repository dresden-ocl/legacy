/* This file was generated by SableCC (http://www.sablecc.org/). */

package tudresden.ocl20.pivot.ocl2parser.testcasegenerator.gen.testcasegenerator.node;

import java.util.*;
import tudresden.ocl20.pivot.ocl2parser.testcasegenerator.gen.testcasegenerator.analysis.*;

public final class ATestsuite extends PTestsuite
{
    private PNames _names_;
    private PPackageDeclaration _packageDeclaration_;
    private final LinkedList _suiteElement_ = new TypedLinkedList(new SuiteElement_Cast());

    public ATestsuite()
    {
    }

    public ATestsuite(
        PNames _names_,
        PPackageDeclaration _packageDeclaration_,
        List _suiteElement_)
    {
        setNames(_names_);

        setPackageDeclaration(_packageDeclaration_);

        {
            this._suiteElement_.clear();
            this._suiteElement_.addAll(_suiteElement_);
        }

    }

    public ATestsuite(
        PNames _names_,
        PPackageDeclaration _packageDeclaration_,
        XPSuiteElement _suiteElement_)
    {
        setNames(_names_);

        setPackageDeclaration(_packageDeclaration_);

        if(_suiteElement_ != null)
        {
            while(_suiteElement_ instanceof X1PSuiteElement)
            {
                this._suiteElement_.addFirst(((X1PSuiteElement) _suiteElement_).getPSuiteElement());
                _suiteElement_ = ((X1PSuiteElement) _suiteElement_).getXPSuiteElement();
            }
            this._suiteElement_.addFirst(((X2PSuiteElement) _suiteElement_).getPSuiteElement());
        }

    }
    public Object clone()
    {
        return new ATestsuite(
            (PNames) cloneNode(_names_),
            (PPackageDeclaration) cloneNode(_packageDeclaration_),
            cloneList(_suiteElement_));
    }

    public void apply(Switch sw) {
        ((Analysis) sw).caseATestsuite(this);
    }

    public Object apply(SwitchWithReturn sw, Object param) throws AttrEvalException {
        return ((AnalysisWithReturn) sw).caseATestsuite(this, param);
    }

    public PNames getNames()
    {
        return _names_;
    }

    public void setNames(PNames node)
    {
        if(_names_ != null)
        {
            _names_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _names_ = node;
    }

    public PPackageDeclaration getPackageDeclaration()
    {
        return _packageDeclaration_;
    }

    public void setPackageDeclaration(PPackageDeclaration node)
    {
        if(_packageDeclaration_ != null)
        {
            _packageDeclaration_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _packageDeclaration_ = node;
    }

    public LinkedList getSuiteElement()
    {
        return _suiteElement_;
    }

    public void setSuiteElement(List list)
    {
        _suiteElement_.clear();
        _suiteElement_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_names_)
            + toString(_packageDeclaration_)
            + toString(_suiteElement_);
    }

    void removeChild(Node child)
    {
        if(_names_ == child)
        {
            _names_ = null;
            return;
        }

        if(_packageDeclaration_ == child)
        {
            _packageDeclaration_ = null;
            return;
        }

        if(_suiteElement_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_names_ == oldChild)
        {
            setNames((PNames) newChild);
            return;
        }

        if(_packageDeclaration_ == oldChild)
        {
            setPackageDeclaration((PPackageDeclaration) newChild);
            return;
        }

        for(ListIterator i = _suiteElement_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class SuiteElement_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PSuiteElement node = (PSuiteElement) o;

            if((node.parent() != null) &&
                (node.parent() != ATestsuite.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != ATestsuite.this))
            {
                node.parent(ATestsuite.this);
            }

            return node;
        }
    }
}
