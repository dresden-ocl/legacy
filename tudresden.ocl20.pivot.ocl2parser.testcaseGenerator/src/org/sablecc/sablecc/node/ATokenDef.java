/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.sablecc.node;

import java.util.*;

import org.sablecc.sablecc.analysis.*;
import org.sablecc.sablecc.node.ATokenDef;
import org.sablecc.sablecc.node.Node;
import org.sablecc.sablecc.node.PAstType;
import org.sablecc.sablecc.node.PLookAhead;
import org.sablecc.sablecc.node.PRegExp;
import org.sablecc.sablecc.node.PStateList;
import org.sablecc.sablecc.node.PTokenDef;
import org.sablecc.sablecc.node.Switch;
import org.sablecc.sablecc.node.TEqual;
import org.sablecc.sablecc.node.TExclam;
import org.sablecc.sablecc.node.TId;
import org.sablecc.sablecc.node.TSemicolon;



public final class ATokenDef extends PTokenDef
{
    private PStateList _stateList_;
    private TExclam _exclam_;
    private TId _id_;
    private PAstType _astType_;
    private TEqual _equal_;
    private PRegExp _regExp_;
    private PLookAhead _lookAhead_;
    private TSemicolon _semicolon_;

    public ATokenDef()
    {
    }

    public ATokenDef(
        PStateList _stateList_,
        TExclam _exclam_,
        TId _id_,
        PAstType _astType_,
        TEqual _equal_,
        PRegExp _regExp_,
        PLookAhead _lookAhead_,
        TSemicolon _semicolon_)
    {
        setStateList(_stateList_);

        setExclam(_exclam_);

        setId(_id_);

        setAstType(_astType_);

        setEqual(_equal_);

        setRegExp(_regExp_);

        setLookAhead(_lookAhead_);

        setSemicolon(_semicolon_);

    }
    public Object clone()
    {
        return new ATokenDef(
            (PStateList) cloneNode(_stateList_),
            (TExclam) cloneNode(_exclam_),
            (TId) cloneNode(_id_),
            (PAstType) cloneNode(_astType_),
            (TEqual) cloneNode(_equal_),
            (PRegExp) cloneNode(_regExp_),
            (PLookAhead) cloneNode(_lookAhead_),
            (TSemicolon) cloneNode(_semicolon_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATokenDef(this);
    }

    public PStateList getStateList()
    {
        return _stateList_;
    }

    public void setStateList(PStateList node)
    {
        if(_stateList_ != null)
        {
            _stateList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _stateList_ = node;
    }

    public TExclam getExclam()
    {
        return _exclam_;
    }

    public void setExclam(TExclam node)
    {
        if(_exclam_ != null)
        {
            _exclam_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _exclam_ = node;
    }

    public TId getId()
    {
        return _id_;
    }

    public void setId(TId node)
    {
        if(_id_ != null)
        {
            _id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _id_ = node;
    }

    public PAstType getAstType()
    {
        return _astType_;
    }

    public void setAstType(PAstType node)
    {
        if(_astType_ != null)
        {
            _astType_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _astType_ = node;
    }

    public TEqual getEqual()
    {
        return _equal_;
    }

    public void setEqual(TEqual node)
    {
        if(_equal_ != null)
        {
            _equal_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _equal_ = node;
    }

    public PRegExp getRegExp()
    {
        return _regExp_;
    }

    public void setRegExp(PRegExp node)
    {
        if(_regExp_ != null)
        {
            _regExp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _regExp_ = node;
    }

    public PLookAhead getLookAhead()
    {
        return _lookAhead_;
    }

    public void setLookAhead(PLookAhead node)
    {
        if(_lookAhead_ != null)
        {
            _lookAhead_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lookAhead_ = node;
    }

    public TSemicolon getSemicolon()
    {
        return _semicolon_;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _semicolon_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_stateList_)
            + toString(_exclam_)
            + toString(_id_)
            + toString(_astType_)
            + toString(_equal_)
            + toString(_regExp_)
            + toString(_lookAhead_)
            + toString(_semicolon_);
    }

    void removeChild(Node child)
    {
        if(_stateList_ == child)
        {
            _stateList_ = null;
            return;
        }

        if(_exclam_ == child)
        {
            _exclam_ = null;
            return;
        }

        if(_id_ == child)
        {
            _id_ = null;
            return;
        }

        if(_astType_ == child)
        {
            _astType_ = null;
            return;
        }

        if(_equal_ == child)
        {
            _equal_ = null;
            return;
        }

        if(_regExp_ == child)
        {
            _regExp_ = null;
            return;
        }

        if(_lookAhead_ == child)
        {
            _lookAhead_ = null;
            return;
        }

        if(_semicolon_ == child)
        {
            _semicolon_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_stateList_ == oldChild)
        {
            setStateList((PStateList) newChild);
            return;
        }

        if(_exclam_ == oldChild)
        {
            setExclam((TExclam) newChild);
            return;
        }

        if(_id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(_astType_ == oldChild)
        {
            setAstType((PAstType) newChild);
            return;
        }

        if(_equal_ == oldChild)
        {
            setEqual((TEqual) newChild);
            return;
        }

        if(_regExp_ == oldChild)
        {
            setRegExp((PRegExp) newChild);
            return;
        }

        if(_lookAhead_ == oldChild)
        {
            setLookAhead((PLookAhead) newChild);
            return;
        }

        if(_semicolon_ == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

    }
}
