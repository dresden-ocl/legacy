/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.sablecc.node;

import java.util.*;

import org.sablecc.sablecc.analysis.*;
import org.sablecc.sablecc.node.AIgnTokens;
import org.sablecc.sablecc.node.Node;
import org.sablecc.sablecc.node.PIdList;
import org.sablecc.sablecc.node.PIgnTokens;
import org.sablecc.sablecc.node.Switch;
import org.sablecc.sablecc.node.TIgnored;
import org.sablecc.sablecc.node.TSemicolon;
import org.sablecc.sablecc.node.TTokens;



public final class AIgnTokens extends PIgnTokens
{
    private TIgnored _ignored_;
    private TTokens _tokens_;
    private PIdList _idList_;
    private TSemicolon _semicolon_;

    public AIgnTokens()
    {
    }

    public AIgnTokens(
        TIgnored _ignored_,
        TTokens _tokens_,
        PIdList _idList_,
        TSemicolon _semicolon_)
    {
        setIgnored(_ignored_);

        setTokens(_tokens_);

        setIdList(_idList_);

        setSemicolon(_semicolon_);

    }
    public Object clone()
    {
        return new AIgnTokens(
            (TIgnored) cloneNode(_ignored_),
            (TTokens) cloneNode(_tokens_),
            (PIdList) cloneNode(_idList_),
            (TSemicolon) cloneNode(_semicolon_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIgnTokens(this);
    }

    public TIgnored getIgnored()
    {
        return _ignored_;
    }

    public void setIgnored(TIgnored node)
    {
        if(_ignored_ != null)
        {
            _ignored_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _ignored_ = node;
    }

    public TTokens getTokens()
    {
        return _tokens_;
    }

    public void setTokens(TTokens node)
    {
        if(_tokens_ != null)
        {
            _tokens_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _tokens_ = node;
    }

    public PIdList getIdList()
    {
        return _idList_;
    }

    public void setIdList(PIdList node)
    {
        if(_idList_ != null)
        {
            _idList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _idList_ = node;
    }

    public TSemicolon getSemicolon()
    {
        return _semicolon_;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _semicolon_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_ignored_)
            + toString(_tokens_)
            + toString(_idList_)
            + toString(_semicolon_);
    }

    void removeChild(Node child)
    {
        if(_ignored_ == child)
        {
            _ignored_ = null;
            return;
        }

        if(_tokens_ == child)
        {
            _tokens_ = null;
            return;
        }

        if(_idList_ == child)
        {
            _idList_ = null;
            return;
        }

        if(_semicolon_ == child)
        {
            _semicolon_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_ignored_ == oldChild)
        {
            setIgnored((TIgnored) newChild);
            return;
        }

        if(_tokens_ == oldChild)
        {
            setTokens((TTokens) newChild);
            return;
        }

        if(_idList_ == oldChild)
        {
            setIdList((PIdList) newChild);
            return;
        }

        if(_semicolon_ == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

    }
}
