<?xml version="1.0" encoding="UTF-8" standalone="no"?><TracerItems><TracerItem expression="ConstraintImpl[name=,kind=definition,specification=ExpressionInOclImpl[body=&#13;&#10;def: testSortedBy(): Sequence(Integer) =&#13;&#10;/* Expected as Bag { 1, 2, 3 }. */&#13;&#10;Bag { 3, 2, 1 } -&gt; sortedBy(element: Integer | element) ,language=&lt;null&gt;,context=VariableImpl[name=self,type=JavaClass[name=Class1,namespace=JavaPackage[name=package1]],genericType=&lt;null&gt;],result=&lt;null&gt;,parameter=[]],constrainedElement=[JavaClass[name=Class1,namespace=JavaPackage[name=package1]]],definedFeature=OperationImpl[name=testSortedBy,type=SequenceTypeImpl[name=Sequence(Integer),namespace=&lt;null&gt;,elementType=PrimitiveTypeImpl[name=Integer,namespace=&lt;null&gt;,kind=Integer],kind=Sequence],genericType=&lt;null&gt;,static=false]]" result="JavaOclSequence[JavaOclInteger[1], JavaOclInteger[2], JavaOclInteger[3]]"><TracerItem expression="ExpressionInOclImpl[body=&#13;&#10;def: testSortedBy(): Sequence(Integer) =&#13;&#10;/* Expected as Bag { 1, 2, 3 }. */&#13;&#10;Bag { 3, 2, 1 } -&gt; sortedBy(element: Integer | element) ,language=&lt;null&gt;,context=VariableImpl[name=self,type=JavaClass[name=Class1,namespace=JavaPackage[name=package1]],genericType=&lt;null&gt;],result=&lt;null&gt;,parameter=[]]" result="JavaOclSequence[JavaOclInteger[1], JavaOclInteger[2], JavaOclInteger[3]]"><TracerItem expression="IteratorExpImpl[name=sortedBy,type=SequenceTypeImpl[name=Sequence(Integer),namespace=&lt;null&gt;,elementType=PrimitiveTypeImpl[name=Integer,namespace=&lt;null&gt;,kind=Integer],kind=Sequence],genericType=&lt;null&gt;]" result="JavaOclSequence[JavaOclInteger[1], JavaOclInteger[2], JavaOclInteger[3]]"><TracerItem expression="CollectionLiteralExpImpl[name=,type=BagTypeImpl[name=Bag(Integer),namespace=&lt;null&gt;,elementType=PrimitiveTypeImpl[name=Integer,namespace=&lt;null&gt;,kind=Integer],kind=Bag],genericType=&lt;null&gt;,kind=Bag]" result="JavaOclBag[JavaOclInteger[3], JavaOclInteger[2], JavaOclInteger[1]]"><TracerItem expression="CollectionItemImpl[name=,type=PrimitiveTypeImpl[name=Integer,namespace=&lt;null&gt;,kind=Integer],genericType=&lt;null&gt;]" result="JavaOclInteger[3]"><TracerItem expression="IntegerLiteralExpImpl[name=,type=PrimitiveTypeImpl[name=Integer,namespace=&lt;null&gt;,kind=Integer],genericType=&lt;null&gt;,integerSymbol=3]" result="JavaOclInteger[3]"/></TracerItem><TracerItem expression="CollectionItemImpl[name=,type=PrimitiveTypeImpl[name=Integer,namespace=&lt;null&gt;,kind=Integer],genericType=&lt;null&gt;]" result="JavaOclInteger[2]"><TracerItem expression="IntegerLiteralExpImpl[name=,type=PrimitiveTypeImpl[name=Integer,namespace=&lt;null&gt;,kind=Integer],genericType=&lt;null&gt;,integerSymbol=2]" result="JavaOclInteger[2]"/></TracerItem><TracerItem expression="CollectionItemImpl[name=,type=PrimitiveTypeImpl[name=Integer,namespace=&lt;null&gt;,kind=Integer],genericType=&lt;null&gt;]" result="JavaOclInteger[1]"><TracerItem expression="IntegerLiteralExpImpl[name=,type=PrimitiveTypeImpl[name=Integer,namespace=&lt;null&gt;,kind=Integer],genericType=&lt;null&gt;,integerSymbol=1]" result="JavaOclInteger[1]"/></TracerItem></TracerItem><TracerItem expression="VariableImpl[name=element,type=PrimitiveTypeImpl[name=Integer,namespace=&lt;null&gt;,kind=Integer],genericType=&lt;null&gt;]" result="JavaOclInteger[3]"/><TracerItem expression="VariableImpl[name=element,type=PrimitiveTypeImpl[name=Integer,namespace=&lt;null&gt;,kind=Integer],genericType=&lt;null&gt;]" result="JavaOclInteger[2]"/><TracerItem expression="VariableImpl[name=element,type=PrimitiveTypeImpl[name=Integer,namespace=&lt;null&gt;,kind=Integer],genericType=&lt;null&gt;]" result="JavaOclInteger[1]"/></TracerItem></TracerItem></TracerItem></TracerItems>