\BOOKMARK [0][-]{section*.5}{Abstract}{}
\BOOKMARK [-1][-]{section*.7}{Using Dresden OCL2 for Eclipse}{}
\BOOKMARK [0][-]{chapter.1}{1 Getting started with Dresden OCL2 for Eclipse}{section*.7}
\BOOKMARK [1][-]{section.1.1}{1.1 How to Install Dresden OCL2 for Eclipse}{chapter.1}
\BOOKMARK [2][-]{subsection.1.1.1}{1.1.1 Installing Dresden OCL2 for Eclipse using the Eclipse Update Site}{section.1.1}
\BOOKMARK [2][-]{subsection.1.1.2}{1.1.2 Importing Dresden OCL2 for Eclipse from the SVN}{section.1.1}
\BOOKMARK [2][-]{subsection.1.1.3}{1.1.3 Which Plug-ins do I need at least?}{section.1.1}
\BOOKMARK [2][-]{subsection.1.1.4}{1.1.4 Building the OCL2 Parser}{section.1.1}
\BOOKMARK [1][-]{section.1.2}{1.2 Loading Models, Model Instances and Constraints}{chapter.1}
\BOOKMARK [2][-]{subsection.1.2.1}{1.2.1 The Simple Example}{section.1.2}
\BOOKMARK [2][-]{subsection.1.2.2}{1.2.2 Loading a Domain-Specific Model}{section.1.2}
\BOOKMARK [2][-]{subsection.1.2.3}{1.2.3 Loading a Model Instance}{section.1.2}
\BOOKMARK [2][-]{subsection.1.2.4}{1.2.4 Parsing OCL expressions}{section.1.2}
\BOOKMARK [1][-]{section.1.3}{1.3 Standalone Application}{chapter.1}
\BOOKMARK [1][-]{section.1.4}{1.4 Summary}{chapter.1}
\BOOKMARK [0][-]{chapter.2}{2 OCL Constraint Interpretation}{section*.7}
\BOOKMARK [1][-]{section.2.1}{2.1 The Simple Example}{chapter.2}
\BOOKMARK [1][-]{section.2.2}{2.2 Preparation of the Interpretation}{chapter.2}
\BOOKMARK [1][-]{section.2.3}{2.3 OCL Interpretation}{chapter.2}
\BOOKMARK [2][-]{subsection.2.3.1}{2.3.1 Interpretation of Constraints}{section.2.3}
\BOOKMARK [2][-]{subsection.2.3.2}{2.3.2 Preparation of Constraints}{section.2.3}
\BOOKMARK [2][-]{subsection.2.3.3}{2.3.3 Adding Variables to the Environment}{section.2.3}
\BOOKMARK [1][-]{section.2.4}{2.4 Summary}{chapter.2}
\BOOKMARK [0][-]{chapter.3}{3 AspectJ Code Generation}{section*.7}
\BOOKMARK [1][-]{section.3.1}{3.1 Code Generator Preparation}{chapter.3}
\BOOKMARK [1][-]{section.3.2}{3.2 Code Generation}{chapter.3}
\BOOKMARK [2][-]{subsection.3.2.1}{3.2.1 Selecting a Model}{section.3.2}
\BOOKMARK [2][-]{subsection.3.2.2}{3.2.2 Selecting Constraints}{section.3.2}
\BOOKMARK [2][-]{subsection.3.2.3}{3.2.3 Selecting a Target Directory}{section.3.2}
\BOOKMARK [2][-]{subsection.3.2.4}{3.2.4 Specifying General Settings}{section.3.2}
\BOOKMARK [2][-]{subsection.3.2.5}{3.2.5 Constraint-Specific Settings}{section.3.2}
\BOOKMARK [1][-]{section.3.3}{3.3 The Generated Code}{chapter.3}
\BOOKMARK [1][-]{section.3.4}{3.4 Summary}{chapter.3}
\BOOKMARK [-1][-]{section*.9}{Development with Dresden OCL2 for Eclipse}{}
\BOOKMARK [0][-]{chapter.4}{4 The Architecture of Dresden OCL2 for Eclipse}{section*.9}
\BOOKMARK [1][-]{section.4.1}{4.1 The Generic Three Layer Metadata Architecture}{chapter.4}
\BOOKMARK [1][-]{section.4.2}{4.2 The Toolkit's Package Architecture}{chapter.4}
\BOOKMARK [1][-]{section.4.3}{4.3 Dresden OCL2 for Eclipse and the Generic Three Layer Metadata Architecture}{chapter.4}
\BOOKMARK [2][-]{subsection.4.3.1}{4.3.1 The Adaptation of Meta-Models, Models and Model Instances}{section.4.3}
\BOOKMARK [2][-]{subsection.4.3.2}{4.3.2 How Meta-Models and Models are Adapted}{section.4.3}
\BOOKMARK [2][-]{subsection.4.3.3}{4.3.3 How Model Instances are Adapted}{section.4.3}
\BOOKMARK [2][-]{subsection.4.3.4}{4.3.4 Coupling between Models and their Instances}{section.4.3}
\BOOKMARK [2][-]{subsection.4.3.5}{4.3.5 Essential OCL and OCL Constraints}{section.4.3}
\BOOKMARK [2][-]{subsection.4.3.6}{4.3.6 The OCL Standard Library}{section.4.3}
\BOOKMARK [1][-]{section.4.4}{4.4 Summary}{chapter.4}
\BOOKMARK [0][-]{chapter.5}{5 How to integrate Dresden OCL2 for Eclipse}{section*.9}
\BOOKMARK [1][-]{section.5.1}{5.1 The Integration Facade of Dresden OCL2 for Eclipse}{chapter.5}
\BOOKMARK [1][-]{section.5.2}{5.2 How to access Meta-Models, Models and Instances}{chapter.5}
\BOOKMARK [2][-]{subsection.5.2.1}{5.2.1 The Meta-Model Registry}{section.5.2}
\BOOKMARK [2][-]{subsection.5.2.2}{5.2.2 How to load a Model}{section.5.2}
\BOOKMARK [2][-]{subsection.5.2.3}{5.2.3 The Model Instance Type Registry}{section.5.2}
\BOOKMARK [2][-]{subsection.5.2.4}{5.2.4 How to load a Model Instance}{section.5.2}
\BOOKMARK [1][-]{section.5.3}{5.3 How to access the OCL2 Parser}{chapter.5}
\BOOKMARK [1][-]{section.5.4}{5.4 How to access the OCL2 Interpreter}{chapter.5}
\BOOKMARK [1][-]{section.5.5}{5.5 Summary}{chapter.5}
\BOOKMARK [0][-]{chapter.6}{6 Standalone \205 Using DresdenOCL outside of Eclipse}{section*.9}
\BOOKMARK [1][-]{section.6.1}{6.1 The Example Application}{chapter.6}
\BOOKMARK [2][-]{subsection.6.1.1}{6.1.1 Classpath}{section.6.1}
\BOOKMARK [2][-]{subsection.6.1.2}{6.1.2 Resources}{section.6.1}
\BOOKMARK [2][-]{subsection.6.1.3}{6.1.3 Logging}{section.6.1}
\BOOKMARK [2][-]{subsection.6.1.4}{6.1.4 Using the Example}{section.6.1}
\BOOKMARK [1][-]{section.6.2}{6.2 The Standalone Facade}{chapter.6}
\BOOKMARK [2][-]{subsection.6.2.1}{6.2.1 Classpath and OCL Standard Library}{section.6.2}
\BOOKMARK [2][-]{subsection.6.2.2}{6.2.2 Adding and Removing Methods}{section.6.2}
\BOOKMARK [1][-]{section.6.3}{6.3 Summary}{chapter.6}
\BOOKMARK [0][-]{chapter.7}{7 Adapting a Meta-Model to the Pivot Model}{section*.9}
\BOOKMARK [1][-]{section.7.1}{7.1 The Adapter Code generation}{chapter.7}
\BOOKMARK [1][-]{section.7.2}{7.2 Summary}{chapter.7}
\BOOKMARK [0][-]{chapter.8}{8 Adapting a Model Implementation Type to Dresden OCL2 for Eclipse}{section*.9}
\BOOKMARK [1][-]{section.8.1}{8.1 The different types of Model Instance Elements}{chapter.8}
\BOOKMARK [2][-]{subsection.8.1.1}{8.1.1 The IModelInstanceElement Interface}{section.8.1}
\BOOKMARK [2][-]{subsection.8.1.2}{8.1.2 The Adaptation of Model Instance Objects}{section.8.1}
\BOOKMARK [2][-]{subsection.8.1.3}{8.1.3 The Adaptation of Primitive Type Instances}{section.8.1}
\BOOKMARK [2][-]{subsection.8.1.4}{8.1.4 The Adaptation of Collections}{section.8.1}
\BOOKMARK [2][-]{subsection.8.1.5}{8.1.5 IModelInstanceEnumerationLiteral}{section.8.1}
\BOOKMARK [2][-]{subsection.8.1.6}{8.1.6 IModelInstanceTuple}{section.8.1}
\BOOKMARK [2][-]{subsection.8.1.7}{8.1.7 IModelInstanceVoid and IModelInstanceInvalid}{section.8.1}
\BOOKMARK [1][-]{section.8.2}{8.2 The IModelInstanceProvider Interface}{chapter.8}
\BOOKMARK [2][-]{subsection.8.2.1}{8.2.1 getModelInstance\(URL, IModel\)}{section.8.2}
\BOOKMARK [2][-]{subsection.8.2.2}{8.2.2 createEmptyModelInstance\(IModel\)}{section.8.2}
\BOOKMARK [1][-]{section.8.3}{8.3 The IModelInstance Interface}{chapter.8}
\BOOKMARK [2][-]{subsection.8.3.1}{8.3.1 The Constructor}{section.8.3}
\BOOKMARK [2][-]{subsection.8.3.2}{8.3.2 addModelInstanceElement\(IModelInstanceElement\)}{section.8.3}
\BOOKMARK [2][-]{subsection.8.3.3}{8.3.3 getStaticProperty\(Property\)}{section.8.3}
\BOOKMARK [2][-]{subsection.8.3.4}{8.3.4 invokeStaticOperation\(Operation, List<IModelInstanceElement>\)}{section.8.3}
\BOOKMARK [1][-]{section.8.4}{8.4 The IModelInstanceFactory Interface}{chapter.8}
\BOOKMARK [1][-]{section.8.5}{8.5 Adapting an own Model Implementation Type}{chapter.8}
\BOOKMARK [0][-]{chapter.9}{9 The Logging Mechanism of Dresden OCL2 for Eclipse}{section*.9}
\BOOKMARK [0][-]{chapter.10}{10 The Extensible Test Suite of Dresden OCL2 for Eclipse}{section*.9}
\BOOKMARK [0][-]{chapter.11}{11 The Generic Meta-Model Test Suite}{section*.9}
\BOOKMARK [1][-]{section.11.1}{11.1 The Test Suite Plug-in}{chapter.11}
\BOOKMARK [1][-]{section.11.2}{11.2 The required Model to test a Meta-Model}{chapter.11}
\BOOKMARK [2][-]{subsection.11.2.1}{11.2.1 TestTypeClass1 and TestTypeClass2}{section.11.2}
\BOOKMARK [2][-]{subsection.11.2.2}{11.2.2 TestTypeInterface1 and TestTypeInterface2}{section.11.2}
\BOOKMARK [2][-]{subsection.11.2.3}{11.2.3 TestEnumeration}{section.11.2}
\BOOKMARK [2][-]{subsection.11.2.4}{11.2.4 TestPrimitiveTypeClass}{section.11.2}
\BOOKMARK [2][-]{subsection.11.2.5}{11.2.5 TestPropertyClass}{section.11.2}
\BOOKMARK [2][-]{subsection.11.2.6}{11.2.6 TestOperationAndParameterClass}{section.11.2}
\BOOKMARK [1][-]{section.11.3}{11.3 Instantiating the Generic Test Suite}{chapter.11}
\BOOKMARK [1][-]{section.11.4}{11.4 Summary}{chapter.11}
\BOOKMARK [0][-]{chapter.12}{12 The Generic Model Implementation Type Test Suite}{section*.9}
\BOOKMARK [1][-]{section.12.1}{12.1 The Test Suite Plug-in}{chapter.12}
\BOOKMARK [1][-]{section.12.2}{12.2 The required Model Instance to test a Meta-Model}{chapter.12}
\BOOKMARK [2][-]{subsection.12.2.1}{12.2.1 The ContainerClass}{section.12.2}
\BOOKMARK [2][-]{subsection.12.2.2}{12.2.2 Class1}{section.12.2}
\BOOKMARK [2][-]{subsection.12.2.3}{12.2.3 Class2}{section.12.2}
\BOOKMARK [2][-]{subsection.12.2.4}{12.2.4 Interface1, Interface2 and Interface3}{section.12.2}
\BOOKMARK [2][-]{subsection.12.2.5}{12.2.5 PrimitiveTypeProviderClass, CollectionTypeProviderClass and EnumerationLiteralProviderClass}{section.12.2}
\BOOKMARK [2][-]{subsection.12.2.6}{12.2.6 StaticPropertyAndOperationClass}{section.12.2}
\BOOKMARK [2][-]{subsection.12.2.7}{12.2.7 Copyable- and NonCopyableClass}{section.12.2}
\BOOKMARK [1][-]{section.12.3}{12.3 Instantiating the Generic Test Suite}{chapter.12}
\BOOKMARK [1][-]{section.12.4}{12.4 Summary}{chapter.12}
\BOOKMARK [-1][-]{section*.25}{Appendix}{}
\BOOKMARK [0][-]{section*.26}{Tables}{section*.25}
\BOOKMARK [0][-]{section*.28}{List of Figures}{section*.25}
\BOOKMARK [0][-]{section*.30}{List of Listings}{section*.25}
\BOOKMARK [0][-]{section*.32}{List of Abbreviations}{section*.25}
\BOOKMARK [0][-]{section*.34}{References}{section*.25}
