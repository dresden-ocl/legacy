Instructions for Dresden OCL
============================
Dresden OCL is organized as a group of Eclipse Plug-ins.


How to run Dresden OCL
======================
Dresden OCL2 for Eclipse is distributed as source code and binary jar archives. 
How to run the toolkit in both situation is explained below.

a) How to run a source code distribution

Follow the steps listed in the detailed description below. Afterwards you 
can run the plug-ins in a new Eclipse instance.

b) How to run a binary distribution

If you got a binary distribution, copy the jars located in the directory 'eclipse/plugins' into the
'plugins' directory of your eclipse distribution.

For further details look into the tutorials provided in the directory 'doc'.

More information about the Dresden OCL is also available at the Toolkit Website
(http://dresden-ocl.sourceforge.net/).


Detailed steps for running the source code distribution
=======================================================

For this guide, Eclipse 3.7 has been used.

Installation:

1.1. We recommend using Subclipse 1.6 since we were facing some problems
	with Subversive and svn+ssh. The version from the Eclipse Marketplace
	does not (yet) come with a SVNKit connector and the JavaHL connector
	caused problems too.

1.2. Help -> Install New Software... -> Subclipse 1.6 -> Select All  

2. Window -> Preferences -> Team -> SVN -> SVN Interface Client: SVNKit (Pure Java)

3. Add repository: svn+ssh://<<username>>@svn-st.inf.tu-dresden.de/srv/svn/dresdenocl
	for readonly access, use the url http://svn-st.inf.tu-dresden.de/svn/dresdenocl/

4. Install AspectJ Development Tools (AJDT) from the Eclipse Marketplace

5. Help -> Install New Software... -> Indigo -> Modeling -> 
	* Ecore Tools SDK
	* EMF - Eclipse Modeling Framework SDK
	* UML2 Extender SDK
	* XSD - XML Schema Definition SDK

6. Install Orbit
	* Help -> Install New Software... -> Available Software Sites -> filter for 'Orbit' and choose the update-site
	* Click OK
	* Choose the orbit update-site -> install the "Apache Jakarta Log4J plugin"

7. Checkout org.emftext.access from http://svn-st.inf.tu-dresden.de/svn/reuseware/trunk/EMFText 

8. Check out the following projects from Dresden OCL SVN (see step 3):
	* trunk/ocl20forEclipse/eclipse/** (all)
	* trunk/ocl20forEclipse/experimental/org.dresdenocl.examples.uml
	* trunk/ocl20forEclipse/tests/** (all)

9. Build the project: 
	* tudresden.ocl20.pivot.language.ocl.staticsemantics -> build.xml -> Run As -> 2nd entry of Ant-Build 
	** Tab Targets:
		- select Clean tudresden.ocl20.pivot.language.ocl.staticsemantics 
		- select Compile tudresden.ocl20.pivot.language.ocl.staticsemantics 
	** Tab JRE:
		- Runtime JRE: select "Run in the same JRE as the workspace"
	* Run

10. CodeStyle and more
	* http://st.inf.tu-dresden.de/stwiki/index.php/OCL:Best_Practices
	or just Window -> Preferences -> Java -> Code Style -> Formatter -> Import
	the XML from http://www1.inf.tu-dresden.de/~s6240579/OCL2%20for%20Eclipse.xml

Bugs and known issues
=====================
Please be aware, that the Dresden OCL is still under construction and 
contains some bugs and issues already known by the development team. 
Bugs already found are listed on the SourceForge project page of the Dresden OCL
(https://sourceforge.net/projects/dresden-ocl).
