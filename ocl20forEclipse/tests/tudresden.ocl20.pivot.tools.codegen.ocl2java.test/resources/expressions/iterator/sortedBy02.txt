java.util.List<Integer> firstPart;
java.util.ArrayList<Integer> collection2;
collection2 = new java.util.ArrayList<Integer>();

collection2.add(new Integer(3));
collection2.add(new Integer(2));
collection2.add(new Integer(1));
java.util.ArrayList<Integer> result3;
java.util.Comparator<Integer> comparator2;

result3 = collection2;

comparator2 = new java.util.Comparator<Integer>() {

    /** Method which compares two elements of the collection. */
    public int compare(Integer anElement3, Integer anElement4) {
        int result4;

        result4 = 0;

        if (anElement3 < anElement4) {
            result4 = -1;
        } else if (anElement3 > anElement4) {
            result4 = 1;
        }

        return result4;
    }
};

java.util.Collections.sort(result3, comparator2);

firstPart = result3;

java.util.List<Integer> secondPart;
java.util.ArrayList<Integer> collection1;
collection1 = new java.util.ArrayList<Integer>();

collection1.add(new Integer(3));
collection1.add(new Integer(2));
collection1.add(new Integer(1));
java.util.ArrayList<Integer> result1;
java.util.Comparator<Integer> comparator1;

result1 = collection1;

comparator1 = new java.util.Comparator<Integer>() {

    /** Method which compares two elements of the collection. */
    public int compare(Integer anElement1, Integer anElement2) {
        int result2;

        result2 = 0;

        if (anElement1 < anElement2) {
            result2 = -1;
        } else if (anElement1 > anElement2) {
            result2 = 1;
        }

        return result2;
    }
};

java.util.Collections.sort(result1, comparator1);

secondPart = result1;


(tudresden.ocl20.pivot.tools.codegen.ocl2java.types.util.OclCollections.isEmpty(firstPart) && tudresden.ocl20.pivot.tools.codegen.ocl2java.types.util.OclCollections.isEmpty(secondPart))