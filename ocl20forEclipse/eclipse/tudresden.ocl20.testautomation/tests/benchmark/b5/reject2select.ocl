package uml

-------------------------------------
-- B5: reject2select
-------------------------------------

----------------------------------------
-- modification from original constraints:
-- 1. let c had no type

-- 2. oclEmpty is USE-internal --> replaced it with Set{}, Bag{}, Sequence{} etc...



-- -- -- reject to select

-- -- -- -- Empty

-- -- -- -- -- Set ------------------------------------------------

context Model inv:
let c:Set(Integer) = Set{} in 
   c->reject(i|i<4) = c->select(i|not(i<4))


-- -- -- -- -- Bag

context Model inv:
let c:Bag(Integer) = Bag{} in 
   c->reject(i|i<4) = c->select(i|not(i<4))


-- -- -- -- -- Sequence

context Model inv:
let c:Sequence(Integer) = Sequence{} in 
   c->reject(i|i<4) = c->select(i|not(i<4))


-- -- -- -- Singleton

-- -- -- -- -- Includes Undefined
-- The operation `<` of null results in invalid.
-- this is why all iterations result in oclInvalid. 
-- But OclInvalid = OclInvalid is OclInvalid itself

-- -- -- -- -- -- Set ---------------------------------------------

context Model inv:
let c:Set(Integer) = Set{null} in 
   (c->reject(i|i<4) = c->select(i|not(i<4))).oclIsInvalid()


-- -- -- -- -- -- Bag

context Model inv:
let c:Bag(Integer) = Bag{null} in 
   (c->reject(i|i<4) = c->select(i|not(i<4))).oclIsInvalid()


-- -- -- -- -- -- Sequence

context Model inv:
let c:Sequence(Integer) = Sequence{null} in 
   (c->reject(i|i<4) = c->select(i|not(i<4))).oclIsInvalid()


-- -- -- -- -- Excludes Undefined

-- -- -- -- -- -- Expression e fulfilled

-- -- -- -- -- -- -- Set ------------------------------------------

context Model inv:
let c:Set(Integer) = Set{1} in 
   c->reject(i|i<4) = c->select(i|not(i<4))


-- -- -- -- -- -- -- Bag

context Model inv:
let c:Bag(Integer) = Bag{1} in 
   c->reject(i|i<4) = c->select(i|not(i<4))


-- -- -- -- -- -- -- Sequence

context Model inv:
let c:Sequence(Integer) = Sequence{1} in 
   c->reject(i|i<4) = c->select(i|not(i<4))


-- -- -- -- -- -- Expression e not fulfilled

-- -- -- -- -- -- -- Set ------------------------------------------

context Model inv:
let c:Set(Integer) = Set{4} in 
   c->reject(i|i<4) = c->select(i|not(i<4))


-- -- -- -- -- -- -- Bag

context Model inv:
let c:Bag(Integer) = Bag{4} in 
   c->reject(i|i<4) = c->select(i|not(i<4))


-- -- -- -- -- -- -- Sequence

context Model inv:
let c:Sequence(Integer) = Sequence{4} in 
   c->reject(i|i<4) = c->select(i|not(i<4))


-- -- -- -- Many Elements

-- -- -- -- -- Includes Undefined

-- -- -- -- -- -- Set ---------------------------------------------

context Model inv:
let c:Set(Integer) = Set{null, 1, 2, 3} in 
   c->reject(i|i<4) = c->select(i|not(i<4))


-- -- -- -- -- -- Bag

-- -- -- -- -- -- -- Equal Values

context Model inv:
let c:Bag(Integer) = Bag{null, 1, 2, 3, 
                  null} in 
   c->reject(i|i<4) = c->select(i|not(i<4))


-- -- -- -- -- -- -- No Equal Values

context Model inv:
let c:Bag(Integer) = Bag{null, 1, 2, 3} in 
   c->reject(i|i<4) = c->select(i|not(i<4))


-- -- -- -- -- -- Sequence

-- -- -- -- -- -- -- Equal Values

context Model inv:
let c:Sequence(Integer) = Sequence{null, 1, 2, 3, 
                       null} in 
   c->reject(i|i<4) = c->select(i|not(i<4))


-- -- -- -- -- -- -- No Equal Values

context Model inv:
let c:Sequence(Integer) = Sequence{null, 1, 2, 3} in 
   c->reject(i|i<4) = c->select(i|not(i<4))


-- -- -- -- -- Excludes Undefined

-- -- -- -- -- -- Expression e fulfilled

-- -- -- -- -- -- -- Set ------------------------------------------

context Model inv:
let c:Set(Integer) = Set{1, 2, 3} in 
   c->reject(i|i<4) = c->select(i|not(i<4))


-- -- -- -- -- -- -- Bag

-- -- -- -- -- -- -- -- Equal Values

context Model inv:
let c:Bag(Integer) = Bag{1, 2, 3, 1} in 
   c->reject(i|i<4) = c->select(i|not(i<4))


-- -- -- -- -- -- -- -- No Equal Values

context Model inv:
let c:Bag(Integer) = Bag{1, 2, 3} in 
   c->reject(i|i<4) = c->select(i|not(i<4))


-- -- -- -- -- -- -- Sequence

-- -- -- -- -- -- -- -- Equal Values

context Model inv:
let c:Sequence(Integer) = Sequence{1, 2, 3, 1} in 
   c->reject(i|i<4) = c->select(i|not(i<4))


-- -- -- -- -- -- -- -- No Equal Values

context Model inv:
let c:Sequence(Integer) = Sequence{1, 2, 3} in 
   c->reject(i|i<4) = c->select(i|not(i<4))


-- -- -- -- -- -- Expression e not fulfilled

-- -- -- -- -- -- -- Set ------------------------------------------

context Model inv:
let c:Set(Integer) = Set{2, 3, 4, 5} in 
   c->reject(i|i<4) = c->select(i|not(i<4))


-- -- -- -- -- -- -- Bag

-- -- -- -- -- -- -- -- Equal Values (both violating)

context Model inv:
let c:Bag(Integer) = Bag{2, 3, 4, 5, 4} in 
   c->reject(i|i<4) = c->select(i|not(i<4))


-- -- -- -- -- -- -- -- Equal Values (both not violating)

context Model inv:
let c:Bag(Integer) = Bag{2, 3, 4, 5, 2} in 
   c->reject(i|i<4) = c->select(i|not(i<4))


-- -- -- -- -- -- -- -- No Equal Values

context Model inv:
let c:Bag(Integer) = Bag{2, 3, 4, 5} in 
   c->reject(i|i<4) = c->select(i|not(i<4))


-- -- -- -- -- -- -- Sequence

-- -- -- -- -- -- -- -- Equal Values (both violating)

context Model inv:
let c:Sequence(Integer) = Sequence{2, 3, 4, 5, 4} in 
   c->reject(i|i<4) = c->select(i|not(i<4))


-- -- -- -- -- -- -- -- Equal Values (both not violating)

context Model inv:
let c:Sequence(Integer) = Sequence{2, 3, 4, 5, 2} in 
   c->reject(i|i<4) = c->select(i|not(i<4))


-- -- -- -- -- -- -- -- No Equal Values

context Model inv:
let c:Sequence(Integer) = Sequence{2, 3, 4, 5} in 
   c->reject(i|i<4) = c->select(i|not(i<4))



endpackage
