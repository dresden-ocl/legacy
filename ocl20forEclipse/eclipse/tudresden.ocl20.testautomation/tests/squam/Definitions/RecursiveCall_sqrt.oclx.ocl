--------------------------------------------------------------------
-- exported by the SQUAM OCLEditor v0.8.0.x (OCLLib to standard OCL)
--------------------------------------------------------------------
package uml 


-- Library: RecursiveCall_sqrt

--	Library with an example definition of a recursive operation to calculate a square root.
--  The sqrt operation is calculated for real numbers using babylonian method: http://en.wikipedia.org/wiki/Babylonian_method#Babylonian_method.
--	Author: Markus Piff - orginally developed in Model Engineering lecture: http://qe-informatik.uibk.ac.at/index.php?option=com_content&id=169 as a part of the OCL Project: 2009_ME_UMLMetrics
--	Author: Joanna Chimiak-Opoka - adapted for this course purpose.
--------------------------------------------------------
-- definitions
--------------------------------------------------------
context Model
def: sqrt_helper(num : Real, square : Real) : Real = 
				if (num <> 0.0) then
					-- let num2 : Real = ((num+square/num)/2) in
					if ((num+square/num)/2) <> num then
						sqrt_helper(((num+square/num)/2),square)
					else
						((num+square/num)/2)
					endif
				else
					0.0
				endif

context Model
def: sqrt(num : Real) : Real = self.sqrt_helper(num,num)

--------------------------------------------------------
-- tests (queries with boolean result)
--------------------------------------------------------
--	calculate sqrt of 4
context Model

inv test_sqrt: let result:Real = sqrt(4) in result = 2.0

--	calculate sqrt of 16
context Model

inv test_sqrt2: let result:Real = sqrt(16) in result = 4.0

--	calculate sqrt of 337
-- this one ins gonna fail anyway...
-- need to change the precision handling before something like that is possible
context Model
inv test_sqrt_real: let result:Real = sqrt(337) in result = 18.35756975068582

endpackage
