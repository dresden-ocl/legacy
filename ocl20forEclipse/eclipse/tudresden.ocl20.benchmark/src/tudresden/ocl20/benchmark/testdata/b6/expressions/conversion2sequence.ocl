package tudresden::ocl20::benchmark::testdata::common

-------------------------------------
-- B6: conversion2sequence
-------------------------------------

-- Technical Relationships

-- -- Conversion to Sequences

-- -- -- Empty

-- -- -- -- Set ---------------------------------------------------

context Dummy inv:
	let c:Set(Integer) = Set{} in 
   c->asSequence() = c->asBag()->asSequence()

	 -- Expected Result:
	= true

context Dummy inv:
	let c:Set(Integer) = Set{} in 
   c->asSequence() = 
     c->iterate(elem; 
                    r:Sequence(Integer) = Sequence{} | 
           r->including(elem))

	 -- Expected Result:
	= true

context Dummy inv:
	let c:Set(Integer) = Set{} in 
   c->asSequence() = 
     c->iterate(u;
           r:Tuple(theSet:Set(Integer), theSeq:Sequence(Integer)) = 
             Tuple{theSet:c,theSeq:Sequence{}} | 
           let e = r.theSet->any(true) in 
             Tuple{theSet:r.theSet->excluding(e),
                   theSeq:r.theSeq->including(e)}).theSeq

	 -- Expected Result:
	= true

context Dummy inv:
	let c:Set(Integer) = Set{} in 
   c->asSequence() = Sequence{c}->flatten()

	 -- Expected Result:
	= true

-- -- -- Singleton

-- -- -- -- Includes Undefined

-- -- -- -- -- Set ------------------------------------------------

context Dummy inv:
	let c:Set(Integer) = Set{oclUndefined} in 
   c->asSequence() = c->asBag()->asSequence()

	 -- Expected Result:
	= true

context Dummy inv:
	let c:Set(Integer) = Set{oclUndefined} in 
   c->asSequence() = 
     c->iterate(elem; 
                    r:Sequence(Integer) = Sequence{} |
           r->including(elem))

	 -- Expected Result:
	= true

context Dummy inv:
	let c:Set(Integer) = Set{oclUndefined} in 
   c->asSequence() = 
     c->iterate(u;
           r:Tuple(theSet:Set(Integer),theSeq:Sequence(Integer)) = 
             Tuple{theSet:c,theSeq:Sequence{}} |
           let e = r.theSet->any(true) in 
             Tuple{theSet:r.theSet->excluding(e),
                   theSeq:r.theSeq->including(e)}).theSeq

	 -- Expected Result:
	= true

context Dummy inv:
	let c:Set(Integer) = Set{oclUndefined} in 
   c->asSequence() = Sequence{c}->flatten()

	 -- Expected Result:
	= true

-- -- -- -- Excludes Undefined

-- -- -- -- -- Set ---------------------------------------------

context Dummy inv:
	let c:Set(Integer) = Set{1} in c->asSequence() = c->asBag()->asSequence()

	 -- Expected Result:
	= true

context Dummy inv:
	let c:Set(Integer) = Set{1} in 
   c->asSequence() = 
     c->iterate(elem;
                    r:Sequence(Integer) = Sequence{} |
           r->including(elem))

	 -- Expected Result:
	= true

context Dummy inv:
	let c:Set(Integer) = Set{1} in 
   c->asSequence() = 
     c->iterate(u;
           r:Tuple(theSet:Set(Integer),theSeq:Sequence(Integer)) = 
             Tuple{theSet:c,theSeq:Sequence{}} |
           let e = r.theSet->any(true) in 
             Tuple{theSet:r.theSet->excluding(e),
                   theSeq:r.theSeq->including(e)}).theSeq

	 -- Expected Result:
	= true

context Dummy inv:
	let c:Set(Integer) = Set{1} in c->asSequence() = Sequence{c}->flatten()

	 -- Expected Result:
	= true

-- -- -- Many Elements

-- -- -- -- Includes Undefined

-- -- -- -- -- Set ---------------------------------------------

context Dummy inv:
	let c:Set(Integer) = Set{oclUndefined, 1, -1, 3, 2, 0} in 
   c->asSequence() = c->asBag()->asSequence()

	 -- Expected Result:
	= true

context Dummy inv:
	let c:Set(Integer) = Set{oclUndefined, 1, -1, 3, 2, 0} in 
   c->asSequence() = 
     c->iterate(elem;
                    r:Sequence(Integer) = Sequence{} |
           r->including(elem))

	 -- Expected Result:
	= true

context Dummy inv:
	let c:Set(Integer) = Set{oclUndefined, 1, -1, 3, 2, 0} in 
   c->asSequence() = 
     c->iterate(u;
           r:Tuple(theSet:Set(Integer),theSeq:Sequence(Integer)) = 
             Tuple{theSet:c,theSeq:Sequence{}} |
           let e = r.theSet->any(true) in 
             Tuple{theSet:r.theSet->excluding(e),
                   theSeq:r.theSeq->including(e)}).theSeq

	 -- Expected Result:
	= true

context Dummy inv:
	let c:Set(Integer) = Set{oclUndefined, 1, -1, 3, 2, 0} in 
   c->asSequence() = Sequence{c}->flatten()

	 -- Expected Result:
	= true

-- -- -- -- Excludes Undefined

-- -- -- -- -- Set ---------------------------------------------

context Dummy inv:
	let c:Set(Integer) = Set{1, -1, 3, 2, 0} in 
   c->asSequence() = c->asBag()->asSequence()

	 -- Expected Result:
	= true

context Dummy inv:
	let c:Set(Integer) = Set{1, -1, 3, 2, 0} in 
   c->asSequence() = 
     c->iterate(elem;
                    r:Sequence(Integer) = Sequence{} |
           r->including(elem))

	 -- Expected Result:
	= true

context Dummy inv:
	let c:Set(Integer) = Set{1, -1, 3, 2, 0} in 
   c->asSequence() = 
     c->iterate(u;
           r:Tuple(theSet:Set(Integer),theSeq:Sequence(Integer)) = 
             Tuple{theSet:c,theSeq:Sequence{}} |
           let e = r.theSet->any(true) in 
             Tuple{theSet:r.theSet->excluding(e),
                   theSeq:r.theSeq->including(e)}).theSeq

	 -- Expected Result:
	= true

context Dummy inv:
	let c:Set(Integer) = Set{1, -1, 3, 2, 0} in 
   c->asSequence() = Sequence{c}->flatten()

	 -- Expected Result:
	= true

endpackage
