ModelInstanceTypeTestSuite_Services_ModelInstanceFileNotFound=Model file ''{0}'' from bundle ''{1}'' cannot be found.
ModelInstanceTypeTestSuite_Services_ModelInstanceTypeNotFound=Model Instance Type ''{0}'' could not be found.
ModelInstanceTypeTestSuite_Services_ModelWasNull=No model has been loaded. The model instance could not be loaded.
ModelInstanceTypeTestSuite_Services_ModelFileNotFound=Model file ''{0}'' from bundle ''{1}'' cannot be found.
ModelInstanceTypeTestSuite_Services_MetaModelNotFound=Meta-Model ''{0}'' could not be found.

TestModelInstanceBoolean_NoProviderClassInstanceFound=No instance of the PrimitiveTypeProviderClass has been found. The adaptation of PrimitiveTypes of the PrimitiveTypeKind Boolean has not been tested.
TestModelInstanceBoolean_NoBooleanInstanceFound=No Instance of the primitive type Boolean has been found. The correct adaptation of Primitive Types in arrays and collections to IModelObjects has not been tested.
TestModelInstanceBoolean_GetBooleanIsWrong=The implementation of IModelInstanceBoolean.getBoolean() seems to be wrong. The result should be only null, if the element is undefined.
TestModelInstanceBoolean_AsTypeIsWrong=The implementation of IModelInstanceBoolean.asType(Type) seems to be wrong. A boolean should be cast-able to a {0}.
TestModelInstanceBoolean_CopyForAtPreIsWrong=The implementation of IModelInstanceBoolean.copyForAtPre() seems to be wrong. A boolean should be copy-able.
TestModelInstanceBoolean_GetTypesIsWrong=The implementation of IModelInstanceBoolean.getTypes() seems to be wrong. A boolean should have exactly one Type which is the PrimitiveType of the kind Boolean.
TestModelInstanceBoolean_IsUndefinedIsWrong=The implementation of IModelInstanceBoolean.isUndefined() seems to be wrong. The result should be only true, if the adapted element is null.
TestModelInstanceBoolean_EqualsIsWrong=The implementation of the method IModelInstanceBoolean.equals(Object) seems to be wrong.

TestModelInstanceInteger_NoProviderClassInstanceFound=No instance of the PrimitiveTypeProviderClass has been found. The adaptation of PrimitiveTypes of the PrimitiveTypeKind Integer has not been tested. 
TestModelInstanceInteger_NoIntegerInstanceFound=No Instance of the primitive type Integer has been found. The correct adaptation of Primitive Types to IModelObjects has not been tested.
TestModelInstanceInteger_GetIntegerIsWrong=The implementation of IModelInstanceInteger.getLong() seems to be wrong. The result should be only null, if the element is undefined.
TestModelInstanceInteger_AsTypeIsWrong=The implementation of IModelInstanceInteger.asType(Type) seems to be wrong. An Integer should be cast-able to a {0}.
TestModelInstanceInteger_CopyForAtPreIsWrong=The implementation of IModelInstanceInteger.copyForAtPre() seems to be wrong. An Integer should be copy-able.
TestModelInstanceInteger_GetTypesIsWrong=The implementation of IModelInstanceInteger.getTypes() seems to be wrong. An integer should have exactly one Type which is the PrimitiveType of the kind Integer.
TestModelInstanceInteger_IsUndefinedIsWrong=The implementation of IModelInstanceInteger.isUndefined() seems to be wrong. The result should be only true, if the adapted element is null.
TestModelInstanceInteger_EqualsIsWrong=The implementation of the method IModelInstanceInteger.equals(Object) seems to be wrong.

TestModelInstanceReal_NoProviderClassInstanceFound=No instance of the PrimitiveTypeProviderClass has been found. The adaptation of PrimitiveTypes of the PrimitiveTypeKind Real has not been tested. 
TestModelInstanceReal_NoRealInstanceFound=No Instance of the primitive type Real has been found. The correct adaptation of Primitive Types to IModelObjects has not been tested.
TestModelInstanceReal_GetDoubleIsWrong=The implementation of IModelInstanceReal.getDouble() seems to be wrong. The result should be only null, if the element is undefined.
TestModelInstanceReal_AsTypeIsWrong=The implementation of IModelInstanceReal.asType(Type) seems to be wrong. A Real should be cast-able to a {0}.
TestModelInstanceReal_CopyForAtPreIsWrong=The implementation of IModelInstanceReal.copyForAtPre() seems to be wrong. A Real should be copy-able.
TestModelInstanceReal_GetTypesIsWrong=The implementation of IModelInstanceReal.getTypes() seems to be wrong. A Real should have exactly one Type which is the PrimitiveType of the kind Real.
TestModelInstanceReal_IsUndefinedIsWrong=The implementation of IModelInstanceReal.isUndefined() seems to be wrong. The result should be only true, if the adapted element is null.
TestModelInstanceReal_EqualsIsWrong=The implementation of the method IModelInstanceReal.equals(Object) seems to be wrong.

TestModelInstanceString_NoProviderClassInstanceFound=No instance of the PrimitiveTypeProviderClass has been found. The adaptation of PrimitiveTypes of the PrimitiveTypeKind String has not been tested.
TestModelInstanceString_NoStringInstanceFound=No Instance of the primitive type String has been found. The correct adaptation of Primitive Types to IModelObjects has not been tested.
TestModelInstanceString_GetStringIsWrong=The implementation of IModelInstanceString.getString() seems to be wrong. The result should be only null, if the element is undefined.
TestModelInstanceString_AsTypeIsWrong=The implementation of IModelInstanceString.asType(Type) seems to be wrong. A String should be cast-able to a {0}.
TestModelInstanceString_CopyForAtPreIsWrong=The implementation of IModelInstanceString.copyForAtPre() seems to be wrong. A String should be copy-able.
TestModelInstanceString_GetTypesIsWrong=The implementation of IModelInstanceString.getTypes() seems to be wrong. A String should have exactly one Type which is the PrimitiveType of the kind String.
TestModelInstanceString_IsUndefinedIsWrong=The implementation of IModelInstanceString.isUndefined() seems to be wrong. The result should be only true, if the adapted element is null.
TestModelInstanceString_EqualsIsWrong=The implementation of the method IModelInstanceString.equals(Object) seems to be wrong.

TestModelInstanceCollection_NoBagInstanceFound=No IModelInstanceElement has been adapted to a Bag. The adaptation of IModelInstanceCollections was not tested completely. 
TestModelInstanceCollection_NoOrderedSetInstanceFound=No IModelInstanceElement has been adapted to an OrderedSet. The adaptation of IModelInstanceCollections was not tested completely. 
TestModelInstanceCollection_NoSequenceInstanceFound=No IModelInstanceElement has been adapted to a Sequence. The adaptation of IModelInstanceCollections was not tested completely. 
TestModelInstanceCollection_NoSetInstanceFound=No IModelInstanceElement has been adapted to a Set. The adaptation of IModelInstanceCollections was not tested completely. 
TestModelInstanceCollection_NoProviderClassInstanceFound=No instance of the CollectionTypeProviderClass has been found. The adaptation of CollectionTypes has not been tested.
TestModelInstanceCollection_AsTypeIsWrong=The implementation of IModelInstanceCollection.asType(Type) seems to be wrong. A Collection should be cast-able to a {0}.
TestModelInstanceCollection_CopyForAtPreIsWrong=The implementation of IModelInstanceCollection.copyForAtPre() seems to be wrong. A Collection should be copy-able.
TestModelInstanceCollection_GetAdapterIsWrong=The implementation of IModelInstanceCollection.getAdapter(Object) seems to be wrong. The method should return an adapted IModelInstanceElement for every element of the adapted collection.
TestModelInstanceCollection_GetCollectionIsWrong=The implementation of IModelInstanceCollection.getCollection() seems to be wrong. A collection of the type {0} should return a {1}.
TestModelInstanceCollection_GetIteratorIsWrong=The implementation of IModelInstanceCollection.getIterator() seems to be wrong. The method should return an Iterator to iterate over the adapted collection's elements. 
TestModelInstanceCollection_GetTypesIsWrong=The implementation of IModelInstanceCollection.getTypes() seems to be wrong. A {0} should have exactly one Type which is the CollectionType of the kind {1}.
TestModelInstanceCollection_IsOrderedIsWrong=The implementation of IModelInstanceCollection.isOrdered() seems to be wrong. A {0} should {1}be ordered.
TestModelInstanceCollection_IsUndefinedIsWrong=The implementation of IModelInstanceCollection.isUndefined() seems to be wrong. The result should be only true, if the adapted element is null.
TestModelInstanceCollection_IsUniqueIsWrong=The implementation of IModelInstanceCollection.isUnique() seems to be wrong. A {0} should {1}be unique.
TestModelInstanceCollection_EqualsIsWrong=The implementation of the method IModelInstanceCollection.equals(Object) seems to be wrong.

TestModelInstanceEnumerationLiteral_NoEnumerationLiteralFound=No instance of the EnumerationLiteralProviderClass has been found. The adaptation of EnumerationLiterals has not been tested.
TestModelInstanceEnumerationLiteral_NoProviderClassInstanceFound=The IModelInstanceElement ''{0}'' has a Enumeration Type but was not adapted to IModelInstanceEnumerationLiteral.
TestModelInstanceEnumerationLiteral_AsTypeIsWrong=The implementation of IModelInstanceEnumerationLiteral.asType(Type) seems to be wrong. A EnumerationLiteral should be cast-able to (and only to) itself.
TestModelInstanceEnumerationLiteral_CopyForAtPreIsWrong=The implementation of IModelInstanceEnumerationLiteral.copyForAtPre() seems to be wrong. An EnumerationLiteral should be copy-able.
TestModelInstanceEnumerationLiteral_GetLiteralIsWrong=The implementation of IModelInstanceEnumerationLiteral.getLiteral() seems to be wrong. An EnumerationLiteral should return its adapted literal or null if it is undefined.
TestModelInstanceEnumerationLiteral_GetTypesIsWrong=The implementation of IModelInstanceEnumerationLiteral.getTypes() seems to be wrong. A IModelInstanceEnumerationLiteral should have exactly one Type which is its Enumeration Type.
TestModelInstanceEnumerationLiteral_IsUndefinedIsWrong=The implementation of IModelInstanceEnumerationLiteral.isUndefined() seems to be wrong. The result should be only true, if the adapted element is null.
TestModelInstanceEnumerationLiteral_EqualsIsWrong=The implementation of the method IModelInstanceEnumerationLiteral.equals(Object) seems to be wrong.

TestModelInstanceObject_NoClass1InstanceFound=No Instance of the Class1 has been found. The correct adaptation of Types to IModelInstanceElements has not been tested.
TestModelInstanceObject_NoClass2InstanceFound=No Instance of the Class2 has been found. The correct adaptation of Types to IModelInstanceElements has not been tested.
TestModelInstanceObject_NoInterface1InstanceFound=No Instance of the Interface1 has been found. The correct adaptation of Types to IModelInstanceElements has not been tested.
TestModelInstanceObject_NoInterface2InstanceFound=No Instance of the Interface2 has been found. The correct adaptation of Types to IModelInstanceElements has not been tested.
TestModelInstanceObject_NoInterface3InstanceFound=No Instance of the Interface3 has been found. The correct adaptation of Types to IModelInstanceElements has not been tested.
TestModelInstanceObject_NoCopyableClassInstanceFound=No Instance of the CopyableClass has been found. The correct adaptation of the method IModelInstanceObject.copyForAtPre() has not been tested completely.
TestModelInstanceObject_NoNonCopyableClassInstanceFound=No Instance of the NonCopyableClass has been found. The correct adaptation of the method IModelInstanceObject.copyForAtPre() has not been tested completely.
TestModelInstanceObject_WrongAdaptation=The IModelInstanceElement should be adapted to an IModelInstanceObject.
TestModelInstanceObject_AsTypeIsWrong=The implementation of IModelInstanceObject.asType(Type) seems to be wrong. A IModelInstanceObject of the Type {0} should be cast-able to {1}.
TestModelInstanceObject_AsTypeGetPropertyIsWrong=The implementation of IModelInstanceObject.asType(Type) and IModelInstanceObject.getProperty(Property) seems to be wrong. I an IModelInstanceObject has been casted to a super type, the method IModelInstanceObject.getProperty(Property) should return a Property of the super type (even if this property has been overwritten in the sub type.
TestModelInstanceObject_CopyForAtPreIsWrong=The implementation of IModelInstanceObject.copyForAtPre() seems to be wrong. If an IModelInstanceObject is clone-able or initializable, it should be copy-able.
TestModelInstanceObject_GetObjectIsWrong=The implementation of IModelInstanceObject.getObject() seems to be wrong. An IModelInstanceObject should return its adapted Object or null if it is undefined.
TestModelInstanceObject_GetPropertyIsWrong=The implementation of IModelInstanceObject.getProperty() seems to be wrong.
TestModelInstanceObject_GetTypesIsWrong=The implementation of IModelInstanceObject.getTypes() seems to be wrong.
TestModelInstanceObject_GetTypesOfClass1IsWrong=An instance of Class1 should have the Type Class1 or should have the Type Class2.
TestModelInstanceObject_GetTypesOfClass2IsWrong=An instance of Class2 should have the Type Class2 and not should have the Type Class1.
TestModelInstanceObject_GetTypesOfInterface1IsWrong=An instance of Interface1 should have the Type Interface1.
TestModelInstanceObject_GetTypesOfInterface2IsWrong=An instance of Interface2 should have the Type Interface2 or (exclusively or) the Type Interface3.
TestModelInstanceObject_GetTypesOfInterface3IsWrong=An instance of Interface3 should have the Type Interface3 and should not have the Type Interface2.
TestModelInstanceObject_InvokeOperationIsWrong=The implementation of IModelInstanceObject.invokeOperation() seems to be wrong.
TestModelInstanceObject_IsUndefinedIsWrong=The implementation of IModelInstanceObject.isUndefined() seems to be wrong. The result should be only true, if the adapted element is null.
TestModelInstanceObject_OperationNotFound=The Operation {0} has not been found. The adaptation of Operations has not been tested completely.
TestModelInstanceObject_NoPrimitiveTypeInstanceFound=No instance of PrimitiveTypeKind {0} has been found. The invocation of an operation with a primitive argument cannot be tested. 
TestModelInstanceObject_NoBagInstanceFound=No instance of CollectionKind Bag has been found. The invocation of an operation with a collection argument cannot be tested.
TestModelInstanceObject_NoClass1InstanceFound2=No instance of Class1 has been found. The invocation of an operation with a primitive argument cannot be tested.
TestModelInstanceObject_EqualsIsWrong=The implementation of the method IModelInstanceObject.equals(Object) seems to be wrong. 
TestModelInstanceObject_NoEnumeration1InstanceFound2=No instance of Enumeration1 has been found. The invocation of an operation with an enumeration literal argument cannot be tested.

TestModelInstance_LoadModelInstanceWrong=The method IModelInstanceProvider.loadModelInstance(URL, IModel) seems to be wrong the adaptation of ModelInstances cannot be tested completely.
TestModelInstance_GetModelWrong=The method IModelInstance.getModel() seems to be wrong. The method should return the IModel, the tested IModelInstance is an instance of.
TestModelInstance_IsInstanceOfIsWrong=The method IModelInstance.isInstanceOf(IModel) seems to be wrong. The IModelInstance should be an instance of its IModel.
TestModelInstance_GetAllImplementedTypesIsWrong=The method IModelInstance.getAllImplementedTypes() seems to be wrong. The method's result should contain the Type Class1.
TestModelInstance_GetAllInstancesIsWrong=The method IModelInstance.getAllInstances(Type) seems to be wrong. The method's result should contain instances of the Type Class1.
TestModelInstance_GetAllModelInstanceObjectsIsWrong=The method IModelInstance.getAllModelInstanceObjects() seems to be wrong. The method's result should contain all instances all implemented types.
TestModelInstance_GetModelInstanceFactoryIsWrong=The method IModelInstance.getAllModelInstanceFactory() seems to be wrong.
TestModelInstance_FindEnumerationLiteralIsWrong=The method IModelInstance.findEnumerationLiteral(EnumerationLiteral) seems to be wrong. The literal should return an IModelInstanceEnumerationLiteral adaptation of the given EnumerationLiteral.
TestModelInstance_GetStaticPropertyIsWrong=The method IModelInstance.getStaticProperty(Property) seems to be wrong or is not supported by the ModelInstanceType under test. The method should return the adapted IModelInstanceElement of the given Property's value.
TestModelInstance_InvokeStaticOperationIsWrong=The method IModelInstance.invokeStaticOperation(Operation, List) seems to be wrong or is not supported by the ModelInstanceType under test. The method should return the adapted IModelInstanceElement of the given Operation's result.
TestModelInstance_AddModelInstanceElementIsWrong=The method IModelInstance.addModelInstanceElement(Object) seems to be wrong.
TestModelInstance_AddModelInstanceElementIsWrong2=No instance of Class1 has been found. The method IModelInstance.addModelInstanceElement(Object) has not been tested.