--------------------------------------------------------------------
-- exported by the SQUAM OCLEditor v0.8.0.x (OCLLib to standard OCL)
--------------------------------------------------------------------
package uml 


-- Library: OrderedSets

--	A library with examples for OrderedSet.
--  Some operations are defined as generic ones for Collections, see Collections.oclx.
--------------------------------------------------------
-- tests (queries with boolean result)
--------------------------------------------------------
--	Examples to show operations for OrderedSets.
-- 
context Model

inv tOrderedSet_1: let os : OrderedSet(Integer) = OrderedSet{1,2,3,4,5} in os->size() = 5

context Model

inv tOrderedSet_2: let os : OrderedSet(Integer) = OrderedSet{1,2,3,4,5} in os->first() < os->last()

context Model

inv tOrderedSet_3: let os : OrderedSet(Integer) = OrderedSet{1,2,3,4,5} in os->append(6)->last() = 6

context Model

inv tOrderedSet_4: let os : OrderedSet(Integer) = OrderedSet{1,2,3,4,5} in os->prepend(0)->first() = 0

context Model

inv tOrderedSet_5: let os : OrderedSet(Integer) = OrderedSet{1,2,3,4,5} in os->prepend(1) = os

context Model

inv tOrderedSet_6: let os : OrderedSet(Integer) = OrderedSet{1,2,3,4,5} in os->prepend(5) = os

context Model

inv tOrderedSet_7: let os : OrderedSet(Integer) = OrderedSet{1,2,3,4,5} in os->indexOf(2) = 2

context Model

inv tOrderedSet_8: let os : OrderedSet(Integer) = OrderedSet{1,2,3,4,5} in os->insertAt(2,6) = OrderedSet{1,6,2,3,4,5}

context Model

inv tOrderedSet_9: let os : OrderedSet(Integer) = OrderedSet{1,2,3,4,5} in os->insertAt(2,5) = OrderedSet{1,2,3,4,5}

context Model

inv tOrderedSet_10: let os : OrderedSet(Integer) = OrderedSet{1,2,3,4,5} in os->subOrderedSet(2,4)->size() = 3

context Model

inv tOrderedSet_11: let os : OrderedSet(Integer) = OrderedSet{1,2,3,4,5} in os->at(os->size()) = os->last()

context Model

inv tOrderedSet_12: let os : OrderedSet(Integer) = OrderedSet{1,2,3,4,5} in os->at(1) = os->first()

context Model

inv tOrderedSet_13: let os : OrderedSet(Integer) = OrderedSet{1,2,3,4,5} in os->select(e| e>2) = OrderedSet{3,4,5}

context Model

inv tOrderedSet_14: let os : OrderedSet(Integer) = OrderedSet{1,2,3,4,5} in os->reject(e| e>2) = OrderedSet{1,2}

context Model

inv tOrderedSet_15: let os : OrderedSet(Integer) = OrderedSet{1,2,3,4,5} in Set{3,4,5}->includes(os->any(e| e>2))

--	Tests comparison of ordering in ordered sets.
-- 
context Model

inv tOrderedSetComparison_1: let os : OrderedSet(Integer) = OrderedSet{1,2,3,4,5} in    			
    		  let so : OrderedSet(Integer) = OrderedSet{5,4,3,2,1} in os->sortedBy(e|-e) = OrderedSet{5,4,3,2,1}

context Model

inv tOrderedSetComparison_2: let os : OrderedSet(Integer) = OrderedSet{1,2,3,4,5} in    			
    		  let so : OrderedSet(Integer) = OrderedSet{5,4,3,2,1} in os->sortedBy(e|-e) = os

context Model

inv tOrderedSetComparison_3: let os : OrderedSet(Integer) = OrderedSet{1,2,3,4,5} in    			
    		  let so : OrderedSet(Integer) = OrderedSet{5,4,3,2,1} in os->sortedBy(e|e) = os->sortedBy(e|-e)

context Model

inv tOrderedSetComparison_4: let os : OrderedSet(Integer) = OrderedSet{1,2,3,4,5} in    			
    		  let so : OrderedSet(Integer) = OrderedSet{5,4,3,2,1} in OrderedSet{1,2,3,4,5} = OrderedSet{5,4,3,2,1}

context Model

inv tOrderedSetComparison_5: let os : OrderedSet(Integer) = OrderedSet{1,2,3,4,5} in    			
    		  let so : OrderedSet(Integer) = OrderedSet{5,4,3,2,1} in os = so

--	Tests merging of ordered sets.
-- When union/intersection is applied the order is omitted, the result is of type Set.
context Model

inv tOrderedSetMerging_1: let os1 : OrderedSet(Integer) = OrderedSet{1,2,3,4} in    			
    		  let os2 : OrderedSet(Integer) = OrderedSet{3,4,5} in os1->union(os2) = Set{1,2,3,4,5}

context Model

inv tOrderedSetMerging_2: let os1 : OrderedSet(Integer) = OrderedSet{1,2,3,4} in    			
    		  let os2 : OrderedSet(Integer) = OrderedSet{3,4,5} in os2->union(os1) = os1->union(os2)

context Model

inv tOrderedSetMerging_3: let os1 : OrderedSet(Integer) = OrderedSet{1,2,3,4} in    			
    		  let os2 : OrderedSet(Integer) = OrderedSet{3,4,5} in os1->intersection(os2) = Set{3,4}

context Model

inv tOrderedSetTwiceNested: let s : OrderedSet(OrderedSet(OrderedSet(Integer))) 
   			      = OrderedSet{OrderedSet{OrderedSet{1}, OrderedSet{1,2}, OrderedSet{1,3,5}}, OrderedSet{OrderedSet{1}}} in s->flatten() = OrderedSet{1,2,3,5}

endpackage