/*
Copyright (C) 2008-2010 by Claas Wilke (claaswilke@gmx.net)

This file is part of the OCL 2 Java Code Generator of Dresden OCL2 for Eclipse.

Dresden OCL2 for Eclipse is free software: you can redistribute it and/or modify 
it under the terms of the GNU Lesser General Public License as published by the 
Free Software Foundation, either version 3 of the License, or (at your option)
any later version.

Dresden OCL2 for Eclipse is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License 
for more details.

You should have received a copy of the GNU Lesser General Public License along 
with Dresden OCL2 for Eclipse. If not, see <http://www.gnu.org/licenses/>.
 */

package tudresden.ocl20.pivot.ocl2java.test.tests.standardlibrary;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.io.File;
import java.util.List;

import tudresden.ocl20.pivot.facade.OCL2ParsingException;
import tudresden.ocl20.pivot.facade.Ocl2ForEclipseFacade;
import tudresden.ocl20.pivot.modelbus.ModelAccessException;
import tudresden.ocl20.pivot.modelbus.model.IModel;
import tudresden.ocl20.pivot.ocl2java.exception.Ocl22CodeException;
import tudresden.ocl20.pivot.ocl2java.test.Ocl2CodeTestPlugin;
import tudresden.ocl20.pivot.ocl2java.test.tests.CodegenTestPerformer;
import tudresden.ocl20.pivot.pivotmodel.Constraint;

/**
 * <p>
 * Abstract implementation for test class to test code generation of standard
 * library operations.
 * </p>
 * 
 * @author Claas Wilke
 */
public abstract class AbstractSLTest {

	/** The location of the {@link IModel} used for testing. */
	private static final String MODEL_NAME = "resources/models/model01.uml";

	/** The {@link IModel} used for testing. */
	private static IModel testModel;

	/**
	 * <p>
	 * Initializes the test cases.
	 * </p>
	 * 
	 * @throws ModelAccessException
	 * @throws IllegalArgumentException
	 */
	protected static void setUp() throws IllegalArgumentException,
			ModelAccessException {

		File modelFile;
		modelFile = AbstractSLTest.getFile(MODEL_NAME);

		testModel =
				Ocl2ForEclipseFacade.getModel(modelFile,
						Ocl2ForEclipseFacade.UML2_MetaModel);
	}

	/**
	 * <p>
	 * Tears down the test cases.
	 * </p>
	 * 
	 * @throws ModelAccessException
	 * @throws IllegalArgumentException
	 */
	protected static void tearDown() throws IllegalArgumentException,
			ModelAccessException {

		Ocl2ForEclipseFacade.removeModel(testModel);
	}

	/**
	 * <p>
	 * Returns the file object for a given path relative to the plug-in's
	 * directory.
	 * </p>
	 * 
	 * @param path
	 *          The path of the resource.
	 * @return The found {@link File} object.
	 */
	private static File getFile(String path) {

		String filePath;
		filePath = Ocl2CodeTestPlugin.getDefault().getBundle().getLocation();
		/* Remove 'reference:file:/' */
		filePath = filePath.substring(16);

		filePath +=
				Ocl2CodeTestPlugin.getDefault().getBundle().getResource(path).getPath()
						.substring(1);

		File constraintFile;
		constraintFile = new File(filePath);

		assertTrue(constraintFile.exists());

		return constraintFile;
	}

	/**
	 * <p>
	 * Compares fragment code generated by a given constraints file's name with
	 * its expected result.
	 * </p>
	 * 
	 * @param directory
	 *          the directory of the file relative to
	 *          <code>resources/sltest/</code>
	 * @param fileName
	 *          The name of the file that shall be checked.
	 * @throws OCL2ParsingException
	 * @throws ModelAccessException
	 * @throws Ocl22CodeException
	 */
	protected void compareFragmentCodeGeneration(String directory, String fileName)
			throws OCL2ParsingException, ModelAccessException, Ocl22CodeException {

		/* Parse the constraint. */
		File constraintFile;
		constraintFile =
				AbstractSLTest.getFile("resources/sltest/" + directory + "/" + fileName
						+ ".ocl");

		List<Constraint> parsedConstraints;
		parsedConstraints =
				Ocl2ForEclipseFacade.parseConstraints(constraintFile, testModel, true);

		assertNotNull(parsedConstraints);
		assertEquals(1, parsedConstraints.size());

		String generatedCode;
		generatedCode =
				Ocl2ForEclipseFacade.generateJavaFragmentCode(parsedConstraints
						.iterator().next(), Ocl2ForEclipseFacade
						.getJavaCodeGeneratorSettings());

		assertNotNull(generatedCode);

		CodegenTestPerformer.getInstance().compareStringAndFile(
				"resources/sltest/" + directory + "/" + fileName + ".txt",
				generatedCode);
	}

	/**
	 * <p>
	 * Compares instrumentation code generated by a given constraints file's name
	 * with its expected result.
	 * </p>
	 * 
	 * @param directory
	 *          the directory of the file relative to
	 *          <code>resources/sltest/</code>
	 * @param fileName
	 *          The name of the file that shall be checked.
	 * @throws OCL2ParsingException
	 * @throws ModelAccessException
	 * @throws Ocl22CodeException
	 */
	protected void compareInstrumentationCodeGeneration(String directory,
			String fileName) throws OCL2ParsingException, ModelAccessException,
			Ocl22CodeException {

		/* Parse the constraint. */
		File constraintFile;
		constraintFile =
				AbstractSLTest.getFile("resources/sltest/" + directory + "/" + fileName
						+ ".ocl");

		List<Constraint> parsedConstraints;
		parsedConstraints =
				Ocl2ForEclipseFacade.parseConstraints(constraintFile, testModel, true);

		assertNotNull(parsedConstraints);
		assertEquals(1, parsedConstraints.size());

		String generatedCode;
		generatedCode =
				Ocl2ForEclipseFacade.generateAspectJCode(parsedConstraints.iterator()
						.next(), Ocl2ForEclipseFacade.getJavaCodeGeneratorSettings());

		assertNotNull(generatedCode);

		CodegenTestPerformer.getInstance().compareStringAndFile(
				"resources/sltest/" + directory + "/instrumented/" + fileName + ".txt",
				generatedCode);
	}
}