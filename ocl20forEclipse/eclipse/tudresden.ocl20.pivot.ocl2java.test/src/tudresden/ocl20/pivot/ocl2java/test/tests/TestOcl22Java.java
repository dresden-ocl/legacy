/*
Copyright (C) 2008-2010 by Claas Wilke (claaswilke@gmx.net)

This file is part of the OCL 2 Java Code Generator of Dresden OCL2 for Eclipse.

Dresden OCL2 for Eclipse is free software: you can redistribute it and/or modify 
it under the terms of the GNU Lesser General Public License as published by the 
Free Software Foundation, either version 3 of the License, or (at your option)
any later version.

Dresden OCL2 for Eclipse is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License 
for more details.

You should have received a copy of the GNU Lesser General Public License along 
with Dresden OCL2 for Eclipse. If not, see <http://www.gnu.org/licenses/>.
 */

package tudresden.ocl20.pivot.ocl2java.test.tests;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.io.File;
import java.util.List;

import org.junit.BeforeClass;
import org.junit.Test;

import tudresden.ocl20.pivot.facade.OCL2ParsingException;
import tudresden.ocl20.pivot.facade.Ocl2ForEclipseFacade;
import tudresden.ocl20.pivot.modelbus.ModelAccessException;
import tudresden.ocl20.pivot.modelbus.model.IModel;
import tudresden.ocl20.pivot.ocl2java.exception.Ocl22CodeException;
import tudresden.ocl20.pivot.ocl2java.test.Ocl2CodeTestPlugin;
import tudresden.ocl20.pivot.pivotmodel.Constraint;

/**
 * <p>
 * Contains some test cases to test the Ocl22Java code generator.
 * </p>
 * 
 * @author Claas Wilke
 */
public class TestOcl22Java {

	/** The location of the {@link IModel} used for testing. */
	private static final String MODEL_NAME = "resources/models/model01.uml";

	/** The {@link IModel} used for testing. */
	private static IModel testModel;

	/**
	 * <p>
	 * Initializes the test cases.
	 * </p>
	 * 
	 * @throws ModelAccessException
	 * @throws IllegalArgumentException
	 */
	@BeforeClass
	public static void setUp() throws IllegalArgumentException,
			ModelAccessException {

		File modelFile;
		modelFile = TestOcl22Java.getFile(MODEL_NAME);

		testModel =
				Ocl2ForEclipseFacade.getModel(modelFile,
						Ocl2ForEclipseFacade.UML2_MetaModel);
	}

	/**
	 * <p>
	 * Returns the file object for a given path relative to the plug-in's
	 * directory.
	 * </p>
	 * 
	 * @param path
	 *          The path of the resource.
	 * @return The found {@link File} object.
	 */
	private static File getFile(String path) {

		String filePath;
		filePath = Ocl2CodeTestPlugin.getDefault().getBundle().getLocation();
		/* Remove 'reference:file:/' */
		filePath = filePath.substring(16);

		filePath +=
				Ocl2CodeTestPlugin.getDefault().getBundle().getResource(path).getPath()
						.substring(1);

		File constraintFile;
		constraintFile = new File(filePath);

		assertTrue(constraintFile.exists());

		return constraintFile;
	}

	/**
	 * <p>
	 * Tests the instrumentation of the constraint
	 * <code>resources/constraints/allInstances01.ocl</code>.
	 * </p>
	 * 
	 * @throws ModelAccessException
	 * @throws OCL2ParsingException
	 * @throws IllegalArgumentException
	 * @throws Ocl22CodeException
	 */
	@Test
	public void testAllInstances01() throws IllegalArgumentException,
			OCL2ParsingException, ModelAccessException, Ocl22CodeException {

		this.compareCodeGeneration("allInstances01");
	}

	/**
	 * <p>
	 * Compares code generated by a given constraints file's name with its
	 * expected result.
	 * </p>
	 * 
	 * @param fileName
	 *          The name of the file that shall be checked.
	 * @throws OCL2ParsingException
	 * @throws ModelAccessException
	 * @throws Ocl22CodeException
	 */
	private void compareCodeGeneration(String fileName)
			throws OCL2ParsingException, ModelAccessException, Ocl22CodeException {

		/* Parse the constraint. */
		File constraintFile;
		constraintFile =
				TestOcl22Java.getFile("resources/constraints/" + fileName + ".ocl");

		List<Constraint> parsedConstraints;
		parsedConstraints =
				Ocl2ForEclipseFacade.parseConstraints(constraintFile, testModel, true);

		assertNotNull(parsedConstraints);
		assertEquals(1, parsedConstraints.size());

		String generatedCode;
		generatedCode =
				Ocl2ForEclipseFacade.generateAspectJCode(parsedConstraints.iterator()
						.next(), Ocl2ForEclipseFacade.getJavaCodeGeneratorSettings());

		assertNotNull(generatedCode);

		CodegenTestPerformer.getInstance().compareStringAndFile(
				"resources/constraints/" + fileName + ".txt", generatedCode);
	}
}