/*
    Copyright (C) 2008  Nils (s0006383@inf.tu-dresden.de)

    This file is part of the OCL parser of the Dresden OCL2 for Eclipse.

    The OCL parser is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    The OCL parser is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with the OCL parser.  If not, see <http://www.gnu.org/licenses/>.
.
*/

public aspect PrimitiveLiteralExpASTComputation {
	/*
	 * OCL-Specification:
	 * 
	 * [A] PrimitiveLiteralExpCS ::= IntegerLiteralExpCS
	 * [B] PrimitiveLiteralExpCS ::= RealLiteralExpCS
	 * [C] PrimitiveLiteralExpCS ::= StringLiteralExpCS
	 * [D] PrimitiveLiteralExpCS ::= BooleanLiteralExpCS
	 */
	abstract public PrimitiveLiteralExp PrimitiveLiteralExpAS.computeASM(Environment env) throws BuildingASMException;
	
	/*
	 * OCL-Specification:
	 * 
	 * [A] BooleanLiteralExpCS ::= 'true'
	 * [B] BooleanLiteralExpCS ::= 'false'
	 */
	public BooleanLiteralExp BooleanLiteralExpAS.computeASM(Environment env) throws BuildingASMException {
		IModelFactory factory = env.getExpFactory();
		TokenAS token = this.getValue();
		BooleanLiteralExp exp = null;
		if (token.getValue().equals("true")) return factory.createBooleanLiteralExp(true);
		if (token.getValue().equals("false")) return factory.createBooleanLiteralExp(false);
		
		throw new BuildingASMException("The BooleanLiteralExpAS instance has an invalid token value. It is not true or false", token);
	}
	
	abstract public NumericLiteralExp NumericalLiteralExpAS.computeASM(Environment env) throws BuildingASMException;
	
	/*
	 * OCL-Specification:
	 * 
	 * IntegerLiteralExpCS ::= <String>
	 */
	public IntegerLiteralExp IntegerLiteralExpAS.computeASM(Environment env) throws BuildingASMException {
		IModelFactory factory = env.getExpFactory();
		TokenAS token = getValue();
		int intValue;
		try {
			intValue = Integer.valueOf(token.getValue());
		}
		catch(NumberFormatException ex) {
			throw new BuildingASMException("The value of the integer literal is not an integer.", token);
		}
		
		return factory.createIntegerLiteralExp(intValue);
	}
	
	/*
	 * OCL-Specification:
	 * 
	 * RealLiteralExpCS ::= <String>
	 */
	public RealLiteralExp RealLiteralExpAS.computeASM(Environment env) throws BuildingASMException {
		IModelFactory factory = env.getExpFactory();
		TokenAS token = getValue();
		float floatValue;
		
		try {
			floatValue = Float.valueOf(token.getValue());
		}
		catch( NumberFormatException ex) {
			throw new BuildingASMException("The value of the real literal is not a real value.", token);
		}
		
		return factory.createRealLiteralExp(floatValue);
	}
	
	/*
	 * OCL-Specification:
	 * 
	 * StringLiteralExpCS ::= "<String>"
	 * 
	 * Notice:
	 * This method removes the quotation marks.
	 */
	public StringLiteralExp StringLiteralExpAS.computeASM(Environment env) throws BuildingASMException {
		IModelFactory factory = env.getExpFactory();
		TokenAS token = getValue();
		
		String value = token.getValue();
		
		if((value.charAt(0) == '\'') && (value.charAt(value.length()-1) == '\'')) return factory.createStringLiteralExp(value.substring(1,value.length()-1));
		
		throw new BuildingASMException("The value of the string literal is not a string literal value.", token);
	}
}