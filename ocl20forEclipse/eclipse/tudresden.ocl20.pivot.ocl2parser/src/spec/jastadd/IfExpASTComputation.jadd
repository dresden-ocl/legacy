/*
    Copyright (C) 2008  Nils (s0006383@inf.tu-dresden.de)

    This file is part of the OCL parser of the Dresden OCL2 for Eclipse.

    The OCL parser is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    The OCL parser is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with the OCL parser.  If not, see <http://www.gnu.org/licenses/>.
.
*/


/**
 * This aspect weaves one method into the IfExpAS-class to compute an IfExp-instance
 * of essential ocl.
 */
public aspect IfExpASMComputation {
	/*
	 * OCL-Specification:
	 * 
	 * IfExpCS ::= 'if' OclExpression[1] 'then' OclExpression[2] 'else' OclExpression[3] 'endif'
	 * 
	 * Meaning:
	 * This method is very simple. It calls the compute-methods of the children and
	 * assemble all parts to a IfExp-instance.
	 */
	public IfExp IfExpAS.computeASM(Environment env) throws BuildingASMException {
		IModelFactory factory = env.getExpFactory();
		OclExpression condition = this.getCondition().computeASM(env);
		OclExpression thenExpression = this.getThenExpression().computeASM(env);
		OclExpression elseExpression = this.getElseExpression().computeASM(env);
		
		return factory.createIfExp(condition, thenExpression, elseExpression);
	}
}