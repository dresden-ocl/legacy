/*
    Copyright (C) 2008  Nils (s0006383@inf.tu-dresden.de)

    This file is part of the OCL parser of the Dresden OCL2 for Eclipse.

    The OCL parser is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    The OCL parser is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with the OCL parser.  If not, see <http://www.gnu.org/licenses/>.
.
*/

public aspect NamespaceASMComputation {
	/*
	 * OCL-specification:
	 * 
	 * [A] packageDeclarationCS ::= 'package' pathNameCS contextDeclCS* 'endpackage'
	 * [B] packageDeclarationCS ::= contextDeclCS*
	 * 
	 * Notice:
	 * Only the first rule is realized by this method. The second rule isn't implemented yet in
	 * the parser, so the user can only write expressions that begins witht the keyword 'package'.
	 * The compute-method will return a namespace.
	 */
	public Namespace PackagedConstraintAS.computeASM(Environment env) throws BuildingASMException {
		EssentialOclFactory factory = env.getExpFactory();
		
		if (getName().getNumTokenAS() == 0) throw new BuildingASMException("The path name must not be" +
				" empty in the package declaration.", null);
		
		TokenAS token = getName().getTokenAS(0);
		
		java.util.List pathNameList = new ArrayList();
		for(int i = 0; i < getName().getNumTokenAS(); i++) {
			pathNameList.add(getName().getTokenAS(i).getValue());
		}
		
		Namespace nm = env.lookupNamespace(pathNameList);
		if (nm == null) throw new BuildingASMException("The namespace doesn't exists.", token);
		
		env.setNamespace(nm);
		
		for(int i = 0; i < getNumContext(); i++) {
			java.util.List constraintList = getContext(i).computeASM(env);
			
			Iterator it = constraintList.iterator();
			while(it.hasNext()) {
				Constraint constraint = (Constraint) it.next();
				nm.addRule(constraint);
			}
		}
		
		return nm;
		
		
	}
}