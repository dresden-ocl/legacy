/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.sablecc.analysis;

import org.sablecc.sablecc.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object in);
    Object getOut(Node node);
    void setOut(Node node, Object out);

    void caseStart(Start node);
    void caseAGrammar(AGrammar node);
    void caseAPackage(APackage node);
    void caseAPkgName(APkgName node);
    void caseAPkgNameTail(APkgNameTail node);
    void caseAHelpers(AHelpers node);
    void caseAHelperDef(AHelperDef node);
    void caseAStates(AStates node);
    void caseAIdList(AIdList node);
    void caseAIdListTail(AIdListTail node);
    void caseATokens(ATokens node);
    void caseATokenDef(ATokenDef node);
    void caseAStateList(AStateList node);
    void caseAStateListTail(AStateListTail node);
    void caseATransition(ATransition node);
    void caseAIgnTokens(AIgnTokens node);
    void caseALookAhead(ALookAhead node);
    void caseARegExp(ARegExp node);
    void caseARegExpTail(ARegExpTail node);
    void caseAConcat(AConcat node);
    void caseAUnExp(AUnExp node);
    void caseACharBasic(ACharBasic node);
    void caseASetBasic(ASetBasic node);
    void caseAStringBasic(AStringBasic node);
    void caseAIdBasic(AIdBasic node);
    void caseARegExpBasic(ARegExpBasic node);
    void caseACharChar(ACharChar node);
    void caseADecChar(ADecChar node);
    void caseAHexChar(AHexChar node);
    void caseAOperationSet(AOperationSet node);
    void caseAIntervalSet(AIntervalSet node);
    void caseAStarUnOp(AStarUnOp node);
    void caseAQMarkUnOp(AQMarkUnOp node);
    void caseAPlusUnOp(APlusUnOp node);
    void caseAPlusBinOp(APlusBinOp node);
    void caseAMinusBinOp(AMinusBinOp node);
    void caseAProductions(AProductions node);
    void caseAProd(AProd node);
    void caseAAlts(AAlts node);
    void caseAAltsTail(AAltsTail node);
    void caseAParsedAlt(AParsedAlt node);
    void caseAIgnoredAlt(AIgnoredAlt node);
    void caseAAltName(AAltName node);
    void caseAAstType(AAstType node);
    void caseASimpleExternalName(ASimpleExternalName node);
    void caseAExtendedExternalName(AExtendedExternalName node);
    void caseAGenericExternalName(AGenericExternalName node);
    void caseAElem(AElem node);
    void caseAElemName(AElemName node);
    void caseATokenSpecifier(ATokenSpecifier node);
    void caseAProductionSpecifier(AProductionSpecifier node);

    void caseTPkgId(TPkgId node);
    void caseTDot(TDot node);
    void caseTBlank(TBlank node);
    void caseTComment(TComment node);
    void caseTSemicolon(TSemicolon node);
    void caseTPackage(TPackage node);
    void caseTStates(TStates node);
    void caseTHelpers(THelpers node);
    void caseTTokens(TTokens node);
    void caseTIgnored(TIgnored node);
    void caseTProductions(TProductions node);
    void caseTTokenSpecifier(TTokenSpecifier node);
    void caseTProductionSpecifier(TProductionSpecifier node);
    void caseTDDot(TDDot node);
    void caseTEqual(TEqual node);
    void caseTLBkt(TLBkt node);
    void caseTRBkt(TRBkt node);
    void caseTLAbkt(TLAbkt node);
    void caseTRAbkt(TRAbkt node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBrace(TLBrace node);
    void caseTRBrace(TRBrace node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTQMark(TQMark node);
    void caseTStar(TStar node);
    void caseTBar(TBar node);
    void caseTComma(TComma node);
    void caseTSlash(TSlash node);
    void caseTRArrow(TRArrow node);
    void caseTLArrow(TLArrow node);
    void caseTChain(TChain node);
    void caseTCustomheritage(TCustomheritage node);
    void caseTMaketree(TMaketree node);
    void caseTNocreate(TNocreate node);
    void caseTColon(TColon node);
    void caseTExclam(TExclam node);
    void caseTInherit(TInherit node);
    void caseTDerive(TDerive node);
    void caseTId(TId node);
    void caseTExternalName(TExternalName node);
    void caseTChar(TChar node);
    void caseTDecChar(TDecChar node);
    void caseTHexChar(THexChar node);
    void caseTString(TString node);
    void caseEOF(EOF node);
}
