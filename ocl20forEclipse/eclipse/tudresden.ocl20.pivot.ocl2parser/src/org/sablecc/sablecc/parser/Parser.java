/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.sablecc.parser;

import org.sablecc.sablecc.lexer.*;
import org.sablecc.sablecc.node.*;
import org.sablecc.sablecc.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected Node node;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    protected void filter() throws ParserException, LexerException, IOException
    {
    }

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;

        if(actionTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Parser.class.getResourceAsStream("parser.dat")));

                // read actionTable
                int length = s.readInt();
                actionTable = new int[length][][];
                for(int i = 0; i < actionTable.length; i++)
                {
                    length = s.readInt();
                    actionTable[i] = new int[length][3];
                    for(int j = 0; j < actionTable[i].length; j++)
                    {
                        for(int k = 0; k < 3; k++)
                        {
                            actionTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read gotoTable
                length = s.readInt();
                gotoTable = new int[length][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][2];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        for(int k = 0; k < 2; k++)
                        {
                            gotoTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read errorMessages
                length = s.readInt();
                errorMessages = new String[length];
                for(int i = 0; i < errorMessages.length; i++)
                {
                    length = s.readInt();
                    StringBuffer buffer = new StringBuffer();

                    for(int j = 0; j < length; j++)
                    {
                        buffer.append(s.readChar());
                    }
                    errorMessages[i] = buffer.toString();
                }

                // read errors
                length = s.readInt();
                errors = new int[length];
                for(int i = 0; i < errors.length; i++)
                {
                    errors[i] = s.readInt();
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
            }
        }
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private void push(int state, Node node, boolean filter) throws ParserException, LexerException, IOException
    {
        this.node = node;

        if(filter)
        {
            filter();
        }

        if(!stack.hasNext())
        {
            stack.add(new State(state, this.node));
            return;
        }

        State s = (State) stack.next();
        s.state = state;
        s.node = this.node;
    }

    private int state()
    {
        State s = (State) stack.previous();
        stack.next();
        return s.state;
    }

    private Node pop()
    {
        return (Node) ((State) stack.previous()).node;
    }

    private int index(Switchable token)
    {
        converter.index = -1;
        token.apply(converter);
        return converter.index;
    }

    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, false);

        List ign = null;
        while(true)
        {
            while(index(lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedLinkedList(NodeCast.instance);
                }

                ign.add(lexer.next());
            }

            if(ign != null)
            {
                ignoredTokens.setIn(lexer.peek(), ign);
                ign = null;
            }

            last_pos = lexer.peek().getPos();
            last_line = lexer.peek().getLine();
            last_token = lexer.peek();

            int index = index(lexer.peek());
            action[0] = actionTable[state()][0][1];
            action[1] = actionTable[state()][0][2];

            int low = 1;
            int high = actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[state()][middle][1];
                    action[1] = actionTable[state()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
                    push(action[1], lexer.next(), true);
                    last_shift = action[1];
                    break;
                case REDUCE:
                    switch(action[1])
                    {
                    case 0: { Node node = new0(); push(goTo(0), node, true); } break;
                    case 1: { Node node = new1(); push(goTo(0), node, true); } break;
                    case 2: { Node node = new2(); push(goTo(0), node, true); } break;
                    case 3: { Node node = new3(); push(goTo(0), node, true); } break;
                    case 4: { Node node = new4(); push(goTo(0), node, true); } break;
                    case 5: { Node node = new5(); push(goTo(0), node, true); } break;
                    case 6: { Node node = new6(); push(goTo(0), node, true); } break;
                    case 7: { Node node = new7(); push(goTo(0), node, true); } break;
                    case 8: { Node node = new8(); push(goTo(0), node, true); } break;
                    case 9: { Node node = new9(); push(goTo(0), node, true); } break;
                    case 10: { Node node = new10(); push(goTo(0), node, true); } break;
                    case 11: { Node node = new11(); push(goTo(0), node, true); } break;
                    case 12: { Node node = new12(); push(goTo(0), node, true); } break;
                    case 13: { Node node = new13(); push(goTo(0), node, true); } break;
                    case 14: { Node node = new14(); push(goTo(0), node, true); } break;
                    case 15: { Node node = new15(); push(goTo(0), node, true); } break;
                    case 16: { Node node = new16(); push(goTo(0), node, true); } break;
                    case 17: { Node node = new17(); push(goTo(0), node, true); } break;
                    case 18: { Node node = new18(); push(goTo(0), node, true); } break;
                    case 19: { Node node = new19(); push(goTo(0), node, true); } break;
                    case 20: { Node node = new20(); push(goTo(0), node, true); } break;
                    case 21: { Node node = new21(); push(goTo(0), node, true); } break;
                    case 22: { Node node = new22(); push(goTo(0), node, true); } break;
                    case 23: { Node node = new23(); push(goTo(0), node, true); } break;
                    case 24: { Node node = new24(); push(goTo(0), node, true); } break;
                    case 25: { Node node = new25(); push(goTo(0), node, true); } break;
                    case 26: { Node node = new26(); push(goTo(0), node, true); } break;
                    case 27: { Node node = new27(); push(goTo(0), node, true); } break;
                    case 28: { Node node = new28(); push(goTo(0), node, true); } break;
                    case 29: { Node node = new29(); push(goTo(0), node, true); } break;
                    case 30: { Node node = new30(); push(goTo(0), node, true); } break;
                    case 31: { Node node = new31(); push(goTo(0), node, true); } break;
                    case 32: { Node node = new32(); push(goTo(0), node, true); } break;
                    case 33: { Node node = new33(); push(goTo(0), node, true); } break;
                    case 34: { Node node = new34(); push(goTo(0), node, true); } break;
                    case 35: { Node node = new35(); push(goTo(0), node, true); } break;
                    case 36: { Node node = new36(); push(goTo(0), node, true); } break;
                    case 37: { Node node = new37(); push(goTo(0), node, true); } break;
                    case 38: { Node node = new38(); push(goTo(0), node, true); } break;
                    case 39: { Node node = new39(); push(goTo(0), node, true); } break;
                    case 40: { Node node = new40(); push(goTo(0), node, true); } break;
                    case 41: { Node node = new41(); push(goTo(0), node, true); } break;
                    case 42: { Node node = new42(); push(goTo(0), node, true); } break;
                    case 43: { Node node = new43(); push(goTo(0), node, true); } break;
                    case 44: { Node node = new44(); push(goTo(0), node, true); } break;
                    case 45: { Node node = new45(); push(goTo(0), node, true); } break;
                    case 46: { Node node = new46(); push(goTo(0), node, true); } break;
                    case 47: { Node node = new47(); push(goTo(0), node, true); } break;
                    case 48: { Node node = new48(); push(goTo(0), node, true); } break;
                    case 49: { Node node = new49(); push(goTo(0), node, true); } break;
                    case 50: { Node node = new50(); push(goTo(0), node, true); } break;
                    case 51: { Node node = new51(); push(goTo(0), node, true); } break;
                    case 52: { Node node = new52(); push(goTo(0), node, true); } break;
                    case 53: { Node node = new53(); push(goTo(0), node, true); } break;
                    case 54: { Node node = new54(); push(goTo(0), node, true); } break;
                    case 55: { Node node = new55(); push(goTo(0), node, true); } break;
                    case 56: { Node node = new56(); push(goTo(0), node, true); } break;
                    case 57: { Node node = new57(); push(goTo(0), node, true); } break;
                    case 58: { Node node = new58(); push(goTo(0), node, true); } break;
                    case 59: { Node node = new59(); push(goTo(0), node, true); } break;
                    case 60: { Node node = new60(); push(goTo(0), node, true); } break;
                    case 61: { Node node = new61(); push(goTo(0), node, true); } break;
                    case 62: { Node node = new62(); push(goTo(0), node, true); } break;
                    case 63: { Node node = new63(); push(goTo(0), node, true); } break;
                    case 64: { Node node = new64(); push(goTo(1), node, true); } break;
                    case 65: { Node node = new65(); push(goTo(2), node, true); } break;
                    case 66: { Node node = new66(); push(goTo(2), node, true); } break;
                    case 67: { Node node = new67(); push(goTo(36), node, false); } break;
                    case 68: { Node node = new68(); push(goTo(36), node, false); } break;
                    case 69: { Node node = new69(); push(goTo(3), node, true); } break;
                    case 70: { Node node = new70(); push(goTo(4), node, true); } break;
                    case 71: { Node node = new71(); push(goTo(37), node, false); } break;
                    case 72: { Node node = new72(); push(goTo(37), node, false); } break;
                    case 73: { Node node = new73(); push(goTo(5), node, true); } break;
                    case 74: { Node node = new74(); push(goTo(6), node, true); } break;
                    case 75: { Node node = new75(); push(goTo(7), node, true); } break;
                    case 76: { Node node = new76(); push(goTo(7), node, true); } break;
                    case 77: { Node node = new77(); push(goTo(38), node, false); } break;
                    case 78: { Node node = new78(); push(goTo(38), node, false); } break;
                    case 79: { Node node = new79(); push(goTo(8), node, true); } break;
                    case 80: { Node node = new80(); push(goTo(9), node, true); } break;
                    case 81: { Node node = new81(); push(goTo(39), node, false); } break;
                    case 82: { Node node = new82(); push(goTo(39), node, false); } break;
                    case 83: { Node node = new83(); push(goTo(10), node, true); } break;
                    case 84: { Node node = new84(); push(goTo(10), node, true); } break;
                    case 85: { Node node = new85(); push(goTo(10), node, true); } break;
                    case 86: { Node node = new86(); push(goTo(10), node, true); } break;
                    case 87: { Node node = new87(); push(goTo(10), node, true); } break;
                    case 88: { Node node = new88(); push(goTo(10), node, true); } break;
                    case 89: { Node node = new89(); push(goTo(10), node, true); } break;
                    case 90: { Node node = new90(); push(goTo(10), node, true); } break;
                    case 91: { Node node = new91(); push(goTo(10), node, true); } break;
                    case 92: { Node node = new92(); push(goTo(10), node, true); } break;
                    case 93: { Node node = new93(); push(goTo(10), node, true); } break;
                    case 94: { Node node = new94(); push(goTo(10), node, true); } break;
                    case 95: { Node node = new95(); push(goTo(10), node, true); } break;
                    case 96: { Node node = new96(); push(goTo(10), node, true); } break;
                    case 97: { Node node = new97(); push(goTo(10), node, true); } break;
                    case 98: { Node node = new98(); push(goTo(10), node, true); } break;
                    case 99: { Node node = new99(); push(goTo(11), node, true); } break;
                    case 100: { Node node = new100(); push(goTo(11), node, true); } break;
                    case 101: { Node node = new101(); push(goTo(11), node, true); } break;
                    case 102: { Node node = new102(); push(goTo(40), node, false); } break;
                    case 103: { Node node = new103(); push(goTo(40), node, false); } break;
                    case 104: { Node node = new104(); push(goTo(11), node, true); } break;
                    case 105: { Node node = new105(); push(goTo(12), node, true); } break;
                    case 106: { Node node = new106(); push(goTo(12), node, true); } break;
                    case 107: { Node node = new107(); push(goTo(13), node, true); } break;
                    case 108: { Node node = new108(); push(goTo(14), node, true); } break;
                    case 109: { Node node = new109(); push(goTo(14), node, true); } break;
                    case 110: { Node node = new110(); push(goTo(15), node, true); } break;
                    case 111: { Node node = new111(); push(goTo(16), node, true); } break;
                    case 112: { Node node = new112(); push(goTo(16), node, true); } break;
                    case 113: { Node node = new113(); push(goTo(41), node, false); } break;
                    case 114: { Node node = new114(); push(goTo(41), node, false); } break;
                    case 115: { Node node = new115(); push(goTo(17), node, true); } break;
                    case 116: { Node node = new116(); push(goTo(18), node, true); } break;
                    case 117: { Node node = new117(); push(goTo(18), node, true); } break;
                    case 118: { Node node = new118(); push(goTo(42), node, false); } break;
                    case 119: { Node node = new119(); push(goTo(42), node, false); } break;
                    case 120: { Node node = new120(); push(goTo(19), node, true); } break;
                    case 121: { Node node = new121(); push(goTo(19), node, true); } break;
                    case 122: { Node node = new122(); push(goTo(20), node, true); } break;
                    case 123: { Node node = new123(); push(goTo(20), node, true); } break;
                    case 124: { Node node = new124(); push(goTo(20), node, true); } break;
                    case 125: { Node node = new125(); push(goTo(20), node, true); } break;
                    case 126: { Node node = new126(); push(goTo(20), node, true); } break;
                    case 127: { Node node = new127(); push(goTo(21), node, true); } break;
                    case 128: { Node node = new128(); push(goTo(21), node, true); } break;
                    case 129: { Node node = new129(); push(goTo(21), node, true); } break;
                    case 130: { Node node = new130(); push(goTo(22), node, true); } break;
                    case 131: { Node node = new131(); push(goTo(22), node, true); } break;
                    case 132: { Node node = new132(); push(goTo(23), node, true); } break;
                    case 133: { Node node = new133(); push(goTo(23), node, true); } break;
                    case 134: { Node node = new134(); push(goTo(23), node, true); } break;
                    case 135: { Node node = new135(); push(goTo(24), node, true); } break;
                    case 136: { Node node = new136(); push(goTo(24), node, true); } break;
                    case 137: { Node node = new137(); push(goTo(25), node, true); } break;
                    case 138: { Node node = new138(); push(goTo(43), node, false); } break;
                    case 139: { Node node = new139(); push(goTo(43), node, false); } break;
                    case 140: { Node node = new140(); push(goTo(26), node, true); } break;
                    case 141: { Node node = new141(); push(goTo(26), node, true); } break;
                    case 142: { Node node = new142(); push(goTo(26), node, true); } break;
                    case 143: { Node node = new143(); push(goTo(26), node, true); } break;
                    case 144: { Node node = new144(); push(goTo(27), node, true); } break;
                    case 145: { Node node = new145(); push(goTo(27), node, true); } break;
                    case 146: { Node node = new146(); push(goTo(44), node, false); } break;
                    case 147: { Node node = new147(); push(goTo(44), node, false); } break;
                    case 148: { Node node = new148(); push(goTo(28), node, true); } break;
                    case 149: { Node node = new149(); push(goTo(29), node, true); } break;
                    case 150: { Node node = new150(); push(goTo(29), node, true); } break;
                    case 151: { Node node = new151(); push(goTo(29), node, true); } break;
                    case 152: { Node node = new152(); push(goTo(29), node, true); } break;
                    case 153: { Node node = new153(); push(goTo(29), node, true); } break;
                    case 154: { Node node = new154(); push(goTo(45), node, false); } break;
                    case 155: { Node node = new155(); push(goTo(45), node, false); } break;
                    case 156: { Node node = new156(); push(goTo(29), node, true); } break;
                    case 157: { Node node = new157(); push(goTo(29), node, true); } break;
                    case 158: { Node node = new158(); push(goTo(29), node, true); } break;
                    case 159: { Node node = new159(); push(goTo(29), node, true); } break;
                    case 160: { Node node = new160(); push(goTo(29), node, true); } break;
                    case 161: { Node node = new161(); push(goTo(29), node, true); } break;
                    case 162: { Node node = new162(); push(goTo(29), node, true); } break;
                    case 163: { Node node = new163(); push(goTo(29), node, true); } break;
                    case 164: { Node node = new164(); push(goTo(29), node, true); } break;
                    case 165: { Node node = new165(); push(goTo(29), node, true); } break;
                    case 166: { Node node = new166(); push(goTo(29), node, true); } break;
                    case 167: { Node node = new167(); push(goTo(29), node, true); } break;
                    case 168: { Node node = new168(); push(goTo(29), node, true); } break;
                    case 169: { Node node = new169(); push(goTo(29), node, true); } break;
                    case 170: { Node node = new170(); push(goTo(29), node, true); } break;
                    case 171: { Node node = new171(); push(goTo(29), node, true); } break;
                    case 172: { Node node = new172(); push(goTo(29), node, true); } break;
                    case 173: { Node node = new173(); push(goTo(29), node, true); } break;
                    case 174: { Node node = new174(); push(goTo(29), node, true); } break;
                    case 175: { Node node = new175(); push(goTo(29), node, true); } break;
                    case 176: { Node node = new176(); push(goTo(29), node, true); } break;
                    case 177: { Node node = new177(); push(goTo(29), node, true); } break;
                    case 178: { Node node = new178(); push(goTo(29), node, true); } break;
                    case 179: { Node node = new179(); push(goTo(29), node, true); } break;
                    case 180: { Node node = new180(); push(goTo(29), node, true); } break;
                    case 181: { Node node = new181(); push(goTo(29), node, true); } break;
                    case 182: { Node node = new182(); push(goTo(29), node, true); } break;
                    case 183: { Node node = new183(); push(goTo(29), node, true); } break;
                    case 184: { Node node = new184(); push(goTo(29), node, true); } break;
                    case 185: { Node node = new185(); push(goTo(29), node, true); } break;
                    case 186: { Node node = new186(); push(goTo(29), node, true); } break;
                    case 187: { Node node = new187(); push(goTo(30), node, true); } break;
                    case 188: { Node node = new188(); push(goTo(31), node, true); } break;
                    case 189: { Node node = new189(); push(goTo(32), node, true); } break;
                    case 190: { Node node = new190(); push(goTo(32), node, true); } break;
                    case 191: { Node node = new191(); push(goTo(33), node, true); } break;
                    case 192: { Node node = new192(); push(goTo(33), node, true); } break;
                    case 193: { Node node = new193(); push(goTo(33), node, true); } break;
                    case 194: { Node node = new194(); push(goTo(33), node, true); } break;
                    case 195: { Node node = new195(); push(goTo(33), node, true); } break;
                    case 196: { Node node = new196(); push(goTo(33), node, true); } break;
                    case 197: { Node node = new197(); push(goTo(33), node, true); } break;
                    case 198: { Node node = new198(); push(goTo(33), node, true); } break;
                    case 199: { Node node = new199(); push(goTo(33), node, true); } break;
                    case 200: { Node node = new200(); push(goTo(33), node, true); } break;
                    case 201: { Node node = new201(); push(goTo(33), node, true); } break;
                    case 202: { Node node = new202(); push(goTo(33), node, true); } break;
                    case 203: { Node node = new203(); push(goTo(33), node, true); } break;
                    case 204: { Node node = new204(); push(goTo(33), node, true); } break;
                    case 205: { Node node = new205(); push(goTo(33), node, true); } break;
                    case 206: { Node node = new206(); push(goTo(33), node, true); } break;
                    case 207: { Node node = new207(); push(goTo(33), node, true); } break;
                    case 208: { Node node = new208(); push(goTo(33), node, true); } break;
                    case 209: { Node node = new209(); push(goTo(33), node, true); } break;
                    case 210: { Node node = new210(); push(goTo(33), node, true); } break;
                    case 211: { Node node = new211(); push(goTo(33), node, true); } break;
                    case 212: { Node node = new212(); push(goTo(33), node, true); } break;
                    case 213: { Node node = new213(); push(goTo(33), node, true); } break;
                    case 214: { Node node = new214(); push(goTo(33), node, true); } break;
                    case 215: { Node node = new215(); push(goTo(33), node, true); } break;
                    case 216: { Node node = new216(); push(goTo(33), node, true); } break;
                    case 217: { Node node = new217(); push(goTo(33), node, true); } break;
                    case 218: { Node node = new218(); push(goTo(33), node, true); } break;
                    case 219: { Node node = new219(); push(goTo(33), node, true); } break;
                    case 220: { Node node = new220(); push(goTo(33), node, true); } break;
                    case 221: { Node node = new221(); push(goTo(33), node, true); } break;
                    case 222: { Node node = new222(); push(goTo(33), node, true); } break;
                    case 223: { Node node = new223(); push(goTo(33), node, true); } break;
                    case 224: { Node node = new224(); push(goTo(33), node, true); } break;
                    case 225: { Node node = new225(); push(goTo(33), node, true); } break;
                    case 226: { Node node = new226(); push(goTo(33), node, true); } break;
                    case 227: { Node node = new227(); push(goTo(33), node, true); } break;
                    case 228: { Node node = new228(); push(goTo(33), node, true); } break;
                    case 229: { Node node = new229(); push(goTo(33), node, true); } break;
                    case 230: { Node node = new230(); push(goTo(33), node, true); } break;
                    case 231: { Node node = new231(); push(goTo(33), node, true); } break;
                    case 232: { Node node = new232(); push(goTo(33), node, true); } break;
                    case 233: { Node node = new233(); push(goTo(33), node, true); } break;
                    case 234: { Node node = new234(); push(goTo(33), node, true); } break;
                    case 235: { Node node = new235(); push(goTo(33), node, true); } break;
                    case 236: { Node node = new236(); push(goTo(33), node, true); } break;
                    case 237: { Node node = new237(); push(goTo(33), node, true); } break;
                    case 238: { Node node = new238(); push(goTo(33), node, true); } break;
                    case 239: { Node node = new239(); push(goTo(33), node, true); } break;
                    case 240: { Node node = new240(); push(goTo(33), node, true); } break;
                    case 241: { Node node = new241(); push(goTo(33), node, true); } break;
                    case 242: { Node node = new242(); push(goTo(33), node, true); } break;
                    case 243: { Node node = new243(); push(goTo(33), node, true); } break;
                    case 244: { Node node = new244(); push(goTo(33), node, true); } break;
                    case 245: { Node node = new245(); push(goTo(33), node, true); } break;
                    case 246: { Node node = new246(); push(goTo(33), node, true); } break;
                    case 247: { Node node = new247(); push(goTo(33), node, true); } break;
                    case 248: { Node node = new248(); push(goTo(33), node, true); } break;
                    case 249: { Node node = new249(); push(goTo(33), node, true); } break;
                    case 250: { Node node = new250(); push(goTo(33), node, true); } break;
                    case 251: { Node node = new251(); push(goTo(33), node, true); } break;
                    case 252: { Node node = new252(); push(goTo(33), node, true); } break;
                    case 253: { Node node = new253(); push(goTo(33), node, true); } break;
                    case 254: { Node node = new254(); push(goTo(33), node, true); } break;
                    case 255: { Node node = new255(); push(goTo(34), node, true); } break;
                    case 256: { Node node = new256(); push(goTo(35), node, true); } break;
                    case 257: { Node node = new257(); push(goTo(35), node, true); } break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.next();
                        PGrammar node1 = (PGrammar) pop();
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token,
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }

    Node new0()
    {
        PProductions node6 = null;
        PIgnTokens node5 = null;
        PTokens node4 = null;
        PStates node3 = null;
        PHelpers node2 = null;
        PPackage node1 = null;
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new1()
    {
        PProductions node6 = null;
        PIgnTokens node5 = null;
        PTokens node4 = null;
        PStates node3 = null;
        PHelpers node2 = null;
        PPackage node1 = (PPackage) pop();
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new2()
    {
        PProductions node6 = null;
        PIgnTokens node5 = null;
        PTokens node4 = null;
        PStates node3 = null;
        PHelpers node2 = (PHelpers) pop();
        PPackage node1 = null;
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new3()
    {
        PProductions node6 = null;
        PIgnTokens node5 = null;
        PTokens node4 = null;
        PStates node3 = null;
        PHelpers node2 = (PHelpers) pop();
        PPackage node1 = (PPackage) pop();
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new4()
    {
        PProductions node6 = null;
        PIgnTokens node5 = null;
        PTokens node4 = null;
        PStates node3 = (PStates) pop();
        PHelpers node2 = null;
        PPackage node1 = null;
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new5()
    {
        PProductions node6 = null;
        PIgnTokens node5 = null;
        PTokens node4 = null;
        PStates node3 = (PStates) pop();
        PHelpers node2 = null;
        PPackage node1 = (PPackage) pop();
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new6()
    {
        PProductions node6 = null;
        PIgnTokens node5 = null;
        PTokens node4 = null;
        PStates node3 = (PStates) pop();
        PHelpers node2 = (PHelpers) pop();
        PPackage node1 = null;
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new7()
    {
        PProductions node6 = null;
        PIgnTokens node5 = null;
        PTokens node4 = null;
        PStates node3 = (PStates) pop();
        PHelpers node2 = (PHelpers) pop();
        PPackage node1 = (PPackage) pop();
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new8()
    {
        PProductions node6 = null;
        PIgnTokens node5 = null;
        PTokens node4 = (PTokens) pop();
        PStates node3 = null;
        PHelpers node2 = null;
        PPackage node1 = null;
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new9()
    {
        PProductions node6 = null;
        PIgnTokens node5 = null;
        PTokens node4 = (PTokens) pop();
        PStates node3 = null;
        PHelpers node2 = null;
        PPackage node1 = (PPackage) pop();
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new10()
    {
        PProductions node6 = null;
        PIgnTokens node5 = null;
        PTokens node4 = (PTokens) pop();
        PStates node3 = null;
        PHelpers node2 = (PHelpers) pop();
        PPackage node1 = null;
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new11()
    {
        PProductions node6 = null;
        PIgnTokens node5 = null;
        PTokens node4 = (PTokens) pop();
        PStates node3 = null;
        PHelpers node2 = (PHelpers) pop();
        PPackage node1 = (PPackage) pop();
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new12()
    {
        PProductions node6 = null;
        PIgnTokens node5 = null;
        PTokens node4 = (PTokens) pop();
        PStates node3 = (PStates) pop();
        PHelpers node2 = null;
        PPackage node1 = null;
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new13()
    {
        PProductions node6 = null;
        PIgnTokens node5 = null;
        PTokens node4 = (PTokens) pop();
        PStates node3 = (PStates) pop();
        PHelpers node2 = null;
        PPackage node1 = (PPackage) pop();
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new14()
    {
        PProductions node6 = null;
        PIgnTokens node5 = null;
        PTokens node4 = (PTokens) pop();
        PStates node3 = (PStates) pop();
        PHelpers node2 = (PHelpers) pop();
        PPackage node1 = null;
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new15()
    {
        PProductions node6 = null;
        PIgnTokens node5 = null;
        PTokens node4 = (PTokens) pop();
        PStates node3 = (PStates) pop();
        PHelpers node2 = (PHelpers) pop();
        PPackage node1 = (PPackage) pop();
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new16()
    {
        PProductions node6 = null;
        PIgnTokens node5 = (PIgnTokens) pop();
        PTokens node4 = null;
        PStates node3 = null;
        PHelpers node2 = null;
        PPackage node1 = null;
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new17()
    {
        PProductions node6 = null;
        PIgnTokens node5 = (PIgnTokens) pop();
        PTokens node4 = null;
        PStates node3 = null;
        PHelpers node2 = null;
        PPackage node1 = (PPackage) pop();
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new18()
    {
        PProductions node6 = null;
        PIgnTokens node5 = (PIgnTokens) pop();
        PTokens node4 = null;
        PStates node3 = null;
        PHelpers node2 = (PHelpers) pop();
        PPackage node1 = null;
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new19()
    {
        PProductions node6 = null;
        PIgnTokens node5 = (PIgnTokens) pop();
        PTokens node4 = null;
        PStates node3 = null;
        PHelpers node2 = (PHelpers) pop();
        PPackage node1 = (PPackage) pop();
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new20()
    {
        PProductions node6 = null;
        PIgnTokens node5 = (PIgnTokens) pop();
        PTokens node4 = null;
        PStates node3 = (PStates) pop();
        PHelpers node2 = null;
        PPackage node1 = null;
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new21()
    {
        PProductions node6 = null;
        PIgnTokens node5 = (PIgnTokens) pop();
        PTokens node4 = null;
        PStates node3 = (PStates) pop();
        PHelpers node2 = null;
        PPackage node1 = (PPackage) pop();
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new22()
    {
        PProductions node6 = null;
        PIgnTokens node5 = (PIgnTokens) pop();
        PTokens node4 = null;
        PStates node3 = (PStates) pop();
        PHelpers node2 = (PHelpers) pop();
        PPackage node1 = null;
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new23()
    {
        PProductions node6 = null;
        PIgnTokens node5 = (PIgnTokens) pop();
        PTokens node4 = null;
        PStates node3 = (PStates) pop();
        PHelpers node2 = (PHelpers) pop();
        PPackage node1 = (PPackage) pop();
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new24()
    {
        PProductions node6 = null;
        PIgnTokens node5 = (PIgnTokens) pop();
        PTokens node4 = (PTokens) pop();
        PStates node3 = null;
        PHelpers node2 = null;
        PPackage node1 = null;
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new25()
    {
        PProductions node6 = null;
        PIgnTokens node5 = (PIgnTokens) pop();
        PTokens node4 = (PTokens) pop();
        PStates node3 = null;
        PHelpers node2 = null;
        PPackage node1 = (PPackage) pop();
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new26()
    {
        PProductions node6 = null;
        PIgnTokens node5 = (PIgnTokens) pop();
        PTokens node4 = (PTokens) pop();
        PStates node3 = null;
        PHelpers node2 = (PHelpers) pop();
        PPackage node1 = null;
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new27()
    {
        PProductions node6 = null;
        PIgnTokens node5 = (PIgnTokens) pop();
        PTokens node4 = (PTokens) pop();
        PStates node3 = null;
        PHelpers node2 = (PHelpers) pop();
        PPackage node1 = (PPackage) pop();
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new28()
    {
        PProductions node6 = null;
        PIgnTokens node5 = (PIgnTokens) pop();
        PTokens node4 = (PTokens) pop();
        PStates node3 = (PStates) pop();
        PHelpers node2 = null;
        PPackage node1 = null;
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new29()
    {
        PProductions node6 = null;
        PIgnTokens node5 = (PIgnTokens) pop();
        PTokens node4 = (PTokens) pop();
        PStates node3 = (PStates) pop();
        PHelpers node2 = null;
        PPackage node1 = (PPackage) pop();
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new30()
    {
        PProductions node6 = null;
        PIgnTokens node5 = (PIgnTokens) pop();
        PTokens node4 = (PTokens) pop();
        PStates node3 = (PStates) pop();
        PHelpers node2 = (PHelpers) pop();
        PPackage node1 = null;
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new31()
    {
        PProductions node6 = null;
        PIgnTokens node5 = (PIgnTokens) pop();
        PTokens node4 = (PTokens) pop();
        PStates node3 = (PStates) pop();
        PHelpers node2 = (PHelpers) pop();
        PPackage node1 = (PPackage) pop();
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new32()
    {
        PProductions node6 = (PProductions) pop();
        PIgnTokens node5 = null;
        PTokens node4 = null;
        PStates node3 = null;
        PHelpers node2 = null;
        PPackage node1 = null;
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new33()
    {
        PProductions node6 = (PProductions) pop();
        PIgnTokens node5 = null;
        PTokens node4 = null;
        PStates node3 = null;
        PHelpers node2 = null;
        PPackage node1 = (PPackage) pop();
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new34()
    {
        PProductions node6 = (PProductions) pop();
        PIgnTokens node5 = null;
        PTokens node4 = null;
        PStates node3 = null;
        PHelpers node2 = (PHelpers) pop();
        PPackage node1 = null;
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new35()
    {
        PProductions node6 = (PProductions) pop();
        PIgnTokens node5 = null;
        PTokens node4 = null;
        PStates node3 = null;
        PHelpers node2 = (PHelpers) pop();
        PPackage node1 = (PPackage) pop();
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new36()
    {
        PProductions node6 = (PProductions) pop();
        PIgnTokens node5 = null;
        PTokens node4 = null;
        PStates node3 = (PStates) pop();
        PHelpers node2 = null;
        PPackage node1 = null;
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new37()
    {
        PProductions node6 = (PProductions) pop();
        PIgnTokens node5 = null;
        PTokens node4 = null;
        PStates node3 = (PStates) pop();
        PHelpers node2 = null;
        PPackage node1 = (PPackage) pop();
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new38()
    {
        PProductions node6 = (PProductions) pop();
        PIgnTokens node5 = null;
        PTokens node4 = null;
        PStates node3 = (PStates) pop();
        PHelpers node2 = (PHelpers) pop();
        PPackage node1 = null;
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new39()
    {
        PProductions node6 = (PProductions) pop();
        PIgnTokens node5 = null;
        PTokens node4 = null;
        PStates node3 = (PStates) pop();
        PHelpers node2 = (PHelpers) pop();
        PPackage node1 = (PPackage) pop();
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new40()
    {
        PProductions node6 = (PProductions) pop();
        PIgnTokens node5 = null;
        PTokens node4 = (PTokens) pop();
        PStates node3 = null;
        PHelpers node2 = null;
        PPackage node1 = null;
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new41()
    {
        PProductions node6 = (PProductions) pop();
        PIgnTokens node5 = null;
        PTokens node4 = (PTokens) pop();
        PStates node3 = null;
        PHelpers node2 = null;
        PPackage node1 = (PPackage) pop();
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new42()
    {
        PProductions node6 = (PProductions) pop();
        PIgnTokens node5 = null;
        PTokens node4 = (PTokens) pop();
        PStates node3 = null;
        PHelpers node2 = (PHelpers) pop();
        PPackage node1 = null;
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new43()
    {
        PProductions node6 = (PProductions) pop();
        PIgnTokens node5 = null;
        PTokens node4 = (PTokens) pop();
        PStates node3 = null;
        PHelpers node2 = (PHelpers) pop();
        PPackage node1 = (PPackage) pop();
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new44()
    {
        PProductions node6 = (PProductions) pop();
        PIgnTokens node5 = null;
        PTokens node4 = (PTokens) pop();
        PStates node3 = (PStates) pop();
        PHelpers node2 = null;
        PPackage node1 = null;
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new45()
    {
        PProductions node6 = (PProductions) pop();
        PIgnTokens node5 = null;
        PTokens node4 = (PTokens) pop();
        PStates node3 = (PStates) pop();
        PHelpers node2 = null;
        PPackage node1 = (PPackage) pop();
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new46()
    {
        PProductions node6 = (PProductions) pop();
        PIgnTokens node5 = null;
        PTokens node4 = (PTokens) pop();
        PStates node3 = (PStates) pop();
        PHelpers node2 = (PHelpers) pop();
        PPackage node1 = null;
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new47()
    {
        PProductions node6 = (PProductions) pop();
        PIgnTokens node5 = null;
        PTokens node4 = (PTokens) pop();
        PStates node3 = (PStates) pop();
        PHelpers node2 = (PHelpers) pop();
        PPackage node1 = (PPackage) pop();
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new48()
    {
        PProductions node6 = (PProductions) pop();
        PIgnTokens node5 = (PIgnTokens) pop();
        PTokens node4 = null;
        PStates node3 = null;
        PHelpers node2 = null;
        PPackage node1 = null;
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new49()
    {
        PProductions node6 = (PProductions) pop();
        PIgnTokens node5 = (PIgnTokens) pop();
        PTokens node4 = null;
        PStates node3 = null;
        PHelpers node2 = null;
        PPackage node1 = (PPackage) pop();
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new50()
    {
        PProductions node6 = (PProductions) pop();
        PIgnTokens node5 = (PIgnTokens) pop();
        PTokens node4 = null;
        PStates node3 = null;
        PHelpers node2 = (PHelpers) pop();
        PPackage node1 = null;
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new51()
    {
        PProductions node6 = (PProductions) pop();
        PIgnTokens node5 = (PIgnTokens) pop();
        PTokens node4 = null;
        PStates node3 = null;
        PHelpers node2 = (PHelpers) pop();
        PPackage node1 = (PPackage) pop();
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new52()
    {
        PProductions node6 = (PProductions) pop();
        PIgnTokens node5 = (PIgnTokens) pop();
        PTokens node4 = null;
        PStates node3 = (PStates) pop();
        PHelpers node2 = null;
        PPackage node1 = null;
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new53()
    {
        PProductions node6 = (PProductions) pop();
        PIgnTokens node5 = (PIgnTokens) pop();
        PTokens node4 = null;
        PStates node3 = (PStates) pop();
        PHelpers node2 = null;
        PPackage node1 = (PPackage) pop();
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new54()
    {
        PProductions node6 = (PProductions) pop();
        PIgnTokens node5 = (PIgnTokens) pop();
        PTokens node4 = null;
        PStates node3 = (PStates) pop();
        PHelpers node2 = (PHelpers) pop();
        PPackage node1 = null;
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new55()
    {
        PProductions node6 = (PProductions) pop();
        PIgnTokens node5 = (PIgnTokens) pop();
        PTokens node4 = null;
        PStates node3 = (PStates) pop();
        PHelpers node2 = (PHelpers) pop();
        PPackage node1 = (PPackage) pop();
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new56()
    {
        PProductions node6 = (PProductions) pop();
        PIgnTokens node5 = (PIgnTokens) pop();
        PTokens node4 = (PTokens) pop();
        PStates node3 = null;
        PHelpers node2 = null;
        PPackage node1 = null;
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new57()
    {
        PProductions node6 = (PProductions) pop();
        PIgnTokens node5 = (PIgnTokens) pop();
        PTokens node4 = (PTokens) pop();
        PStates node3 = null;
        PHelpers node2 = null;
        PPackage node1 = (PPackage) pop();
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new58()
    {
        PProductions node6 = (PProductions) pop();
        PIgnTokens node5 = (PIgnTokens) pop();
        PTokens node4 = (PTokens) pop();
        PStates node3 = null;
        PHelpers node2 = (PHelpers) pop();
        PPackage node1 = null;
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new59()
    {
        PProductions node6 = (PProductions) pop();
        PIgnTokens node5 = (PIgnTokens) pop();
        PTokens node4 = (PTokens) pop();
        PStates node3 = null;
        PHelpers node2 = (PHelpers) pop();
        PPackage node1 = (PPackage) pop();
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new60()
    {
        PProductions node6 = (PProductions) pop();
        PIgnTokens node5 = (PIgnTokens) pop();
        PTokens node4 = (PTokens) pop();
        PStates node3 = (PStates) pop();
        PHelpers node2 = null;
        PPackage node1 = null;
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new61()
    {
        PProductions node6 = (PProductions) pop();
        PIgnTokens node5 = (PIgnTokens) pop();
        PTokens node4 = (PTokens) pop();
        PStates node3 = (PStates) pop();
        PHelpers node2 = null;
        PPackage node1 = (PPackage) pop();
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new62()
    {
        PProductions node6 = (PProductions) pop();
        PIgnTokens node5 = (PIgnTokens) pop();
        PTokens node4 = (PTokens) pop();
        PStates node3 = (PStates) pop();
        PHelpers node2 = (PHelpers) pop();
        PPackage node1 = null;
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new63()
    {
        PProductions node6 = (PProductions) pop();
        PIgnTokens node5 = (PIgnTokens) pop();
        PTokens node4 = (PTokens) pop();
        PStates node3 = (PStates) pop();
        PHelpers node2 = (PHelpers) pop();
        PPackage node1 = (PPackage) pop();
        AGrammar node = new AGrammar(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new64()
    {
        PPkgName node2 = (PPkgName) pop();
        TPackage node1 = (TPackage) pop();
        APackage node = new APackage(node1, node2);
        return node;
    }

    Node new65()
    {
        TSemicolon node3 = (TSemicolon) pop();
        XPPkgNameTail node2 = null;
        TPkgId node1 = (TPkgId) pop();
        APkgName node = new APkgName(node1, node2, node3);
        return node;
    }

    Node new66()
    {
        TSemicolon node3 = (TSemicolon) pop();
        XPPkgNameTail node2 = (XPPkgNameTail) pop();
        TPkgId node1 = (TPkgId) pop();
        APkgName node = new APkgName(node1, node2, node3);
        return node;
    }

    Node new67()
    {
        PPkgNameTail node2 = (PPkgNameTail) pop();
        XPPkgNameTail node1 = (XPPkgNameTail) pop();
        X1PPkgNameTail node = new X1PPkgNameTail(node1, node2);
        return node;
    }

    Node new68()
    {
        PPkgNameTail node1 = (PPkgNameTail) pop();
        X2PPkgNameTail node = new X2PPkgNameTail(node1);
        return node;
    }

    Node new69()
    {
        TPkgId node2 = (TPkgId) pop();
        TDot node1 = (TDot) pop();
        APkgNameTail node = new APkgNameTail(node1, node2);
        return node;
    }

    Node new70()
    {
        XPHelperDef node2 = (XPHelperDef) pop();
        THelpers node1 = (THelpers) pop();
        AHelpers node = new AHelpers(node1, node2);
        return node;
    }

    Node new71()
    {
        PHelperDef node2 = (PHelperDef) pop();
        XPHelperDef node1 = (XPHelperDef) pop();
        X1PHelperDef node = new X1PHelperDef(node1, node2);
        return node;
    }

    Node new72()
    {
        PHelperDef node1 = (PHelperDef) pop();
        X2PHelperDef node = new X2PHelperDef(node1);
        return node;
    }

    Node new73()
    {
        TSemicolon node4 = (TSemicolon) pop();
        PRegExp node3 = (PRegExp) pop();
        TEqual node2 = (TEqual) pop();
        TId node1 = (TId) pop();
        AHelperDef node = new AHelperDef(node1, node2, node3, node4);
        return node;
    }

    Node new74()
    {
        TSemicolon node3 = (TSemicolon) pop();
        PIdList node2 = (PIdList) pop();
        TStates node1 = (TStates) pop();
        AStates node = new AStates(node1, node2, node3);
        return node;
    }

    Node new75()
    {
        XPIdListTail node2 = null;
        TId node1 = (TId) pop();
        AIdList node = new AIdList(node1, node2);
        return node;
    }

    Node new76()
    {
        XPIdListTail node2 = (XPIdListTail) pop();
        TId node1 = (TId) pop();
        AIdList node = new AIdList(node1, node2);
        return node;
    }

    Node new77()
    {
        PIdListTail node2 = (PIdListTail) pop();
        XPIdListTail node1 = (XPIdListTail) pop();
        X1PIdListTail node = new X1PIdListTail(node1, node2);
        return node;
    }

    Node new78()
    {
        PIdListTail node1 = (PIdListTail) pop();
        X2PIdListTail node = new X2PIdListTail(node1);
        return node;
    }

    Node new79()
    {
        TId node2 = (TId) pop();
        TComma node1 = (TComma) pop();
        AIdListTail node = new AIdListTail(node1, node2);
        return node;
    }

    Node new80()
    {
        XPTokenDef node2 = (XPTokenDef) pop();
        TTokens node1 = (TTokens) pop();
        ATokens node = new ATokens(node1, node2);
        return node;
    }

    Node new81()
    {
        PTokenDef node2 = (PTokenDef) pop();
        XPTokenDef node1 = (XPTokenDef) pop();
        X1PTokenDef node = new X1PTokenDef(node1, node2);
        return node;
    }

    Node new82()
    {
        PTokenDef node1 = (PTokenDef) pop();
        X2PTokenDef node = new X2PTokenDef(node1);
        return node;
    }

    Node new83()
    {
        TSemicolon node8 = (TSemicolon) pop();
        PLookAhead node7 = null;
        PRegExp node6 = (PRegExp) pop();
        TEqual node5 = (TEqual) pop();
        PAstType node4 = null;
        TId node3 = (TId) pop();
        TExclam node2 = null;
        PStateList node1 = null;
        ATokenDef node = new ATokenDef(node1, node2, node3, node4, node5, node6, node7, node8);
        return node;
    }

    Node new84()
    {
        TSemicolon node8 = (TSemicolon) pop();
        PLookAhead node7 = null;
        PRegExp node6 = (PRegExp) pop();
        TEqual node5 = (TEqual) pop();
        PAstType node4 = null;
        TId node3 = (TId) pop();
        TExclam node2 = null;
        PStateList node1 = (PStateList) pop();
        ATokenDef node = new ATokenDef(node1, node2, node3, node4, node5, node6, node7, node8);
        return node;
    }

    Node new85()
    {
        TSemicolon node8 = (TSemicolon) pop();
        PLookAhead node7 = null;
        PRegExp node6 = (PRegExp) pop();
        TEqual node5 = (TEqual) pop();
        PAstType node4 = null;
        TId node3 = (TId) pop();
        TExclam node2 = (TExclam) pop();
        PStateList node1 = null;
        ATokenDef node = new ATokenDef(node1, node2, node3, node4, node5, node6, node7, node8);
        return node;
    }

    Node new86()
    {
        TSemicolon node8 = (TSemicolon) pop();
        PLookAhead node7 = null;
        PRegExp node6 = (PRegExp) pop();
        TEqual node5 = (TEqual) pop();
        PAstType node4 = null;
        TId node3 = (TId) pop();
        TExclam node2 = (TExclam) pop();
        PStateList node1 = (PStateList) pop();
        ATokenDef node = new ATokenDef(node1, node2, node3, node4, node5, node6, node7, node8);
        return node;
    }

    Node new87()
    {
        TSemicolon node8 = (TSemicolon) pop();
        PLookAhead node7 = null;
        PRegExp node6 = (PRegExp) pop();
        TEqual node5 = (TEqual) pop();
        PAstType node4 = (PAstType) pop();
        TId node3 = (TId) pop();
        TExclam node2 = null;
        PStateList node1 = null;
        ATokenDef node = new ATokenDef(node1, node2, node3, node4, node5, node6, node7, node8);
        return node;
    }

    Node new88()
    {
        TSemicolon node8 = (TSemicolon) pop();
        PLookAhead node7 = null;
        PRegExp node6 = (PRegExp) pop();
        TEqual node5 = (TEqual) pop();
        PAstType node4 = (PAstType) pop();
        TId node3 = (TId) pop();
        TExclam node2 = null;
        PStateList node1 = (PStateList) pop();
        ATokenDef node = new ATokenDef(node1, node2, node3, node4, node5, node6, node7, node8);
        return node;
    }

    Node new89()
    {
        TSemicolon node8 = (TSemicolon) pop();
        PLookAhead node7 = null;
        PRegExp node6 = (PRegExp) pop();
        TEqual node5 = (TEqual) pop();
        PAstType node4 = (PAstType) pop();
        TId node3 = (TId) pop();
        TExclam node2 = (TExclam) pop();
        PStateList node1 = null;
        ATokenDef node = new ATokenDef(node1, node2, node3, node4, node5, node6, node7, node8);
        return node;
    }

    Node new90()
    {
        TSemicolon node8 = (TSemicolon) pop();
        PLookAhead node7 = null;
        PRegExp node6 = (PRegExp) pop();
        TEqual node5 = (TEqual) pop();
        PAstType node4 = (PAstType) pop();
        TId node3 = (TId) pop();
        TExclam node2 = (TExclam) pop();
        PStateList node1 = (PStateList) pop();
        ATokenDef node = new ATokenDef(node1, node2, node3, node4, node5, node6, node7, node8);
        return node;
    }

    Node new91()
    {
        TSemicolon node8 = (TSemicolon) pop();
        PLookAhead node7 = (PLookAhead) pop();
        PRegExp node6 = (PRegExp) pop();
        TEqual node5 = (TEqual) pop();
        PAstType node4 = null;
        TId node3 = (TId) pop();
        TExclam node2 = null;
        PStateList node1 = null;
        ATokenDef node = new ATokenDef(node1, node2, node3, node4, node5, node6, node7, node8);
        return node;
    }

    Node new92()
    {
        TSemicolon node8 = (TSemicolon) pop();
        PLookAhead node7 = (PLookAhead) pop();
        PRegExp node6 = (PRegExp) pop();
        TEqual node5 = (TEqual) pop();
        PAstType node4 = null;
        TId node3 = (TId) pop();
        TExclam node2 = null;
        PStateList node1 = (PStateList) pop();
        ATokenDef node = new ATokenDef(node1, node2, node3, node4, node5, node6, node7, node8);
        return node;
    }

    Node new93()
    {
        TSemicolon node8 = (TSemicolon) pop();
        PLookAhead node7 = (PLookAhead) pop();
        PRegExp node6 = (PRegExp) pop();
        TEqual node5 = (TEqual) pop();
        PAstType node4 = null;
        TId node3 = (TId) pop();
        TExclam node2 = (TExclam) pop();
        PStateList node1 = null;
        ATokenDef node = new ATokenDef(node1, node2, node3, node4, node5, node6, node7, node8);
        return node;
    }

    Node new94()
    {
        TSemicolon node8 = (TSemicolon) pop();
        PLookAhead node7 = (PLookAhead) pop();
        PRegExp node6 = (PRegExp) pop();
        TEqual node5 = (TEqual) pop();
        PAstType node4 = null;
        TId node3 = (TId) pop();
        TExclam node2 = (TExclam) pop();
        PStateList node1 = (PStateList) pop();
        ATokenDef node = new ATokenDef(node1, node2, node3, node4, node5, node6, node7, node8);
        return node;
    }

    Node new95()
    {
        TSemicolon node8 = (TSemicolon) pop();
        PLookAhead node7 = (PLookAhead) pop();
        PRegExp node6 = (PRegExp) pop();
        TEqual node5 = (TEqual) pop();
        PAstType node4 = (PAstType) pop();
        TId node3 = (TId) pop();
        TExclam node2 = null;
        PStateList node1 = null;
        ATokenDef node = new ATokenDef(node1, node2, node3, node4, node5, node6, node7, node8);
        return node;
    }

    Node new96()
    {
        TSemicolon node8 = (TSemicolon) pop();
        PLookAhead node7 = (PLookAhead) pop();
        PRegExp node6 = (PRegExp) pop();
        TEqual node5 = (TEqual) pop();
        PAstType node4 = (PAstType) pop();
        TId node3 = (TId) pop();
        TExclam node2 = null;
        PStateList node1 = (PStateList) pop();
        ATokenDef node = new ATokenDef(node1, node2, node3, node4, node5, node6, node7, node8);
        return node;
    }

    Node new97()
    {
        TSemicolon node8 = (TSemicolon) pop();
        PLookAhead node7 = (PLookAhead) pop();
        PRegExp node6 = (PRegExp) pop();
        TEqual node5 = (TEqual) pop();
        PAstType node4 = (PAstType) pop();
        TId node3 = (TId) pop();
        TExclam node2 = (TExclam) pop();
        PStateList node1 = null;
        ATokenDef node = new ATokenDef(node1, node2, node3, node4, node5, node6, node7, node8);
        return node;
    }

    Node new98()
    {
        TSemicolon node8 = (TSemicolon) pop();
        PLookAhead node7 = (PLookAhead) pop();
        PRegExp node6 = (PRegExp) pop();
        TEqual node5 = (TEqual) pop();
        PAstType node4 = (PAstType) pop();
        TId node3 = (TId) pop();
        TExclam node2 = (TExclam) pop();
        PStateList node1 = (PStateList) pop();
        ATokenDef node = new ATokenDef(node1, node2, node3, node4, node5, node6, node7, node8);
        return node;
    }

    Node new99()
    {
        TRBrace node5 = (TRBrace) pop();
        XPStateListTail node4 = null;
        PTransition node3 = null;
        TId node2 = (TId) pop();
        TLBrace node1 = (TLBrace) pop();
        AStateList node = new AStateList(node1, node2, node3, node4, node5);
        return node;
    }

    Node new100()
    {
        TRBrace node5 = (TRBrace) pop();
        XPStateListTail node4 = null;
        PTransition node3 = (PTransition) pop();
        TId node2 = (TId) pop();
        TLBrace node1 = (TLBrace) pop();
        AStateList node = new AStateList(node1, node2, node3, node4, node5);
        return node;
    }

    Node new101()
    {
        TRBrace node5 = (TRBrace) pop();
        XPStateListTail node4 = (XPStateListTail) pop();
        PTransition node3 = null;
        TId node2 = (TId) pop();
        TLBrace node1 = (TLBrace) pop();
        AStateList node = new AStateList(node1, node2, node3, node4, node5);
        return node;
    }

    Node new102()
    {
        PStateListTail node2 = (PStateListTail) pop();
        XPStateListTail node1 = (XPStateListTail) pop();
        X1PStateListTail node = new X1PStateListTail(node1, node2);
        return node;
    }

    Node new103()
    {
        PStateListTail node1 = (PStateListTail) pop();
        X2PStateListTail node = new X2PStateListTail(node1);
        return node;
    }

    Node new104()
    {
        TRBrace node5 = (TRBrace) pop();
        XPStateListTail node4 = (XPStateListTail) pop();
        PTransition node3 = (PTransition) pop();
        TId node2 = (TId) pop();
        TLBrace node1 = (TLBrace) pop();
        AStateList node = new AStateList(node1, node2, node3, node4, node5);
        return node;
    }

    Node new105()
    {
        PTransition node3 = null;
        TId node2 = (TId) pop();
        TComma node1 = (TComma) pop();
        AStateListTail node = new AStateListTail(node1, node2, node3);
        return node;
    }

    Node new106()
    {
        PTransition node3 = (PTransition) pop();
        TId node2 = (TId) pop();
        TComma node1 = (TComma) pop();
        AStateListTail node = new AStateListTail(node1, node2, node3);
        return node;
    }

    Node new107()
    {
        TId node2 = (TId) pop();
        TRArrow node1 = (TRArrow) pop();
        ATransition node = new ATransition(node1, node2);
        return node;
    }

    Node new108()
    {
        TSemicolon node4 = (TSemicolon) pop();
        PIdList node3 = null;
        TTokens node2 = (TTokens) pop();
        TIgnored node1 = (TIgnored) pop();
        AIgnTokens node = new AIgnTokens(node1, node2, node3, node4);
        return node;
    }

    Node new109()
    {
        TSemicolon node4 = (TSemicolon) pop();
        PIdList node3 = (PIdList) pop();
        TTokens node2 = (TTokens) pop();
        TIgnored node1 = (TIgnored) pop();
        AIgnTokens node = new AIgnTokens(node1, node2, node3, node4);
        return node;
    }

    Node new110()
    {
        PRegExp node2 = (PRegExp) pop();
        TSlash node1 = (TSlash) pop();
        ALookAhead node = new ALookAhead(node1, node2);
        return node;
    }

    Node new111()
    {
        XPRegExpTail node2 = null;
        PConcat node1 = (PConcat) pop();
        ARegExp node = new ARegExp(node1, node2);
        return node;
    }

    Node new112()
    {
        XPRegExpTail node2 = (XPRegExpTail) pop();
        PConcat node1 = (PConcat) pop();
        ARegExp node = new ARegExp(node1, node2);
        return node;
    }

    Node new113()
    {
        PRegExpTail node2 = (PRegExpTail) pop();
        XPRegExpTail node1 = (XPRegExpTail) pop();
        X1PRegExpTail node = new X1PRegExpTail(node1, node2);
        return node;
    }

    Node new114()
    {
        PRegExpTail node1 = (PRegExpTail) pop();
        X2PRegExpTail node = new X2PRegExpTail(node1);
        return node;
    }

    Node new115()
    {
        PConcat node2 = (PConcat) pop();
        TBar node1 = (TBar) pop();
        ARegExpTail node = new ARegExpTail(node1, node2);
        return node;
    }

    Node new116()
    {
        XPUnExp node1 = null;
        AConcat node = new AConcat(node1);
        return node;
    }

    Node new117()
    {
        XPUnExp node1 = (XPUnExp) pop();
        AConcat node = new AConcat(node1);
        return node;
    }

    Node new118()
    {
        PUnExp node2 = (PUnExp) pop();
        XPUnExp node1 = (XPUnExp) pop();
        X1PUnExp node = new X1PUnExp(node1, node2);
        return node;
    }

    Node new119()
    {
        PUnExp node1 = (PUnExp) pop();
        X2PUnExp node = new X2PUnExp(node1);
        return node;
    }

    Node new120()
    {
        PUnOp node2 = null;
        PBasic node1 = (PBasic) pop();
        AUnExp node = new AUnExp(node1, node2);
        return node;
    }

    Node new121()
    {
        PUnOp node2 = (PUnOp) pop();
        PBasic node1 = (PBasic) pop();
        AUnExp node = new AUnExp(node1, node2);
        return node;
    }

    Node new122()
    {
        PChar node1 = (PChar) pop();
        ACharBasic node = new ACharBasic(node1);
        return node;
    }

    Node new123()
    {
        PSet node1 = (PSet) pop();
        ASetBasic node = new ASetBasic(node1);
        return node;
    }

    Node new124()
    {
        TString node1 = (TString) pop();
        AStringBasic node = new AStringBasic(node1);
        return node;
    }

    Node new125()
    {
        TId node1 = (TId) pop();
        AIdBasic node = new AIdBasic(node1);
        return node;
    }

    Node new126()
    {
        TRPar node3 = (TRPar) pop();
        PRegExp node2 = (PRegExp) pop();
        TLPar node1 = (TLPar) pop();
        ARegExpBasic node = new ARegExpBasic(node1, node2, node3);
        return node;
    }

    Node new127()
    {
        TChar node1 = (TChar) pop();
        ACharChar node = new ACharChar(node1);
        return node;
    }

    Node new128()
    {
        TDecChar node1 = (TDecChar) pop();
        ADecChar node = new ADecChar(node1);
        return node;
    }

    Node new129()
    {
        THexChar node1 = (THexChar) pop();
        AHexChar node = new AHexChar(node1);
        return node;
    }

    Node new130()
    {
        TRBkt node5 = (TRBkt) pop();
        PBasic node4 = (PBasic) pop();
        PBinOp node3 = (PBinOp) pop();
        PBasic node2 = (PBasic) pop();
        TLBkt node1 = (TLBkt) pop();
        AOperationSet node = new AOperationSet(node1, node2, node3, node4, node5);
        return node;
    }

    Node new131()
    {
        TRBkt node5 = (TRBkt) pop();
        PChar node4 = (PChar) pop();
        TDDot node3 = (TDDot) pop();
        PChar node2 = (PChar) pop();
        TLBkt node1 = (TLBkt) pop();
        AIntervalSet node = new AIntervalSet(node1, node2, node3, node4, node5);
        return node;
    }

    Node new132()
    {
        TStar node1 = (TStar) pop();
        AStarUnOp node = new AStarUnOp(node1);
        return node;
    }

    Node new133()
    {
        TQMark node1 = (TQMark) pop();
        AQMarkUnOp node = new AQMarkUnOp(node1);
        return node;
    }

    Node new134()
    {
        TPlus node1 = (TPlus) pop();
        APlusUnOp node = new APlusUnOp(node1);
        return node;
    }

    Node new135()
    {
        TPlus node1 = (TPlus) pop();
        APlusBinOp node = new APlusBinOp(node1);
        return node;
    }

    Node new136()
    {
        TMinus node1 = (TMinus) pop();
        AMinusBinOp node = new AMinusBinOp(node1);
        return node;
    }

    Node new137()
    {
        XPProd node2 = (XPProd) pop();
        TProductions node1 = (TProductions) pop();
        AProductions node = new AProductions(node1, node2);
        return node;
    }

    Node new138()
    {
        PProd node2 = (PProd) pop();
        XPProd node1 = (XPProd) pop();
        X1PProd node = new X1PProd(node1, node2);
        return node;
    }

    Node new139()
    {
        PProd node1 = (PProd) pop();
        X2PProd node = new X2PProd(node1);
        return node;
    }

    Node new140()
    {
        TSemicolon node6 = (TSemicolon) pop();
        PAlts node5 = (PAlts) pop();
        TEqual node4 = (TEqual) pop();
        PAstType node3 = null;
        TId node2 = (TId) pop();
        TExclam node1 = null;
        AProd node = new AProd(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new141()
    {
        TSemicolon node6 = (TSemicolon) pop();
        PAlts node5 = (PAlts) pop();
        TEqual node4 = (TEqual) pop();
        PAstType node3 = null;
        TId node2 = (TId) pop();
        TExclam node1 = (TExclam) pop();
        AProd node = new AProd(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new142()
    {
        TSemicolon node6 = (TSemicolon) pop();
        PAlts node5 = (PAlts) pop();
        TEqual node4 = (TEqual) pop();
        PAstType node3 = (PAstType) pop();
        TId node2 = (TId) pop();
        TExclam node1 = null;
        AProd node = new AProd(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new143()
    {
        TSemicolon node6 = (TSemicolon) pop();
        PAlts node5 = (PAlts) pop();
        TEqual node4 = (TEqual) pop();
        PAstType node3 = (PAstType) pop();
        TId node2 = (TId) pop();
        TExclam node1 = (TExclam) pop();
        AProd node = new AProd(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new144()
    {
        XPAltsTail node2 = null;
        PAlt node1 = (PAlt) pop();
        AAlts node = new AAlts(node1, node2);
        return node;
    }

    Node new145()
    {
        XPAltsTail node2 = (XPAltsTail) pop();
        PAlt node1 = (PAlt) pop();
        AAlts node = new AAlts(node1, node2);
        return node;
    }

    Node new146()
    {
        PAltsTail node2 = (PAltsTail) pop();
        XPAltsTail node1 = (XPAltsTail) pop();
        X1PAltsTail node = new X1PAltsTail(node1, node2);
        return node;
    }

    Node new147()
    {
        PAltsTail node1 = (PAltsTail) pop();
        X2PAltsTail node = new X2PAltsTail(node1);
        return node;
    }

    Node new148()
    {
        PAlt node2 = (PAlt) pop();
        TBar node1 = (TBar) pop();
        AAltsTail node = new AAltsTail(node1, node2);
        return node;
    }

    Node new149()
    {
        TNocreate node5 = null;
        TChain node4 = null;
        XPElem node3 = null;
        PAstType node2 = null;
        PAltName node1 = null;
        AParsedAlt node = new AParsedAlt(node1, node2, node3, node4, node5);
        return node;
    }

    Node new150()
    {
        TNocreate node5 = null;
        TChain node4 = null;
        XPElem node3 = null;
        PAstType node2 = null;
        PAltName node1 = (PAltName) pop();
        AParsedAlt node = new AParsedAlt(node1, node2, node3, node4, node5);
        return node;
    }

    Node new151()
    {
        TNocreate node5 = null;
        TChain node4 = null;
        XPElem node3 = null;
        PAstType node2 = (PAstType) pop();
        PAltName node1 = null;
        AParsedAlt node = new AParsedAlt(node1, node2, node3, node4, node5);
        return node;
    }

    Node new152()
    {
        TNocreate node5 = null;
        TChain node4 = null;
        XPElem node3 = null;
        PAstType node2 = (PAstType) pop();
        PAltName node1 = (PAltName) pop();
        AParsedAlt node = new AParsedAlt(node1, node2, node3, node4, node5);
        return node;
    }

    Node new153()
    {
        TNocreate node5 = null;
        TChain node4 = null;
        XPElem node3 = (XPElem) pop();
        PAstType node2 = null;
        PAltName node1 = null;
        AParsedAlt node = new AParsedAlt(node1, node2, node3, node4, node5);
        return node;
    }

    Node new154()
    {
        PElem node2 = (PElem) pop();
        XPElem node1 = (XPElem) pop();
        X1PElem node = new X1PElem(node1, node2);
        return node;
    }

    Node new155()
    {
        PElem node1 = (PElem) pop();
        X2PElem node = new X2PElem(node1);
        return node;
    }

    Node new156()
    {
        TNocreate node5 = null;
        TChain node4 = null;
        XPElem node3 = (XPElem) pop();
        PAstType node2 = null;
        PAltName node1 = (PAltName) pop();
        AParsedAlt node = new AParsedAlt(node1, node2, node3, node4, node5);
        return node;
    }

    Node new157()
    {
        TNocreate node5 = null;
        TChain node4 = null;
        XPElem node3 = (XPElem) pop();
        PAstType node2 = (PAstType) pop();
        PAltName node1 = null;
        AParsedAlt node = new AParsedAlt(node1, node2, node3, node4, node5);
        return node;
    }

    Node new158()
    {
        TNocreate node5 = null;
        TChain node4 = null;
        XPElem node3 = (XPElem) pop();
        PAstType node2 = (PAstType) pop();
        PAltName node1 = (PAltName) pop();
        AParsedAlt node = new AParsedAlt(node1, node2, node3, node4, node5);
        return node;
    }

    Node new159()
    {
        TNocreate node5 = null;
        TChain node4 = (TChain) pop();
        XPElem node3 = null;
        PAstType node2 = null;
        PAltName node1 = null;
        AParsedAlt node = new AParsedAlt(node1, node2, node3, node4, node5);
        return node;
    }

    Node new160()
    {
        TNocreate node5 = null;
        TChain node4 = (TChain) pop();
        XPElem node3 = null;
        PAstType node2 = null;
        PAltName node1 = (PAltName) pop();
        AParsedAlt node = new AParsedAlt(node1, node2, node3, node4, node5);
        return node;
    }

    Node new161()
    {
        TNocreate node5 = null;
        TChain node4 = (TChain) pop();
        XPElem node3 = null;
        PAstType node2 = (PAstType) pop();
        PAltName node1 = null;
        AParsedAlt node = new AParsedAlt(node1, node2, node3, node4, node5);
        return node;
    }

    Node new162()
    {
        TNocreate node5 = null;
        TChain node4 = (TChain) pop();
        XPElem node3 = null;
        PAstType node2 = (PAstType) pop();
        PAltName node1 = (PAltName) pop();
        AParsedAlt node = new AParsedAlt(node1, node2, node3, node4, node5);
        return node;
    }

    Node new163()
    {
        TNocreate node5 = null;
        TChain node4 = (TChain) pop();
        XPElem node3 = (XPElem) pop();
        PAstType node2 = null;
        PAltName node1 = null;
        AParsedAlt node = new AParsedAlt(node1, node2, node3, node4, node5);
        return node;
    }

    Node new164()
    {
        TNocreate node5 = null;
        TChain node4 = (TChain) pop();
        XPElem node3 = (XPElem) pop();
        PAstType node2 = null;
        PAltName node1 = (PAltName) pop();
        AParsedAlt node = new AParsedAlt(node1, node2, node3, node4, node5);
        return node;
    }

    Node new165()
    {
        TNocreate node5 = null;
        TChain node4 = (TChain) pop();
        XPElem node3 = (XPElem) pop();
        PAstType node2 = (PAstType) pop();
        PAltName node1 = null;
        AParsedAlt node = new AParsedAlt(node1, node2, node3, node4, node5);
        return node;
    }

    Node new166()
    {
        TNocreate node5 = null;
        TChain node4 = (TChain) pop();
        XPElem node3 = (XPElem) pop();
        PAstType node2 = (PAstType) pop();
        PAltName node1 = (PAltName) pop();
        AParsedAlt node = new AParsedAlt(node1, node2, node3, node4, node5);
        return node;
    }

    Node new167()
    {
        TNocreate node5 = (TNocreate) pop();
        TChain node4 = null;
        XPElem node3 = null;
        PAstType node2 = null;
        PAltName node1 = null;
        AParsedAlt node = new AParsedAlt(node1, node2, node3, node4, node5);
        return node;
    }

    Node new168()
    {
        TNocreate node5 = (TNocreate) pop();
        TChain node4 = null;
        XPElem node3 = null;
        PAstType node2 = null;
        PAltName node1 = (PAltName) pop();
        AParsedAlt node = new AParsedAlt(node1, node2, node3, node4, node5);
        return node;
    }

    Node new169()
    {
        TNocreate node5 = (TNocreate) pop();
        TChain node4 = null;
        XPElem node3 = null;
        PAstType node2 = (PAstType) pop();
        PAltName node1 = null;
        AParsedAlt node = new AParsedAlt(node1, node2, node3, node4, node5);
        return node;
    }

    Node new170()
    {
        TNocreate node5 = (TNocreate) pop();
        TChain node4 = null;
        XPElem node3 = null;
        PAstType node2 = (PAstType) pop();
        PAltName node1 = (PAltName) pop();
        AParsedAlt node = new AParsedAlt(node1, node2, node3, node4, node5);
        return node;
    }

    Node new171()
    {
        TNocreate node5 = (TNocreate) pop();
        TChain node4 = null;
        XPElem node3 = (XPElem) pop();
        PAstType node2 = null;
        PAltName node1 = null;
        AParsedAlt node = new AParsedAlt(node1, node2, node3, node4, node5);
        return node;
    }

    Node new172()
    {
        TNocreate node5 = (TNocreate) pop();
        TChain node4 = null;
        XPElem node3 = (XPElem) pop();
        PAstType node2 = null;
        PAltName node1 = (PAltName) pop();
        AParsedAlt node = new AParsedAlt(node1, node2, node3, node4, node5);
        return node;
    }

    Node new173()
    {
        TNocreate node5 = (TNocreate) pop();
        TChain node4 = null;
        XPElem node3 = (XPElem) pop();
        PAstType node2 = (PAstType) pop();
        PAltName node1 = null;
        AParsedAlt node = new AParsedAlt(node1, node2, node3, node4, node5);
        return node;
    }

    Node new174()
    {
        TNocreate node5 = (TNocreate) pop();
        TChain node4 = null;
        XPElem node3 = (XPElem) pop();
        PAstType node2 = (PAstType) pop();
        PAltName node1 = (PAltName) pop();
        AParsedAlt node = new AParsedAlt(node1, node2, node3, node4, node5);
        return node;
    }

    Node new175()
    {
        TNocreate node5 = (TNocreate) pop();
        TChain node4 = (TChain) pop();
        XPElem node3 = null;
        PAstType node2 = null;
        PAltName node1 = null;
        AParsedAlt node = new AParsedAlt(node1, node2, node3, node4, node5);
        return node;
    }

    Node new176()
    {
        TNocreate node5 = (TNocreate) pop();
        TChain node4 = (TChain) pop();
        XPElem node3 = null;
        PAstType node2 = null;
        PAltName node1 = (PAltName) pop();
        AParsedAlt node = new AParsedAlt(node1, node2, node3, node4, node5);
        return node;
    }

    Node new177()
    {
        TNocreate node5 = (TNocreate) pop();
        TChain node4 = (TChain) pop();
        XPElem node3 = null;
        PAstType node2 = (PAstType) pop();
        PAltName node1 = null;
        AParsedAlt node = new AParsedAlt(node1, node2, node3, node4, node5);
        return node;
    }

    Node new178()
    {
        TNocreate node5 = (TNocreate) pop();
        TChain node4 = (TChain) pop();
        XPElem node3 = null;
        PAstType node2 = (PAstType) pop();
        PAltName node1 = (PAltName) pop();
        AParsedAlt node = new AParsedAlt(node1, node2, node3, node4, node5);
        return node;
    }

    Node new179()
    {
        TNocreate node5 = (TNocreate) pop();
        TChain node4 = (TChain) pop();
        XPElem node3 = (XPElem) pop();
        PAstType node2 = null;
        PAltName node1 = null;
        AParsedAlt node = new AParsedAlt(node1, node2, node3, node4, node5);
        return node;
    }

    Node new180()
    {
        TNocreate node5 = (TNocreate) pop();
        TChain node4 = (TChain) pop();
        XPElem node3 = (XPElem) pop();
        PAstType node2 = null;
        PAltName node1 = (PAltName) pop();
        AParsedAlt node = new AParsedAlt(node1, node2, node3, node4, node5);
        return node;
    }

    Node new181()
    {
        TNocreate node5 = (TNocreate) pop();
        TChain node4 = (TChain) pop();
        XPElem node3 = (XPElem) pop();
        PAstType node2 = (PAstType) pop();
        PAltName node1 = null;
        AParsedAlt node = new AParsedAlt(node1, node2, node3, node4, node5);
        return node;
    }

    Node new182()
    {
        TNocreate node5 = (TNocreate) pop();
        TChain node4 = (TChain) pop();
        XPElem node3 = (XPElem) pop();
        PAstType node2 = (PAstType) pop();
        PAltName node1 = (PAltName) pop();
        AParsedAlt node = new AParsedAlt(node1, node2, node3, node4, node5);
        return node;
    }

    Node new183()
    {
        TRPar node4 = (TRPar) pop();
        XPElem node3 = null;
        PAltName node2 = null;
        TLPar node1 = (TLPar) pop();
        AIgnoredAlt node = new AIgnoredAlt(node1, node2, node3, node4);
        return node;
    }

    Node new184()
    {
        TRPar node4 = (TRPar) pop();
        XPElem node3 = null;
        PAltName node2 = (PAltName) pop();
        TLPar node1 = (TLPar) pop();
        AIgnoredAlt node = new AIgnoredAlt(node1, node2, node3, node4);
        return node;
    }

    Node new185()
    {
        TRPar node4 = (TRPar) pop();
        XPElem node3 = (XPElem) pop();
        PAltName node2 = null;
        TLPar node1 = (TLPar) pop();
        AIgnoredAlt node = new AIgnoredAlt(node1, node2, node3, node4);
        return node;
    }

    Node new186()
    {
        TRPar node4 = (TRPar) pop();
        XPElem node3 = (XPElem) pop();
        PAltName node2 = (PAltName) pop();
        TLPar node1 = (TLPar) pop();
        AIgnoredAlt node = new AIgnoredAlt(node1, node2, node3, node4);
        return node;
    }

    Node new187()
    {
        TRBrace node3 = (TRBrace) pop();
        TId node2 = (TId) pop();
        TLBrace node1 = (TLBrace) pop();
        AAltName node = new AAltName(node1, node2, node3);
        return node;
    }

    Node new188()
    {
        TRAbkt node3 = (TRAbkt) pop();
        PExternalName node2 = (PExternalName) pop();
        TLAbkt node1 = (TLAbkt) pop();
        AAstType node = new AAstType(node1, node2, node3);
        return node;
    }

    Node new189()
    {
        TId node1 = (TId) pop();
        ASimpleExternalName node = new ASimpleExternalName(node1);
        return node;
    }

    Node new190()
    {
        TExternalName node1 = (TExternalName) pop();
        AExtendedExternalName node = new AExtendedExternalName(node1);
        return node;
    }

    Node new191()
    {
        TMaketree node7 = null;
        TCustomheritage node6 = null;
        PUnOp node5 = null;
        TId node4 = (TId) pop();
        PSpecifier node3 = null;
        TExclam node2 = null;
        PElemName node1 = null;
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new192()
    {
        TMaketree node7 = null;
        TCustomheritage node6 = null;
        PUnOp node5 = null;
        TId node4 = (TId) pop();
        PSpecifier node3 = null;
        TExclam node2 = null;
        PElemName node1 = (PElemName) pop();
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new193()
    {
        TMaketree node7 = null;
        TCustomheritage node6 = null;
        PUnOp node5 = null;
        TId node4 = (TId) pop();
        PSpecifier node3 = null;
        TExclam node2 = (TExclam) pop();
        PElemName node1 = null;
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new194()
    {
        TMaketree node7 = null;
        TCustomheritage node6 = null;
        PUnOp node5 = null;
        TId node4 = (TId) pop();
        PSpecifier node3 = null;
        TExclam node2 = (TExclam) pop();
        PElemName node1 = (PElemName) pop();
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new195()
    {
        TMaketree node7 = null;
        TCustomheritage node6 = null;
        PUnOp node5 = null;
        TId node4 = (TId) pop();
        PSpecifier node3 = (PSpecifier) pop();
        TExclam node2 = null;
        PElemName node1 = null;
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new196()
    {
        TMaketree node7 = null;
        TCustomheritage node6 = null;
        PUnOp node5 = null;
        TId node4 = (TId) pop();
        PSpecifier node3 = (PSpecifier) pop();
        TExclam node2 = null;
        PElemName node1 = (PElemName) pop();
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new197()
    {
        TMaketree node7 = null;
        TCustomheritage node6 = null;
        PUnOp node5 = null;
        TId node4 = (TId) pop();
        PSpecifier node3 = (PSpecifier) pop();
        TExclam node2 = (TExclam) pop();
        PElemName node1 = null;
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new198()
    {
        TMaketree node7 = null;
        TCustomheritage node6 = null;
        PUnOp node5 = null;
        TId node4 = (TId) pop();
        PSpecifier node3 = (PSpecifier) pop();
        TExclam node2 = (TExclam) pop();
        PElemName node1 = (PElemName) pop();
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new199()
    {
        TMaketree node7 = null;
        TCustomheritage node6 = null;
        PUnOp node5 = (PUnOp) pop();
        TId node4 = (TId) pop();
        PSpecifier node3 = null;
        TExclam node2 = null;
        PElemName node1 = null;
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new200()
    {
        TMaketree node7 = null;
        TCustomheritage node6 = null;
        PUnOp node5 = (PUnOp) pop();
        TId node4 = (TId) pop();
        PSpecifier node3 = null;
        TExclam node2 = null;
        PElemName node1 = (PElemName) pop();
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new201()
    {
        TMaketree node7 = null;
        TCustomheritage node6 = null;
        PUnOp node5 = (PUnOp) pop();
        TId node4 = (TId) pop();
        PSpecifier node3 = null;
        TExclam node2 = (TExclam) pop();
        PElemName node1 = null;
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new202()
    {
        TMaketree node7 = null;
        TCustomheritage node6 = null;
        PUnOp node5 = (PUnOp) pop();
        TId node4 = (TId) pop();
        PSpecifier node3 = null;
        TExclam node2 = (TExclam) pop();
        PElemName node1 = (PElemName) pop();
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new203()
    {
        TMaketree node7 = null;
        TCustomheritage node6 = null;
        PUnOp node5 = (PUnOp) pop();
        TId node4 = (TId) pop();
        PSpecifier node3 = (PSpecifier) pop();
        TExclam node2 = null;
        PElemName node1 = null;
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new204()
    {
        TMaketree node7 = null;
        TCustomheritage node6 = null;
        PUnOp node5 = (PUnOp) pop();
        TId node4 = (TId) pop();
        PSpecifier node3 = (PSpecifier) pop();
        TExclam node2 = null;
        PElemName node1 = (PElemName) pop();
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new205()
    {
        TMaketree node7 = null;
        TCustomheritage node6 = null;
        PUnOp node5 = (PUnOp) pop();
        TId node4 = (TId) pop();
        PSpecifier node3 = (PSpecifier) pop();
        TExclam node2 = (TExclam) pop();
        PElemName node1 = null;
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new206()
    {
        TMaketree node7 = null;
        TCustomheritage node6 = null;
        PUnOp node5 = (PUnOp) pop();
        TId node4 = (TId) pop();
        PSpecifier node3 = (PSpecifier) pop();
        TExclam node2 = (TExclam) pop();
        PElemName node1 = (PElemName) pop();
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new207()
    {
        TMaketree node7 = null;
        TCustomheritage node6 = (TCustomheritage) pop();
        PUnOp node5 = null;
        TId node4 = (TId) pop();
        PSpecifier node3 = null;
        TExclam node2 = null;
        PElemName node1 = null;
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new208()
    {
        TMaketree node7 = null;
        TCustomheritage node6 = (TCustomheritage) pop();
        PUnOp node5 = null;
        TId node4 = (TId) pop();
        PSpecifier node3 = null;
        TExclam node2 = null;
        PElemName node1 = (PElemName) pop();
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new209()
    {
        TMaketree node7 = null;
        TCustomheritage node6 = (TCustomheritage) pop();
        PUnOp node5 = null;
        TId node4 = (TId) pop();
        PSpecifier node3 = null;
        TExclam node2 = (TExclam) pop();
        PElemName node1 = null;
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new210()
    {
        TMaketree node7 = null;
        TCustomheritage node6 = (TCustomheritage) pop();
        PUnOp node5 = null;
        TId node4 = (TId) pop();
        PSpecifier node3 = null;
        TExclam node2 = (TExclam) pop();
        PElemName node1 = (PElemName) pop();
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new211()
    {
        TMaketree node7 = null;
        TCustomheritage node6 = (TCustomheritage) pop();
        PUnOp node5 = null;
        TId node4 = (TId) pop();
        PSpecifier node3 = (PSpecifier) pop();
        TExclam node2 = null;
        PElemName node1 = null;
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new212()
    {
        TMaketree node7 = null;
        TCustomheritage node6 = (TCustomheritage) pop();
        PUnOp node5 = null;
        TId node4 = (TId) pop();
        PSpecifier node3 = (PSpecifier) pop();
        TExclam node2 = null;
        PElemName node1 = (PElemName) pop();
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new213()
    {
        TMaketree node7 = null;
        TCustomheritage node6 = (TCustomheritage) pop();
        PUnOp node5 = null;
        TId node4 = (TId) pop();
        PSpecifier node3 = (PSpecifier) pop();
        TExclam node2 = (TExclam) pop();
        PElemName node1 = null;
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new214()
    {
        TMaketree node7 = null;
        TCustomheritage node6 = (TCustomheritage) pop();
        PUnOp node5 = null;
        TId node4 = (TId) pop();
        PSpecifier node3 = (PSpecifier) pop();
        TExclam node2 = (TExclam) pop();
        PElemName node1 = (PElemName) pop();
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new215()
    {
        TMaketree node7 = null;
        TCustomheritage node6 = (TCustomheritage) pop();
        PUnOp node5 = (PUnOp) pop();
        TId node4 = (TId) pop();
        PSpecifier node3 = null;
        TExclam node2 = null;
        PElemName node1 = null;
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new216()
    {
        TMaketree node7 = null;
        TCustomheritage node6 = (TCustomheritage) pop();
        PUnOp node5 = (PUnOp) pop();
        TId node4 = (TId) pop();
        PSpecifier node3 = null;
        TExclam node2 = null;
        PElemName node1 = (PElemName) pop();
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new217()
    {
        TMaketree node7 = null;
        TCustomheritage node6 = (TCustomheritage) pop();
        PUnOp node5 = (PUnOp) pop();
        TId node4 = (TId) pop();
        PSpecifier node3 = null;
        TExclam node2 = (TExclam) pop();
        PElemName node1 = null;
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new218()
    {
        TMaketree node7 = null;
        TCustomheritage node6 = (TCustomheritage) pop();
        PUnOp node5 = (PUnOp) pop();
        TId node4 = (TId) pop();
        PSpecifier node3 = null;
        TExclam node2 = (TExclam) pop();
        PElemName node1 = (PElemName) pop();
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new219()
    {
        TMaketree node7 = null;
        TCustomheritage node6 = (TCustomheritage) pop();
        PUnOp node5 = (PUnOp) pop();
        TId node4 = (TId) pop();
        PSpecifier node3 = (PSpecifier) pop();
        TExclam node2 = null;
        PElemName node1 = null;
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new220()
    {
        TMaketree node7 = null;
        TCustomheritage node6 = (TCustomheritage) pop();
        PUnOp node5 = (PUnOp) pop();
        TId node4 = (TId) pop();
        PSpecifier node3 = (PSpecifier) pop();
        TExclam node2 = null;
        PElemName node1 = (PElemName) pop();
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new221()
    {
        TMaketree node7 = null;
        TCustomheritage node6 = (TCustomheritage) pop();
        PUnOp node5 = (PUnOp) pop();
        TId node4 = (TId) pop();
        PSpecifier node3 = (PSpecifier) pop();
        TExclam node2 = (TExclam) pop();
        PElemName node1 = null;
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new222()
    {
        TMaketree node7 = null;
        TCustomheritage node6 = (TCustomheritage) pop();
        PUnOp node5 = (PUnOp) pop();
        TId node4 = (TId) pop();
        PSpecifier node3 = (PSpecifier) pop();
        TExclam node2 = (TExclam) pop();
        PElemName node1 = (PElemName) pop();
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new223()
    {
        TMaketree node7 = (TMaketree) pop();
        TCustomheritage node6 = null;
        PUnOp node5 = null;
        TId node4 = (TId) pop();
        PSpecifier node3 = null;
        TExclam node2 = null;
        PElemName node1 = null;
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new224()
    {
        TMaketree node7 = (TMaketree) pop();
        TCustomheritage node6 = null;
        PUnOp node5 = null;
        TId node4 = (TId) pop();
        PSpecifier node3 = null;
        TExclam node2 = null;
        PElemName node1 = (PElemName) pop();
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new225()
    {
        TMaketree node7 = (TMaketree) pop();
        TCustomheritage node6 = null;
        PUnOp node5 = null;
        TId node4 = (TId) pop();
        PSpecifier node3 = null;
        TExclam node2 = (TExclam) pop();
        PElemName node1 = null;
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new226()
    {
        TMaketree node7 = (TMaketree) pop();
        TCustomheritage node6 = null;
        PUnOp node5 = null;
        TId node4 = (TId) pop();
        PSpecifier node3 = null;
        TExclam node2 = (TExclam) pop();
        PElemName node1 = (PElemName) pop();
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new227()
    {
        TMaketree node7 = (TMaketree) pop();
        TCustomheritage node6 = null;
        PUnOp node5 = null;
        TId node4 = (TId) pop();
        PSpecifier node3 = (PSpecifier) pop();
        TExclam node2 = null;
        PElemName node1 = null;
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new228()
    {
        TMaketree node7 = (TMaketree) pop();
        TCustomheritage node6 = null;
        PUnOp node5 = null;
        TId node4 = (TId) pop();
        PSpecifier node3 = (PSpecifier) pop();
        TExclam node2 = null;
        PElemName node1 = (PElemName) pop();
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new229()
    {
        TMaketree node7 = (TMaketree) pop();
        TCustomheritage node6 = null;
        PUnOp node5 = null;
        TId node4 = (TId) pop();
        PSpecifier node3 = (PSpecifier) pop();
        TExclam node2 = (TExclam) pop();
        PElemName node1 = null;
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new230()
    {
        TMaketree node7 = (TMaketree) pop();
        TCustomheritage node6 = null;
        PUnOp node5 = null;
        TId node4 = (TId) pop();
        PSpecifier node3 = (PSpecifier) pop();
        TExclam node2 = (TExclam) pop();
        PElemName node1 = (PElemName) pop();
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new231()
    {
        TMaketree node7 = (TMaketree) pop();
        TCustomheritage node6 = null;
        PUnOp node5 = (PUnOp) pop();
        TId node4 = (TId) pop();
        PSpecifier node3 = null;
        TExclam node2 = null;
        PElemName node1 = null;
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new232()
    {
        TMaketree node7 = (TMaketree) pop();
        TCustomheritage node6 = null;
        PUnOp node5 = (PUnOp) pop();
        TId node4 = (TId) pop();
        PSpecifier node3 = null;
        TExclam node2 = null;
        PElemName node1 = (PElemName) pop();
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new233()
    {
        TMaketree node7 = (TMaketree) pop();
        TCustomheritage node6 = null;
        PUnOp node5 = (PUnOp) pop();
        TId node4 = (TId) pop();
        PSpecifier node3 = null;
        TExclam node2 = (TExclam) pop();
        PElemName node1 = null;
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new234()
    {
        TMaketree node7 = (TMaketree) pop();
        TCustomheritage node6 = null;
        PUnOp node5 = (PUnOp) pop();
        TId node4 = (TId) pop();
        PSpecifier node3 = null;
        TExclam node2 = (TExclam) pop();
        PElemName node1 = (PElemName) pop();
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new235()
    {
        TMaketree node7 = (TMaketree) pop();
        TCustomheritage node6 = null;
        PUnOp node5 = (PUnOp) pop();
        TId node4 = (TId) pop();
        PSpecifier node3 = (PSpecifier) pop();
        TExclam node2 = null;
        PElemName node1 = null;
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new236()
    {
        TMaketree node7 = (TMaketree) pop();
        TCustomheritage node6 = null;
        PUnOp node5 = (PUnOp) pop();
        TId node4 = (TId) pop();
        PSpecifier node3 = (PSpecifier) pop();
        TExclam node2 = null;
        PElemName node1 = (PElemName) pop();
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new237()
    {
        TMaketree node7 = (TMaketree) pop();
        TCustomheritage node6 = null;
        PUnOp node5 = (PUnOp) pop();
        TId node4 = (TId) pop();
        PSpecifier node3 = (PSpecifier) pop();
        TExclam node2 = (TExclam) pop();
        PElemName node1 = null;
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new238()
    {
        TMaketree node7 = (TMaketree) pop();
        TCustomheritage node6 = null;
        PUnOp node5 = (PUnOp) pop();
        TId node4 = (TId) pop();
        PSpecifier node3 = (PSpecifier) pop();
        TExclam node2 = (TExclam) pop();
        PElemName node1 = (PElemName) pop();
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new239()
    {
        TMaketree node7 = (TMaketree) pop();
        TCustomheritage node6 = (TCustomheritage) pop();
        PUnOp node5 = null;
        TId node4 = (TId) pop();
        PSpecifier node3 = null;
        TExclam node2 = null;
        PElemName node1 = null;
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new240()
    {
        TMaketree node7 = (TMaketree) pop();
        TCustomheritage node6 = (TCustomheritage) pop();
        PUnOp node5 = null;
        TId node4 = (TId) pop();
        PSpecifier node3 = null;
        TExclam node2 = null;
        PElemName node1 = (PElemName) pop();
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new241()
    {
        TMaketree node7 = (TMaketree) pop();
        TCustomheritage node6 = (TCustomheritage) pop();
        PUnOp node5 = null;
        TId node4 = (TId) pop();
        PSpecifier node3 = null;
        TExclam node2 = (TExclam) pop();
        PElemName node1 = null;
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new242()
    {
        TMaketree node7 = (TMaketree) pop();
        TCustomheritage node6 = (TCustomheritage) pop();
        PUnOp node5 = null;
        TId node4 = (TId) pop();
        PSpecifier node3 = null;
        TExclam node2 = (TExclam) pop();
        PElemName node1 = (PElemName) pop();
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new243()
    {
        TMaketree node7 = (TMaketree) pop();
        TCustomheritage node6 = (TCustomheritage) pop();
        PUnOp node5 = null;
        TId node4 = (TId) pop();
        PSpecifier node3 = (PSpecifier) pop();
        TExclam node2 = null;
        PElemName node1 = null;
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new244()
    {
        TMaketree node7 = (TMaketree) pop();
        TCustomheritage node6 = (TCustomheritage) pop();
        PUnOp node5 = null;
        TId node4 = (TId) pop();
        PSpecifier node3 = (PSpecifier) pop();
        TExclam node2 = null;
        PElemName node1 = (PElemName) pop();
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new245()
    {
        TMaketree node7 = (TMaketree) pop();
        TCustomheritage node6 = (TCustomheritage) pop();
        PUnOp node5 = null;
        TId node4 = (TId) pop();
        PSpecifier node3 = (PSpecifier) pop();
        TExclam node2 = (TExclam) pop();
        PElemName node1 = null;
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new246()
    {
        TMaketree node7 = (TMaketree) pop();
        TCustomheritage node6 = (TCustomheritage) pop();
        PUnOp node5 = null;
        TId node4 = (TId) pop();
        PSpecifier node3 = (PSpecifier) pop();
        TExclam node2 = (TExclam) pop();
        PElemName node1 = (PElemName) pop();
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new247()
    {
        TMaketree node7 = (TMaketree) pop();
        TCustomheritage node6 = (TCustomheritage) pop();
        PUnOp node5 = (PUnOp) pop();
        TId node4 = (TId) pop();
        PSpecifier node3 = null;
        TExclam node2 = null;
        PElemName node1 = null;
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new248()
    {
        TMaketree node7 = (TMaketree) pop();
        TCustomheritage node6 = (TCustomheritage) pop();
        PUnOp node5 = (PUnOp) pop();
        TId node4 = (TId) pop();
        PSpecifier node3 = null;
        TExclam node2 = null;
        PElemName node1 = (PElemName) pop();
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new249()
    {
        TMaketree node7 = (TMaketree) pop();
        TCustomheritage node6 = (TCustomheritage) pop();
        PUnOp node5 = (PUnOp) pop();
        TId node4 = (TId) pop();
        PSpecifier node3 = null;
        TExclam node2 = (TExclam) pop();
        PElemName node1 = null;
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new250()
    {
        TMaketree node7 = (TMaketree) pop();
        TCustomheritage node6 = (TCustomheritage) pop();
        PUnOp node5 = (PUnOp) pop();
        TId node4 = (TId) pop();
        PSpecifier node3 = null;
        TExclam node2 = (TExclam) pop();
        PElemName node1 = (PElemName) pop();
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new251()
    {
        TMaketree node7 = (TMaketree) pop();
        TCustomheritage node6 = (TCustomheritage) pop();
        PUnOp node5 = (PUnOp) pop();
        TId node4 = (TId) pop();
        PSpecifier node3 = (PSpecifier) pop();
        TExclam node2 = null;
        PElemName node1 = null;
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new252()
    {
        TMaketree node7 = (TMaketree) pop();
        TCustomheritage node6 = (TCustomheritage) pop();
        PUnOp node5 = (PUnOp) pop();
        TId node4 = (TId) pop();
        PSpecifier node3 = (PSpecifier) pop();
        TExclam node2 = null;
        PElemName node1 = (PElemName) pop();
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new253()
    {
        TMaketree node7 = (TMaketree) pop();
        TCustomheritage node6 = (TCustomheritage) pop();
        PUnOp node5 = (PUnOp) pop();
        TId node4 = (TId) pop();
        PSpecifier node3 = (PSpecifier) pop();
        TExclam node2 = (TExclam) pop();
        PElemName node1 = null;
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new254()
    {
        TMaketree node7 = (TMaketree) pop();
        TCustomheritage node6 = (TCustomheritage) pop();
        PUnOp node5 = (PUnOp) pop();
        TId node4 = (TId) pop();
        PSpecifier node3 = (PSpecifier) pop();
        TExclam node2 = (TExclam) pop();
        PElemName node1 = (PElemName) pop();
        AElem node = new AElem(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new255()
    {
        TColon node4 = (TColon) pop();
        TRBkt node3 = (TRBkt) pop();
        TId node2 = (TId) pop();
        TLBkt node1 = (TLBkt) pop();
        AElemName node = new AElemName(node1, node2, node3, node4);
        return node;
    }

    Node new256()
    {
        TDot node2 = (TDot) pop();
        TTokenSpecifier node1 = (TTokenSpecifier) pop();
        ATokenSpecifier node = new ATokenSpecifier(node1, node2);
        return node;
    }

    Node new257()
    {
        TDot node2 = (TDot) pop();
        TProductionSpecifier node1 = (TProductionSpecifier) pop();
        AProductionSpecifier node = new AProductionSpecifier(node1, node2);
        return node;
    }

    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {3, SHIFT, 1}, {4, SHIFT, 2}, {5, SHIFT, 3}, {6, SHIFT, 4}, {7, SHIFT, 5}, {8, SHIFT, 6}, },
			{{-1, ERROR, 1}, {0, SHIFT, 14}, },
			{{-1, ERROR, 2}, {38, SHIFT, 16}, },
			{{-1, ERROR, 3}, {38, SHIFT, 18}, },
			{{-1, ERROR, 4}, {19, SHIFT, 21}, {35, SHIFT, 22}, {38, SHIFT, 23}, },
			{{-1, ERROR, 5}, {6, SHIFT, 27}, },
			{{-1, ERROR, 6}, {35, SHIFT, 28}, {38, SHIFT, 29}, },
			{{-1, ERROR, 7}, {44, ACCEPT, -1}, },
			{{-1, REDUCE, 1}, {4, SHIFT, 2}, {5, SHIFT, 3}, {6, SHIFT, 4}, {7, SHIFT, 5}, {8, SHIFT, 6}, },
			{{-1, REDUCE, 2}, {4, SHIFT, 2}, {6, SHIFT, 4}, {7, SHIFT, 5}, {8, SHIFT, 6}, },
			{{-1, REDUCE, 4}, {6, SHIFT, 4}, {7, SHIFT, 5}, {8, SHIFT, 6}, },
			{{-1, REDUCE, 8}, {7, SHIFT, 5}, {8, SHIFT, 6}, },
			{{-1, REDUCE, 16}, {8, SHIFT, 6}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 14}, {1, SHIFT, 47}, {2, SHIFT, 48}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 75}, {26, SHIFT, 51}, },
			{{-1, ERROR, 17}, {2, SHIFT, 54}, },
			{{-1, ERROR, 18}, {12, SHIFT, 55}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 70}, {38, SHIFT, 18}, },
			{{-1, ERROR, 21}, {38, SHIFT, 57}, },
			{{-1, ERROR, 22}, {38, SHIFT, 58}, },
			{{-1, ERROR, 23}, {12, SHIFT, 59}, {15, SHIFT, 60}, },
			{{-1, REDUCE, 82}, },
			{{-1, ERROR, 25}, {35, SHIFT, 62}, {38, SHIFT, 63}, },
			{{-1, REDUCE, 80}, {19, SHIFT, 21}, {35, SHIFT, 22}, {38, SHIFT, 23}, },
			{{-1, ERROR, 27}, {2, SHIFT, 65}, {38, SHIFT, 16}, },
			{{-1, ERROR, 28}, {38, SHIFT, 67}, },
			{{-1, ERROR, 29}, {12, SHIFT, 68}, {15, SHIFT, 60}, },
			{{-1, REDUCE, 139}, },
			{{-1, REDUCE, 137}, {35, SHIFT, 28}, {38, SHIFT, 29}, },
			{{-1, REDUCE, 3}, {4, SHIFT, 2}, {6, SHIFT, 4}, {7, SHIFT, 5}, {8, SHIFT, 6}, },
			{{-1, REDUCE, 5}, {6, SHIFT, 4}, {7, SHIFT, 5}, {8, SHIFT, 6}, },
			{{-1, REDUCE, 9}, {7, SHIFT, 5}, {8, SHIFT, 6}, },
			{{-1, REDUCE, 17}, {8, SHIFT, 6}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 6}, {6, SHIFT, 4}, {7, SHIFT, 5}, {8, SHIFT, 6}, },
			{{-1, REDUCE, 10}, {7, SHIFT, 5}, {8, SHIFT, 6}, },
			{{-1, REDUCE, 18}, {8, SHIFT, 6}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 12}, {7, SHIFT, 5}, {8, SHIFT, 6}, },
			{{-1, REDUCE, 20}, {8, SHIFT, 6}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 24}, {8, SHIFT, 6}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 48}, },
			{{-1, ERROR, 47}, {0, SHIFT, 91}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 68}, },
			{{-1, ERROR, 50}, {1, SHIFT, 47}, {2, SHIFT, 92}, },
			{{-1, ERROR, 51}, {38, SHIFT, 94}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 76}, {26, SHIFT, 51}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 116}, {13, SHIFT, 96}, {17, SHIFT, 97}, {38, SHIFT, 98}, {40, SHIFT, 99}, {41, SHIFT, 100}, {42, SHIFT, 101}, {43, SHIFT, 102}, },
			{{-1, REDUCE, 71}, },
			{{-1, ERROR, 57}, {20, SHIFT, 110}, {26, SHIFT, 111}, {28, SHIFT, 112}, },
			{{-1, ERROR, 58}, {12, SHIFT, 116}, {15, SHIFT, 60}, },
			{{-1, REDUCE, 116}, {13, SHIFT, 96}, {17, SHIFT, 97}, {38, SHIFT, 98}, {40, SHIFT, 99}, {41, SHIFT, 100}, {42, SHIFT, 101}, {43, SHIFT, 102}, },
			{{-1, ERROR, 60}, {38, SHIFT, 119}, {39, SHIFT, 120}, },
			{{-1, ERROR, 61}, {12, SHIFT, 122}, },
			{{-1, ERROR, 62}, {38, SHIFT, 123}, },
			{{-1, ERROR, 63}, {12, SHIFT, 124}, {15, SHIFT, 60}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 108}, },
			{{-1, ERROR, 66}, {2, SHIFT, 126}, },
			{{-1, ERROR, 67}, {12, SHIFT, 127}, {15, SHIFT, 60}, },
			{{-1, REDUCE, 149}, {9, SHIFT, 129}, {10, SHIFT, 130}, {13, SHIFT, 131}, {15, SHIFT, 60}, {17, SHIFT, 132}, {19, SHIFT, 133}, {30, SHIFT, 134}, {33, SHIFT, 135}, {35, SHIFT, 136}, {38, SHIFT, 137}, },
			{{-1, ERROR, 69}, {12, SHIFT, 146}, },
			{{-1, REDUCE, 138}, },
			{{-1, REDUCE, 7}, {6, SHIFT, 4}, {7, SHIFT, 5}, {8, SHIFT, 6}, },
			{{-1, REDUCE, 11}, {7, SHIFT, 5}, {8, SHIFT, 6}, },
			{{-1, REDUCE, 19}, {8, SHIFT, 6}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 13}, {7, SHIFT, 5}, {8, SHIFT, 6}, },
			{{-1, REDUCE, 21}, {8, SHIFT, 6}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 25}, {8, SHIFT, 6}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 14}, {7, SHIFT, 5}, {8, SHIFT, 6}, },
			{{-1, REDUCE, 22}, {8, SHIFT, 6}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 26}, {8, SHIFT, 6}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 28}, {8, SHIFT, 6}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 96}, {13, SHIFT, 96}, {17, SHIFT, 97}, {38, SHIFT, 98}, {40, SHIFT, 99}, {41, SHIFT, 100}, {42, SHIFT, 101}, {43, SHIFT, 102}, },
			{{-1, REDUCE, 116}, {13, SHIFT, 96}, {17, SHIFT, 97}, {38, SHIFT, 98}, {40, SHIFT, 99}, {41, SHIFT, 100}, {42, SHIFT, 101}, {43, SHIFT, 102}, },
			{{-1, REDUCE, 125}, },
			{{-1, REDUCE, 127}, },
			{{-1, REDUCE, 128}, },
			{{-1, REDUCE, 129}, },
			{{-1, REDUCE, 124}, },
			{{-1, ERROR, 103}, {2, SHIFT, 165}, },
			{{-1, REDUCE, 111}, {25, SHIFT, 166}, },
			{{-1, REDUCE, 119}, },
			{{-1, REDUCE, 120}, {21, SHIFT, 169}, {23, SHIFT, 170}, {24, SHIFT, 171}, },
			{{-1, REDUCE, 122}, },
			{{-1, REDUCE, 123}, },
			{{-1, REDUCE, 117}, {13, SHIFT, 96}, {17, SHIFT, 97}, {38, SHIFT, 98}, {40, SHIFT, 99}, {41, SHIFT, 100}, {42, SHIFT, 101}, {43, SHIFT, 102}, },
			{{-1, REDUCE, 99}, },
			{{-1, ERROR, 111}, {38, SHIFT, 174}, },
			{{-1, ERROR, 112}, {38, SHIFT, 175}, },
			{{-1, REDUCE, 103}, },
			{{-1, ERROR, 114}, {20, SHIFT, 176}, {26, SHIFT, 111}, },
			{{-1, ERROR, 115}, {20, SHIFT, 178}, {26, SHIFT, 111}, },
			{{-1, REDUCE, 116}, {13, SHIFT, 96}, {17, SHIFT, 97}, {38, SHIFT, 98}, {40, SHIFT, 99}, {41, SHIFT, 100}, {42, SHIFT, 101}, {43, SHIFT, 102}, },
			{{-1, ERROR, 117}, {12, SHIFT, 181}, },
			{{-1, ERROR, 118}, {2, SHIFT, 182}, {27, SHIFT, 183}, },
			{{-1, REDUCE, 189}, },
			{{-1, REDUCE, 190}, },
			{{-1, ERROR, 121}, {16, SHIFT, 185}, },
			{{-1, REDUCE, 116}, {13, SHIFT, 96}, {17, SHIFT, 97}, {38, SHIFT, 98}, {40, SHIFT, 99}, {41, SHIFT, 100}, {42, SHIFT, 101}, {43, SHIFT, 102}, },
			{{-1, ERROR, 123}, {12, SHIFT, 187}, {15, SHIFT, 60}, },
			{{-1, REDUCE, 116}, {13, SHIFT, 96}, {17, SHIFT, 97}, {38, SHIFT, 98}, {40, SHIFT, 99}, {41, SHIFT, 100}, {42, SHIFT, 101}, {43, SHIFT, 102}, },
			{{-1, ERROR, 125}, {12, SHIFT, 190}, },
			{{-1, REDUCE, 109}, },
			{{-1, REDUCE, 149}, {9, SHIFT, 129}, {10, SHIFT, 130}, {13, SHIFT, 131}, {15, SHIFT, 60}, {17, SHIFT, 132}, {19, SHIFT, 133}, {30, SHIFT, 134}, {33, SHIFT, 135}, {35, SHIFT, 136}, {38, SHIFT, 137}, },
			{{-1, ERROR, 128}, {12, SHIFT, 192}, },
			{{-1, ERROR, 129}, {1, SHIFT, 193}, },
			{{-1, ERROR, 130}, {1, SHIFT, 194}, },
			{{-1, ERROR, 131}, {38, SHIFT, 195}, },
			{{-1, ERROR, 132}, {9, SHIFT, 129}, {10, SHIFT, 130}, {13, SHIFT, 131}, {18, SHIFT, 196}, {19, SHIFT, 133}, {35, SHIFT, 136}, {38, SHIFT, 137}, },
			{{-1, ERROR, 133}, {38, SHIFT, 199}, },
			{{-1, REDUCE, 159}, {33, SHIFT, 200}, },
			{{-1, REDUCE, 167}, },
			{{-1, ERROR, 136}, {9, SHIFT, 129}, {10, SHIFT, 130}, {38, SHIFT, 201}, },
			{{-1, REDUCE, 191}, {21, SHIFT, 169}, {23, SHIFT, 170}, {24, SHIFT, 171}, {31, SHIFT, 203}, {32, SHIFT, 204}, },
			{{-1, ERROR, 138}, {2, SHIFT, 206}, },
			{{-1, REDUCE, 144}, {25, SHIFT, 207}, },
			{{-1, REDUCE, 150}, {9, SHIFT, 129}, {10, SHIFT, 130}, {13, SHIFT, 131}, {15, SHIFT, 60}, {30, SHIFT, 210}, {33, SHIFT, 211}, {35, SHIFT, 136}, {38, SHIFT, 137}, },
			{{-1, REDUCE, 151}, {9, SHIFT, 129}, {10, SHIFT, 130}, {13, SHIFT, 131}, {30, SHIFT, 214}, {33, SHIFT, 215}, {35, SHIFT, 136}, {38, SHIFT, 137}, },
			{{-1, REDUCE, 155}, },
			{{-1, ERROR, 143}, {9, SHIFT, 129}, {10, SHIFT, 130}, {35, SHIFT, 217}, {38, SHIFT, 218}, },
			{{-1, ERROR, 144}, {38, SHIFT, 220}, },
			{{-1, REDUCE, 153}, {9, SHIFT, 129}, {10, SHIFT, 130}, {13, SHIFT, 131}, {30, SHIFT, 221}, {33, SHIFT, 222}, {35, SHIFT, 136}, {38, SHIFT, 137}, },
			{{-1, REDUCE, 149}, {9, SHIFT, 129}, {10, SHIFT, 130}, {13, SHIFT, 131}, {15, SHIFT, 60}, {17, SHIFT, 132}, {19, SHIFT, 133}, {30, SHIFT, 134}, {33, SHIFT, 135}, {35, SHIFT, 136}, {38, SHIFT, 137}, },
			{{-1, REDUCE, 15}, {7, SHIFT, 5}, {8, SHIFT, 6}, },
			{{-1, REDUCE, 23}, {8, SHIFT, 6}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 27}, {8, SHIFT, 6}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 29}, {8, SHIFT, 6}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 30}, {8, SHIFT, 6}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 60}, },
			{{-1, ERROR, 162}, {21, SHIFT, 231}, {22, SHIFT, 232}, },
			{{-1, REDUCE, 122}, {11, SHIFT, 234}, },
			{{-1, ERROR, 164}, {18, SHIFT, 235}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 116}, {13, SHIFT, 96}, {17, SHIFT, 97}, {38, SHIFT, 98}, {40, SHIFT, 99}, {41, SHIFT, 100}, {42, SHIFT, 101}, {43, SHIFT, 102}, },
			{{-1, REDUCE, 114}, },
			{{-1, REDUCE, 112}, {25, SHIFT, 166}, },
			{{-1, REDUCE, 134}, },
			{{-1, REDUCE, 133}, },
			{{-1, REDUCE, 132}, },
			{{-1, REDUCE, 121}, },
			{{-1, REDUCE, 118}, },
			{{-1, REDUCE, 105}, {28, SHIFT, 112}, },
			{{-1, REDUCE, 107}, },
			{{-1, REDUCE, 100}, },
			{{-1, ERROR, 177}, {20, SHIFT, 239}, {26, SHIFT, 111}, },
			{{-1, REDUCE, 101}, },
			{{-1, REDUCE, 102}, },
			{{-1, ERROR, 180}, {2, SHIFT, 240}, {27, SHIFT, 183}, },
			{{-1, REDUCE, 116}, {13, SHIFT, 96}, {17, SHIFT, 97}, {38, SHIFT, 98}, {40, SHIFT, 99}, {41, SHIFT, 100}, {42, SHIFT, 101}, {43, SHIFT, 102}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 116}, {13, SHIFT, 96}, {17, SHIFT, 97}, {38, SHIFT, 98}, {40, SHIFT, 99}, {41, SHIFT, 100}, {42, SHIFT, 101}, {43, SHIFT, 102}, },
			{{-1, ERROR, 184}, {2, SHIFT, 244}, },
			{{-1, REDUCE, 188}, },
			{{-1, ERROR, 186}, {2, SHIFT, 245}, {27, SHIFT, 183}, },
			{{-1, REDUCE, 116}, {13, SHIFT, 96}, {17, SHIFT, 97}, {38, SHIFT, 98}, {40, SHIFT, 99}, {41, SHIFT, 100}, {42, SHIFT, 101}, {43, SHIFT, 102}, },
			{{-1, ERROR, 188}, {12, SHIFT, 248}, },
			{{-1, ERROR, 189}, {2, SHIFT, 249}, {27, SHIFT, 183}, },
			{{-1, REDUCE, 116}, {13, SHIFT, 96}, {17, SHIFT, 97}, {38, SHIFT, 98}, {40, SHIFT, 99}, {41, SHIFT, 100}, {42, SHIFT, 101}, {43, SHIFT, 102}, },
			{{-1, ERROR, 191}, {2, SHIFT, 252}, },
			{{-1, REDUCE, 149}, {9, SHIFT, 129}, {10, SHIFT, 130}, {13, SHIFT, 131}, {15, SHIFT, 60}, {17, SHIFT, 132}, {19, SHIFT, 133}, {30, SHIFT, 134}, {33, SHIFT, 135}, {35, SHIFT, 136}, {38, SHIFT, 137}, },
			{{-1, REDUCE, 256}, },
			{{-1, REDUCE, 257}, },
			{{-1, ERROR, 195}, {14, SHIFT, 254}, },
			{{-1, REDUCE, 183}, },
			{{-1, ERROR, 197}, {9, SHIFT, 129}, {10, SHIFT, 130}, {13, SHIFT, 131}, {18, SHIFT, 255}, {35, SHIFT, 136}, {38, SHIFT, 137}, },
			{{-1, ERROR, 198}, {9, SHIFT, 129}, {10, SHIFT, 130}, {13, SHIFT, 131}, {18, SHIFT, 257}, {35, SHIFT, 136}, {38, SHIFT, 137}, },
			{{-1, ERROR, 199}, {20, SHIFT, 258}, },
			{{-1, REDUCE, 175}, },
			{{-1, REDUCE, 193}, {21, SHIFT, 169}, {23, SHIFT, 170}, {24, SHIFT, 171}, {31, SHIFT, 259}, {32, SHIFT, 260}, },
			{{-1, ERROR, 202}, {38, SHIFT, 262}, },
			{{-1, REDUCE, 207}, {32, SHIFT, 263}, },
			{{-1, REDUCE, 223}, },
			{{-1, REDUCE, 199}, {31, SHIFT, 264}, {32, SHIFT, 265}, },
			{{-1, REDUCE, 140}, },
			{{-1, REDUCE, 149}, {9, SHIFT, 129}, {10, SHIFT, 130}, {13, SHIFT, 131}, {15, SHIFT, 60}, {17, SHIFT, 132}, {19, SHIFT, 133}, {30, SHIFT, 134}, {33, SHIFT, 135}, {35, SHIFT, 136}, {38, SHIFT, 137}, },
			{{-1, REDUCE, 147}, },
			{{-1, REDUCE, 145}, {25, SHIFT, 207}, },
			{{-1, REDUCE, 160}, {33, SHIFT, 268}, },
			{{-1, REDUCE, 168}, },
			{{-1, REDUCE, 152}, {9, SHIFT, 129}, {10, SHIFT, 130}, {13, SHIFT, 131}, {30, SHIFT, 269}, {33, SHIFT, 270}, {35, SHIFT, 136}, {38, SHIFT, 137}, },
			{{-1, REDUCE, 156}, {9, SHIFT, 129}, {10, SHIFT, 130}, {13, SHIFT, 131}, {30, SHIFT, 272}, {33, SHIFT, 273}, {35, SHIFT, 136}, {38, SHIFT, 137}, },
			{{-1, REDUCE, 161}, {33, SHIFT, 274}, },
			{{-1, REDUCE, 169}, },
			{{-1, REDUCE, 157}, {9, SHIFT, 129}, {10, SHIFT, 130}, {13, SHIFT, 131}, {30, SHIFT, 275}, {33, SHIFT, 276}, {35, SHIFT, 136}, {38, SHIFT, 137}, },
			{{-1, ERROR, 217}, {9, SHIFT, 129}, {10, SHIFT, 130}, {38, SHIFT, 277}, },
			{{-1, REDUCE, 192}, {21, SHIFT, 169}, {23, SHIFT, 170}, {24, SHIFT, 171}, {31, SHIFT, 279}, {32, SHIFT, 280}, },
			{{-1, ERROR, 219}, {38, SHIFT, 282}, },
			{{-1, REDUCE, 195}, {21, SHIFT, 169}, {23, SHIFT, 170}, {24, SHIFT, 171}, {31, SHIFT, 283}, {32, SHIFT, 284}, },
			{{-1, REDUCE, 163}, {33, SHIFT, 286}, },
			{{-1, REDUCE, 171}, },
			{{-1, REDUCE, 154}, },
			{{-1, ERROR, 224}, {2, SHIFT, 287}, },
			{{-1, REDUCE, 31}, {8, SHIFT, 6}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 135}, },
			{{-1, REDUCE, 136}, },
			{{-1, ERROR, 233}, {13, SHIFT, 96}, {17, SHIFT, 97}, {38, SHIFT, 98}, {40, SHIFT, 99}, {41, SHIFT, 100}, {42, SHIFT, 101}, {43, SHIFT, 102}, },
			{{-1, ERROR, 234}, {40, SHIFT, 99}, {41, SHIFT, 100}, {42, SHIFT, 101}, },
			{{-1, REDUCE, 126}, },
			{{-1, REDUCE, 115}, },
			{{-1, REDUCE, 113}, },
			{{-1, REDUCE, 106}, },
			{{-1, REDUCE, 104}, },
			{{-1, REDUCE, 85}, },
			{{-1, ERROR, 241}, {2, SHIFT, 291}, },
			{{-1, ERROR, 242}, {2, SHIFT, 292}, {27, SHIFT, 183}, },
			{{-1, REDUCE, 110}, },
			{{-1, REDUCE, 91}, },
			{{-1, REDUCE, 87}, },
			{{-1, ERROR, 246}, {2, SHIFT, 294}, },
			{{-1, ERROR, 247}, {2, SHIFT, 295}, {27, SHIFT, 183}, },
			{{-1, REDUCE, 116}, {13, SHIFT, 96}, {17, SHIFT, 97}, {38, SHIFT, 98}, {40, SHIFT, 99}, {41, SHIFT, 100}, {42, SHIFT, 101}, {43, SHIFT, 102}, },
			{{-1, REDUCE, 84}, },
			{{-1, ERROR, 250}, {2, SHIFT, 298}, },
			{{-1, ERROR, 251}, {2, SHIFT, 299}, {27, SHIFT, 183}, },
			{{-1, REDUCE, 141}, },
			{{-1, ERROR, 253}, {2, SHIFT, 301}, },
			{{-1, ERROR, 254}, {34, SHIFT, 302}, },
			{{-1, REDUCE, 184}, },
			{{-1, ERROR, 256}, {9, SHIFT, 129}, {10, SHIFT, 130}, {13, SHIFT, 131}, {18, SHIFT, 303}, {35, SHIFT, 136}, {38, SHIFT, 137}, },
			{{-1, REDUCE, 185}, },
			{{-1, REDUCE, 187}, },
			{{-1, REDUCE, 209}, {32, SHIFT, 304}, },
			{{-1, REDUCE, 225}, },
			{{-1, REDUCE, 201}, {31, SHIFT, 305}, {32, SHIFT, 306}, },
			{{-1, REDUCE, 197}, {21, SHIFT, 169}, {23, SHIFT, 170}, {24, SHIFT, 171}, {31, SHIFT, 307}, {32, SHIFT, 308}, },
			{{-1, REDUCE, 239}, },
			{{-1, REDUCE, 215}, {32, SHIFT, 310}, },
			{{-1, REDUCE, 231}, },
			{{-1, REDUCE, 148}, },
			{{-1, REDUCE, 146}, },
			{{-1, REDUCE, 176}, },
			{{-1, REDUCE, 162}, {33, SHIFT, 311}, },
			{{-1, REDUCE, 170}, },
			{{-1, REDUCE, 158}, {9, SHIFT, 129}, {10, SHIFT, 130}, {13, SHIFT, 131}, {30, SHIFT, 312}, {33, SHIFT, 313}, {35, SHIFT, 136}, {38, SHIFT, 137}, },
			{{-1, REDUCE, 164}, {33, SHIFT, 314}, },
			{{-1, REDUCE, 172}, },
			{{-1, REDUCE, 177}, },
			{{-1, REDUCE, 165}, {33, SHIFT, 315}, },
			{{-1, REDUCE, 173}, },
			{{-1, REDUCE, 194}, {21, SHIFT, 169}, {23, SHIFT, 170}, {24, SHIFT, 171}, {31, SHIFT, 316}, {32, SHIFT, 317}, },
			{{-1, ERROR, 278}, {38, SHIFT, 319}, },
			{{-1, REDUCE, 208}, {32, SHIFT, 320}, },
			{{-1, REDUCE, 224}, },
			{{-1, REDUCE, 200}, {31, SHIFT, 321}, {32, SHIFT, 322}, },
			{{-1, REDUCE, 196}, {21, SHIFT, 169}, {23, SHIFT, 170}, {24, SHIFT, 171}, {31, SHIFT, 323}, {32, SHIFT, 324}, },
			{{-1, REDUCE, 211}, {32, SHIFT, 326}, },
			{{-1, REDUCE, 227}, },
			{{-1, REDUCE, 203}, {31, SHIFT, 327}, {32, SHIFT, 328}, },
			{{-1, REDUCE, 179}, },
			{{-1, REDUCE, 142}, },
			{{-1, REDUCE, 63}, },
			{{-1, ERROR, 289}, {14, SHIFT, 329}, },
			{{-1, ERROR, 290}, {14, SHIFT, 330}, },
			{{-1, REDUCE, 93}, },
			{{-1, REDUCE, 89}, },
			{{-1, ERROR, 293}, {2, SHIFT, 331}, },
			{{-1, REDUCE, 95}, },
			{{-1, REDUCE, 86}, },
			{{-1, ERROR, 296}, {2, SHIFT, 332}, },
			{{-1, ERROR, 297}, {2, SHIFT, 333}, {27, SHIFT, 183}, },
			{{-1, REDUCE, 92}, },
			{{-1, REDUCE, 88}, },
			{{-1, ERROR, 300}, {2, SHIFT, 335}, },
			{{-1, REDUCE, 143}, },
			{{-1, REDUCE, 255}, },
			{{-1, REDUCE, 186}, },
			{{-1, REDUCE, 241}, },
			{{-1, REDUCE, 217}, {32, SHIFT, 336}, },
			{{-1, REDUCE, 233}, },
			{{-1, REDUCE, 213}, {32, SHIFT, 337}, },
			{{-1, REDUCE, 229}, },
			{{-1, REDUCE, 205}, {31, SHIFT, 338}, {32, SHIFT, 339}, },
			{{-1, REDUCE, 247}, },
			{{-1, REDUCE, 178}, },
			{{-1, REDUCE, 166}, {33, SHIFT, 340}, },
			{{-1, REDUCE, 174}, },
			{{-1, REDUCE, 180}, },
			{{-1, REDUCE, 181}, },
			{{-1, REDUCE, 210}, {32, SHIFT, 341}, },
			{{-1, REDUCE, 226}, },
			{{-1, REDUCE, 202}, {31, SHIFT, 342}, {32, SHIFT, 343}, },
			{{-1, REDUCE, 198}, {21, SHIFT, 169}, {23, SHIFT, 170}, {24, SHIFT, 171}, {31, SHIFT, 344}, {32, SHIFT, 345}, },
			{{-1, REDUCE, 240}, },
			{{-1, REDUCE, 216}, {32, SHIFT, 347}, },
			{{-1, REDUCE, 232}, },
			{{-1, REDUCE, 212}, {32, SHIFT, 348}, },
			{{-1, REDUCE, 228}, },
			{{-1, REDUCE, 204}, {31, SHIFT, 349}, {32, SHIFT, 350}, },
			{{-1, REDUCE, 243}, },
			{{-1, REDUCE, 219}, {32, SHIFT, 351}, },
			{{-1, REDUCE, 235}, },
			{{-1, REDUCE, 130}, },
			{{-1, REDUCE, 131}, },
			{{-1, REDUCE, 97}, },
			{{-1, REDUCE, 94}, },
			{{-1, REDUCE, 90}, },
			{{-1, ERROR, 334}, {2, SHIFT, 352}, },
			{{-1, REDUCE, 96}, },
			{{-1, REDUCE, 249}, },
			{{-1, REDUCE, 245}, },
			{{-1, REDUCE, 221}, {32, SHIFT, 353}, },
			{{-1, REDUCE, 237}, },
			{{-1, REDUCE, 182}, },
			{{-1, REDUCE, 242}, },
			{{-1, REDUCE, 218}, {32, SHIFT, 354}, },
			{{-1, REDUCE, 234}, },
			{{-1, REDUCE, 214}, {32, SHIFT, 355}, },
			{{-1, REDUCE, 230}, },
			{{-1, REDUCE, 206}, {31, SHIFT, 356}, {32, SHIFT, 357}, },
			{{-1, REDUCE, 248}, },
			{{-1, REDUCE, 244}, },
			{{-1, REDUCE, 220}, {32, SHIFT, 358}, },
			{{-1, REDUCE, 236}, },
			{{-1, REDUCE, 251}, },
			{{-1, REDUCE, 98}, },
			{{-1, REDUCE, 253}, },
			{{-1, REDUCE, 250}, },
			{{-1, REDUCE, 246}, },
			{{-1, REDUCE, 222}, {32, SHIFT, 359}, },
			{{-1, REDUCE, 238}, },
			{{-1, REDUCE, 252}, },
			{{-1, REDUCE, 254}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 7}, },
			{{-1, 8}, },
			{{-1, 15}, },
			{{-1, 49}, {50, 93}, },
			{{-1, 9}, {8, 32}, },
			{{-1, 19}, {20, 56}, },
			{{-1, 10}, {8, 33}, {9, 37}, {32, 71}, },
			{{-1, 17}, {27, 66}, },
			{{-1, 52}, {53, 95}, },
			{{-1, 11}, {8, 34}, {9, 38}, {10, 41}, {32, 72}, {33, 75}, {37, 81}, {71, 147}, },
			{{-1, 24}, {26, 64}, },
			{{-1, 25}, },
			{{-1, 113}, {115, 179}, {177, 179}, },
			{{-1, 114}, {174, 238}, },
			{{-1, 12}, {8, 35}, {9, 39}, {10, 42}, {11, 44}, {32, 73}, {33, 76}, {34, 78}, {37, 82}, {38, 84}, {41, 87}, {71, 148}, {72, 150}, {75, 153}, {81, 157}, {147, 225}, },
			{{-1, 184}, {180, 241}, {186, 246}, {189, 250}, {242, 293}, {247, 296}, {251, 300}, {297, 334}, },
			{{-1, 103}, {59, 118}, {97, 164}, {116, 180}, {122, 186}, {124, 189}, {181, 242}, {183, 243}, {187, 247}, {190, 251}, {248, 297}, },
			{{-1, 167}, {168, 237}, },
			{{-1, 104}, {166, 236}, },
			{{-1, 105}, {109, 173}, },
			{{-1, 106}, {96, 162}, {233, 289}, },
			{{-1, 107}, {96, 163}, {234, 290}, },
			{{-1, 108}, },
			{{-1, 172}, {137, 205}, {201, 261}, {218, 281}, {220, 285}, {262, 309}, {277, 318}, {282, 325}, {319, 346}, },
			{{-1, 233}, },
			{{-1, 13}, {8, 36}, {9, 40}, {10, 43}, {11, 45}, {12, 46}, {32, 74}, {33, 77}, {34, 79}, {35, 80}, {37, 83}, {38, 85}, {39, 86}, {41, 88}, {42, 89}, {44, 90}, {71, 149}, {72, 151}, {73, 152}, {75, 154}, {76, 155}, {78, 156}, {81, 158}, {82, 159}, {84, 160}, {87, 161}, {147, 226}, {148, 227}, {150, 228}, {153, 229}, {157, 230}, {225, 288}, },
			{{-1, 30}, {31, 70}, },
			{{-1, 138}, {127, 191}, {146, 224}, {192, 253}, },
			{{-1, 208}, {209, 267}, },
			{{-1, 139}, {207, 266}, },
			{{-1, 140}, {132, 197}, },
			{{-1, 141}, {23, 61}, {29, 69}, {58, 117}, {63, 125}, {67, 128}, {123, 188}, {140, 212}, },
			{{-1, 121}, },
			{{-1, 142}, {145, 223}, {198, 223}, {213, 223}, {216, 223}, {256, 223}, {271, 223}, },
			{{-1, 143}, },
			{{-1, 144}, {136, 202}, {143, 219}, {217, 278}, },
			{{-1, 50}, },
			{{-1, 20}, },
			{{-1, 53}, },
			{{-1, 26}, },
			{{-1, 115}, {114, 177}, },
			{{-1, 168}, },
			{{-1, 109}, },
			{{-1, 31}, },
			{{-1, 209}, },
			{{-1, 145}, {132, 198}, {140, 213}, {141, 216}, {197, 256}, {212, 271}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'Package', 'States', 'Helpers', 'Tokens', 'Ignored', 'Productions', EOF",
			"expecting: pkg id",
			"expecting: id",
			"expecting: '{', '!', id",
			"expecting: 'Tokens'",
			"expecting: '!', id",
			"expecting: EOF",
			"expecting: 'States', 'Helpers', 'Tokens', 'Ignored', 'Productions', EOF",
			"expecting: 'States', 'Tokens', 'Ignored', 'Productions', EOF",
			"expecting: 'Tokens', 'Ignored', 'Productions', EOF",
			"expecting: 'Ignored', 'Productions', EOF",
			"expecting: 'Productions', EOF",
			"expecting: '.', ';'",
			"expecting: ';', ','",
			"expecting: ';'",
			"expecting: '='",
			"expecting: 'States', 'Tokens', 'Ignored', 'Productions', id, EOF",
			"expecting: '=', '<'",
			"expecting: 'Ignored', 'Productions', '{', '!', id, EOF",
			"expecting: ';', id",
			"expecting: '!', id, EOF",
			"expecting: ';', '[', '(', '|', id, char, dec char, hex char, string",
			"expecting: '}', ',', '->'",
			"expecting: ';', '[', '(', '|', '/', id, char, dec char, hex char, string",
			"expecting: id, external name",
			"expecting: ';', 'T', 'P', '[', '<', '(', '{', '|', '#chain', '#nocreate', '!', id",
			"expecting: '[', '(', id, char, dec char, hex char, string",
			"expecting: '[', '(', ')', '|', id, char, dec char, hex char, string",
			"expecting: ';', '[', ']', '(', ')', '+', '-', '?', '*', '|', '/', id, char, dec char, hex char, string",
			"expecting: ';', '..', '[', ']', '(', ')', '+', '-', '?', '*', '|', '/', id, char, dec char, hex char, string",
			"expecting: ';', ')', '|', '/'",
			"expecting: ';', '[', '(', ')', '|', '/', id, char, dec char, hex char, string",
			"expecting: ';', '[', '(', ')', '+', '?', '*', '|', '/', id, char, dec char, hex char, string",
			"expecting: ';', '[', ']', '(', ')', '+', '?', '*', '|', '/', id, char, dec char, hex char, string",
			"expecting: '}', ','",
			"expecting: ';', '/'",
			"expecting: '>'",
			"expecting: '.'",
			"expecting: 'T', 'P', '[', ')', '{', '!', id",
			"expecting: ';', '|', '#nocreate'",
			"expecting: ';', '|'",
			"expecting: 'T', 'P', id",
			"expecting: ';', 'T', 'P', '[', ')', '+', '?', '*', '|', '#chain', '#customheritage', '#maketree', '#nocreate', '!', id",
			"expecting: ';', 'T', 'P', '[', '<', '|', '#chain', '#nocreate', '!', id",
			"expecting: ';', 'T', 'P', '[', '|', '#chain', '#nocreate', '!', id",
			"expecting: ';', 'T', 'P', '[', ')', '|', '#chain', '#nocreate', '!', id",
			"expecting: 'T', 'P', '!', id",
			"expecting: '+', '-'",
			"expecting: '..', '+', '-'",
			"expecting: ')'",
			"expecting: ';', 'T', 'P', '[', '(', ')', '|', '/', '#chain', '#customheritage', '#maketree', '#nocreate', '!', id, char, dec char, hex char, string",
			"expecting: ';', 'T', 'P', '=', '[', '|', '#chain', '#nocreate', '!', id",
			"expecting: ']'",
			"expecting: 'T', 'P', '[', ')', '!', id",
			"expecting: '}'",
			"expecting: ';', 'T', 'P', '[', ')', '|', '#chain', '#maketree', '#nocreate', '!', id",
			"expecting: ';', 'T', 'P', '[', ')', '|', '#chain', '#customheritage', '#maketree', '#nocreate', '!', id",
			"expecting: char, dec char, hex char",
			"expecting: ':'",
			"expecting: ';', 'T', 'P', '[', '<', ')', '|', '#chain', '#nocreate', '!', id",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 6, 12, 7, 13, 14, 15, 16, 16, 2, 2, 17, 18, 5, 18, 19, 2, 17, 20, 20, 8, 9, 10, 11, 6, 9, 10, 11, 6, 10, 11, 6, 11, 6, 6, 1, 7, 12, 12, 2, 13, 13, 9, 21, 16, 22, 17, 23, 24, 15, 2, 17, 18, 11, 14, 17, 25, 15, 20, 9, 10, 11, 6, 10, 11, 6, 11, 6, 6, 10, 11, 6, 11, 6, 6, 11, 6, 6, 6, 12, 7, 12, 13, 13, 26, 27, 28, 29, 29, 29, 28, 14, 30, 31, 32, 33, 28, 31, 5, 2, 2, 34, 34, 34, 23, 15, 35, 36, 36, 36, 23, 17, 23, 15, 11, 25, 15, 37, 37, 2, 38, 2, 39, 40, 41, 42, 14, 40, 43, 44, 45, 46, 2, 44, 25, 10, 11, 6, 11, 6, 6, 11, 6, 6, 6, 11, 6, 6, 6, 6, 47, 48, 49, 16, 31, 30, 30, 50, 50, 50, 31, 31, 22, 34, 5, 34, 5, 34, 35, 23, 18, 21, 14, 51, 35, 23, 15, 35, 23, 14, 25, 2, 2, 52, 40, 53, 53, 54, 40, 42, 2, 55, 45, 56, 20, 25, 40, 40, 39, 40, 44, 44, 39, 40, 44, 41, 42, 2, 42, 39, 40, 45, 14, 11, 6, 6, 6, 6, 6, 26, 26, 26, 57, 28, 30, 30, 34, 5, 18, 14, 35, 14, 18, 18, 14, 35, 23, 18, 14, 35, 20, 14, 58, 40, 53, 40, 59, 55, 45, 56, 42, 45, 55, 45, 40, 40, 40, 39, 40, 44, 39, 40, 40, 39, 40, 42, 2, 55, 45, 56, 42, 55, 45, 56, 40, 20, 6, 52, 52, 18, 18, 14, 18, 18, 14, 35, 18, 18, 14, 20, 46, 40, 45, 55, 45, 55, 45, 56, 45, 40, 39, 40, 40, 40, 55, 45, 56, 42, 45, 55, 45, 55, 45, 56, 45, 55, 45, 28, 28, 18, 18, 18, 14, 18, 45, 45, 55, 45, 40, 45, 55, 45, 55, 45, 56, 45, 45, 55, 45, 45, 18, 45, 45, 45, 55, 45, 45, 45, 
        };*/
}
