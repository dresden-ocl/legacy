<?xml version="1.0" encoding="UTF-8" ?>
<project default="build" name="Build Dresden OCL.">

	<import file="./ant_common.xml" />
	<import file="./build_common_properties.xml" />

	<property file="/home/hudson/build_server/upload.build.properties" />

	<!-- ================================= 
          target: run.all              
         ================================= -->
	<target name="run.all" depends="build,create.update.site" description="Builds Dresden OCL and will create the Update Site.">

	</target>


	<!-- ================================= 
          target: init              
         ================================= -->
	<target name="init">

		<echo message="Removing old build artifacts created by Jenkins" />
		<delete dir="${buckminster.output.root}" />
		<delete dir="${buckminster.temp.root}" />
		<delete dir="${testResultsPath}" />

		<mkdir dir="${targetPlatformPath}" />
		<mkdir dir="${workspacePath}" />
		<mkdir dir="${buckminster.output.root}" />
		<mkdir dir="${buckminster.temp.root}" />
		<mkdir dir="${testResultsPath}" />

	</target>

	<!-- ================================= 
          target: init workspace              
         ================================= -->
	<target name="init.workspace" depends="init" description="Inits the workspace for Buckminster as the svn checkout has not the right directory structure.">
		<copy todir="${workspacePath}">
			<fileset dir="${hudsonWorkSpacePath}/svn/eclipse">
				<include name="**" />
			</fileset>
			<fileset dir="${hudsonWorkSpacePath}/svn/experimental">
				<include name="**" />
			</fileset>
			<fileset dir="${hudsonWorkSpacePath}/svn/tests">
				<include name="**" />
			</fileset>
			<fileset dir="${hudsonWorkSpacePath}/svn/updatesite">
				<include name="**" />
			</fileset>
		</copy>
	</target>


	<!-- ================================= 
          target: init.buckminster              
         ================================= -->
	<target name="init.buckminster" depends="init.workspace">
		<echo message="Using workspace ${workspacePath}" />

		<echo message="Setting jre to ${env.JAVA_HOME}" />
		<buckminster command="installJRE" workspace="${workspacePath}">
			<cmdargs>
				<arg value="--location" />
				<arg value="${env.JAVA_HOME}" />
			</cmdargs>
		</buckminster>

		<echo message="Setting targetPlatformPath to ${targetPlatformPath}" />
		<buckminster command="setpref" workspace="${workspacePath}">
			<cmdargs>
				<arg value="targetPlatformPath=${targetPlatformPath}" />
			</cmdargs>
		</buckminster>

		<echo message="Importing projects into workspace ${workspacePath}" />
		<echo message="Importing binaries into target platform ${targetPlatformPath}" />
		<buckminster command="import" workspace="${workspacePath}">
			<cmdargs>
				<arg value="${basedir}/dresdenocl.mspec" />
			</cmdargs>
		</buckminster>

		<echo message="Setting Preferences" />
		<buckminster command="setpreference" workspace="${workspacePath}">
			<cmdargs>
				<arg value="org.eclipse.buckminster.pde.targetOS=${target.os}" />
			</cmdargs>
		</buckminster>

		<buckminster command="setpreference" workspace="${workspacePath}">
			<cmdargs>
				<arg value="org.eclipse.buckminster.pde.targetWS=${target.ws}" />
			</cmdargs>
		</buckminster>

		<buckminster command="setpreference" workspace="${workspacePath}">
			<cmdargs>
				<arg value="org.eclipse.buckminster.pde.targetArch=${target.arch}" />
			</cmdargs>
		</buckminster>
	</target>

	<!-- ================================= 
          target: build              
         ================================= -->
	<target name="build" depends="init,init.build.properties,init.buckminster" description="Builds Dresden OCL plug-ins.">

		<!-- This is kind of hacky: first, build Java Sources, then build Scala sources and then Java again. Maybe, 
		the dependencies between the Scala and Java projects can be stated explicitly so that not everything has to 
		be compiled again.-->
		<echo message="Building" />
		<buckminster command="build" workspace="${workspacePath}">
			<cmdargs>
				<arg value="--thorough" />
			</cmdargs>
		</buckminster>

		<ant dir="./../tudresden.ocl20.pivot.language.ocl.staticsemantics" antfile="build.xml" target="Compile tudresden.ocl20.pivot.language.ocl.staticsemantics" inheritall="true">
			<property name="headless" value="true" />
		</ant>

		<buckminster command="build" workspace="${workspacePath}">
			<cmdargs>
				<arg value="--thorough" />
			</cmdargs>
		</buckminster>

	</target>

	<!-- ================================= 
          target: create.update.site              
         ================================= -->
	<target name="create.update.site" depends="init.buckminster">

		<echo message="Creating p2 site" />
		<buckminster command="perform" workspace="${workspacePath}">
			<cmdargs>
				<arg value="tudresden.ocl20.updatesite:eclipse.feature#site.p2" />
			</cmdargs>
		</buckminster>

		<mkdir dir="${updatesite}" />

		<!-- locally copy the updatesite as flatten cannot be used in a nice way and not with scp -->
		<copy todir="${updatesite}" flatten="true">
			<fileset dir="${buckminster.output.root}">
				<include name="*updatesite*/site.p2/*" />
			</fileset>
		</copy>

		<copy todir="${updatesite}/plugins" flatten="true">
			<fileset dir="${buckminster.output.root}">
				<include name="*updatesite*/site.p2/plugins/*" />
			</fileset>
		</copy>

		<copy todir="${updatesite}/features" flatten="true">
			<fileset dir="${buckminster.output.root}">
				<include name="*updatesite*/site.p2/features/*" />
			</fileset>
		</copy>

		<antcall inheritall="true" target="add.associate.sites" />
		
		<echo message="Copying update site to ST server" />
		<scp todir="${usr}:${pwd}@lars.inf.tu-dresden.de:/srv/www/dresdenocl_updatesite/latestbuild" port="22" sftp="true" trust="true" failonerror="true">
			<fileset dir="${updatesite}">
				<include name="**" />
			</fileset>
		</scp>

		<echo message="Clean up old build" />
		<sshexec host="lars.inf.tu-dresden.de" port="22" trust="true" username="${usr}" password="${pwd}" command="/home/hudson/clean_up_dresdenocl.sh" />

	</target>

	<target name="add.associate.sites" if="associate.sites">
		<if>
			<and>
				<!-- Defined in aggregateSite.properties -->
				<isset property="associate.sites" />
				<not>
					<equals arg1="${associate.sites}" arg2="" />
				</not>
			</and>
			<then>
				<if>
					<available file="${updatesite}/content.jar" type="file" />
					<then>
						<unzip src="${updatesite}/content.jar" dest="${updatesite}" />
						<delete file="${updatesite}/content.jar" />
					</then>
				</if>
				<!-- counter variable -->
				<var name="associate.sites.0" value="" />
				<for param="associate.site" list="${associate.sites}" delimiter=",">
					<sequential>
						<var name="associate.sites.0" value="${associate.sites.0}00" />
					</sequential>
				</for>
				<length property="associate.sites.length" string="${associate.sites.0}" />

				<loadfile srcfile="${updatesite}/content.xml" property="content.xml">
					<filterchain>
						<tailfilter lines="-1" skip="1" />
					</filterchain>
				</loadfile>
				<echo file="${updatesite}/content.xml" message="${content.xml}" />
				<echo file="${updatesite}/content.xml" append="true">
					<references size='${associate.sites.length}'>
						<for param="associate.site" list="${associate.sites}" delimiter=",">
							<sequential>
								<!-- insert into content.xml -->
								<echo file="${updatesite}/content.xml" append="true">
									<repository uri='@{associate.site}' url='@{associate.site}' type='0' options='1' />
									<repository uri='@{associate.site}' url='@{associate.site}' type='1' options='1' />
								</echo>
							</sequential>
						</for>
						<echo file="${updatesite}/content.xml" append="true">
						</echo>
					</references>
				</echo>
				<!--  
	    workaround for Tycho bug: uncategorized features in site.xml are put into
	    "Uncategorized" category, rather than just being uncategorized (hidden) 
	   -->
				<!--<copy file="${updatesite}/content.xml" tofile="${updatesite}/content.old.xml" overwrite="true" />
				<xslt style="remove-uncategorized.xsl" in="${updatesite}/content.old.xml" out="${updatesite}/content.xml" />-->
				<zip destfile="${updatesite}/content.jar" basedir="${updatesite}" includes="content.xml" />
				<delete file="${updatesite}/content.xml" />
				<!--<delete file="${updatesite}/content.old.xml" />-->
			</then>
		</if>
	</target>

</project>