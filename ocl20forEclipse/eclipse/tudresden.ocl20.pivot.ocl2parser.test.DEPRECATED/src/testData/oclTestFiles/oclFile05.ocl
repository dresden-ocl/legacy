--
----------------------------------------------------------------------
-- LoyaltyProgram
----------------------------------------------------------------------
package RoyalLoyal
context LoyaltyProgram 
  def: getServicesByLevel(levelName: String): Set(Service) 
       = levels->select( name = levelName ).availableServices->asSet()

context LoyaltyProgram 
  inv minServices: partners.deliveredServices ->size() >= 1

context LoyaltyProgram 
 inv : levels->first() = levels->first()
 inv firstLevel: levels->first().name = 'Silver'

 context LoyaltyProgram::enroll(c : Customer) : Boolean
   pre : c.name <> '' 

  /*context LoyaltyProgram::enroll(c : Customer) : Boolean
    post: participants = participants@pre->including( c )*/ 

context LoyaltyProgram 
  def: isSaving : Boolean = 
       partners.deliveredServices->forAll(pointsEarned = 0)

-- [ASTGen] expected operation 'fromYMD inside Classifier Date to be a class operation (not instance level)
-- [ASTGen]  context LoyaltyProgram 
-- [ASTGen]   inv: partners.deliveredServices->forAll(s:Service| 
-- [ASTGen]                                           s.pointsEarned = 0) 
-- [ASTGen] 	   and 
-- [ASTGen] 	   Membership.card->forAll(c:CustomerCard| 
-- [ASTGen] 			c.validThru = Date::fromYMD(2000,1,1)) 
-- [ASTGen] 	   and 
-- [ASTGen] 	   participants->forAll(c:Customer| c.age() > 55)

  context LoyaltyProgram 
    inv: partners.deliveredServices->forAll(s: Service| 
                                   s.pointsEarned = 0) 
     inv: participants->forAll(p:Customer | p.age() > 55)


 context LoyaltyProgram::enroll(c : Customer):Boolean 
   pre : not participants->includes(c) 

 /*context LoyaltyProgram::enroll(c : Customer):Boolean 
   post: participants = participants@pre->including(c)*/

  context LoyaltyProgram 
    inv: self.levels->exists(sl:ServiceLevel| sl.name = 'basic')

  context LoyaltyProgram
  inv testSET:  Set { 1 , 2 , 5 , 88 } ->isEmpty()
    inv:  Set { 'apple' , 'orange', 'strawberry' } ->isEmpty()
    inv:  Sequence { 1, 3, 45, 2, 3 } ->isEmpty()
    inv:  Sequence { 'ape', 'nut' } ->isEmpty()
    inv:  Bag {1 , 3 , 4, 3, 5 } ->isEmpty()
    inv:  Sequence{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 } ->isEmpty()

 context LoyaltyProgram
   inv:  Sequence{ 1..(6 + 4) } ->isEmpty()
   inv:  Sequence{ 1..10 } ->isEmpty()

  context LoyaltyProgram 
    inv: self.participants->size() < 10000

-- [Def] context LoyaltyProgram 
-- [Def]   def: sortedAccounts : Sequence(LoyaltyAccount) = 
-- [Def]        self.Membership.account->sortedBy( number )

context LoyaltyProgram 
  inv: participants->forAll( c:Customer | c.age() <= 70 )

context LoyaltyProgram 
  inv: self.participants->forAll(c1 : Customer, c2:Customer | 
       c1 <> c2 implies c1.name <> c2.name)

context LoyaltyProgram 
  inv: self.participants->forAll( c1 : Customer| 
       self.participants->forAll( c2 : Customer | 
         c1 <> c2 implies c1.name <> c2.name ))

 context LoyaltyProgram::enroll(c : Customer):Boolean
  pre : not (participants->includes(c)) 

 /*context LoyaltyProgram::enroll(c : Customer):Boolean
   post: participants = participants@pre->including(c)*/ 

endpackage