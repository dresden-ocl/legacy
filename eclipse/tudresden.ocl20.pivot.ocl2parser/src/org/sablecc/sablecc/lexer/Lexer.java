/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.sablecc.lexer;

import java.io.*;
import java.util.*;
import org.sablecc.sablecc.node.*;

public class Lexer
{
    protected Token token;
    protected State state = State.NORMAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    protected void filter() throws LexerException, IOException
    {
    }

    public Lexer(PushbackReader in)
    {
        this.in = in;

        if(gotoTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Lexer.class.getResourceAsStream("lexer.dat")));

                // read gotoTable
                int length = s.readInt();
                gotoTable = new int[length][][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][][];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        length = s.readInt();
                        gotoTable[i][j] = new int[length][3];
                        for(int k = 0; k < gotoTable[i][j].length; k++)
                        {
                            for(int l = 0; l < 3; l++)
                            {
                                gotoTable[i][j][k][l] = s.readInt();
                            }
                        }
                    }
                }

                // read accept
                length = s.readInt();
                accept = new int[length][];
                for(int i = 0; i < accept.length; i++)
                {
                    length = s.readInt();
                    accept[i] = new int[length];
                    for(int j = 0; j < accept[i].length; j++)
                    {
                        accept[i][j] = s.readInt();
                    }
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
            }
        }
    }

    public Token peek() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        return token;
    }

    public Token next() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        Token result = token;
        token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = pos;
        int start_line = line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        int[][][] gotoTable = this.gotoTable[state.id()];
        int[] accept = this.accept[state.id()];
        text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(cr)
                    {
                        cr = false;
                    }
                    else
                    {
                        line++;
                        pos = 0;
                    }
                    break;
                case 13:
                    line++;
                    pos = 0;
                    cr = true;
                    break;
                default:
                    pos++;
                    cr = false;
                    break;
                };

                text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = text.length();
                    accept_pos = pos;
                    accept_line = line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.PACKAGE; break;
                            }
                            return token;
                        }
                    case 1:
                        {
                            Token token = new1(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            Token token = new2(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            Token token = new3(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.NORMAL; break;
                                case 1: state = State.NORMAL; break;
                            }
                            return token;
                        }
                    case 5:
                        {
                            Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.PACKAGE; break;
                            }
                            return token;
                        }
                    case 6:
                        {
                            Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            Token token = new11(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            Token token = new13(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            Token token = new14(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            Token token = new15(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            Token token = new16(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            Token token = new17(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            Token token = new18(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            Token token = new19(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            Token token = new20(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            Token token = new21(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            Token token = new22(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            Token token = new23(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            Token token = new24(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            Token token = new25(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            Token token = new26(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                            Token token = new27(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                            Token token = new28(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 29:
                        {
                            Token token = new29(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                            Token token = new30(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 31:
                        {
                            Token token = new31(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 32:
                        {
                            Token token = new32(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 33:
                        {
                            Token token = new33(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 34:
                        {
                            Token token = new34(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 35:
                        {
                            Token token = new35(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 36:
                        {
                            Token token = new36(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 37:
                        {
                            Token token = new37(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 38:
                        {
                            Token token = new38(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 39:
                        {
                            Token token = new39(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 40:
                        {
                            Token token = new40(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.NORMAL; break;
                            }
                            return token;
                        }
                    case 41:
                        {
                            Token token = new41(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.NORMAL; break;
                            }
                            return token;
                        }
                    case 42:
                        {
                            Token token = new42(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 43:
                        {
                            Token token = new43(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 44:
                        {
                            Token token = new44(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 45:
                        {
                            Token token = new45(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + text);
                    }
                    else
                    {
                        EOF token = new EOF(
                            start_line + 1,
                            start_pos + 1);
                        return token;
                    }
                }
            }
        }
    }

    Token new0(String text, int line, int pos) { return new TPkgId(text, line, pos); }
    Token new1(int line, int pos) { return new TDot(line, pos); }
    Token new2(String text, int line, int pos) { return new TBlank(text, line, pos); }
    Token new3(String text, int line, int pos) { return new TComment(text, line, pos); }
    Token new4(int line, int pos) { return new TSemicolon(line, pos); }
    Token new5(int line, int pos) { return new TPackage(line, pos); }
    Token new6(int line, int pos) { return new TStates(line, pos); }
    Token new7(int line, int pos) { return new THelpers(line, pos); }
    Token new8(int line, int pos) { return new TTokens(line, pos); }
    Token new9(int line, int pos) { return new TIgnored(line, pos); }
    Token new10(int line, int pos) { return new TProductions(line, pos); }
    Token new11(int line, int pos) { return new TTokenSpecifier(line, pos); }
    Token new12(int line, int pos) { return new TProductionSpecifier(line, pos); }
    Token new13(int line, int pos) { return new TDDot(line, pos); }
    Token new14(int line, int pos) { return new TEqual(line, pos); }
    Token new15(int line, int pos) { return new TLBkt(line, pos); }
    Token new16(int line, int pos) { return new TRBkt(line, pos); }
    Token new17(int line, int pos) { return new TLAbkt(line, pos); }
    Token new18(int line, int pos) { return new TRAbkt(line, pos); }
    Token new19(int line, int pos) { return new TLPar(line, pos); }
    Token new20(int line, int pos) { return new TRPar(line, pos); }
    Token new21(int line, int pos) { return new TLBrace(line, pos); }
    Token new22(int line, int pos) { return new TRBrace(line, pos); }
    Token new23(int line, int pos) { return new TPlus(line, pos); }
    Token new24(int line, int pos) { return new TMinus(line, pos); }
    Token new25(int line, int pos) { return new TQMark(line, pos); }
    Token new26(int line, int pos) { return new TStar(line, pos); }
    Token new27(int line, int pos) { return new TBar(line, pos); }
    Token new28(int line, int pos) { return new TComma(line, pos); }
    Token new29(int line, int pos) { return new TSlash(line, pos); }
    Token new30(int line, int pos) { return new TRArrow(line, pos); }
    Token new31(int line, int pos) { return new TLArrow(line, pos); }
    Token new32(int line, int pos) { return new TChain(line, pos); }
    Token new33(int line, int pos) { return new TCustomheritage(line, pos); }
    Token new34(int line, int pos) { return new TMaketree(line, pos); }
    Token new35(int line, int pos) { return new TNocreate(line, pos); }
    Token new36(int line, int pos) { return new TColon(line, pos); }
    Token new37(int line, int pos) { return new TExclam(line, pos); }
    Token new38(String text, int line, int pos) { return new TInherit(text, line, pos); }
    Token new39(String text, int line, int pos) { return new TDerive(text, line, pos); }
    Token new40(String text, int line, int pos) { return new TId(text, line, pos); }
    Token new41(String text, int line, int pos) { return new TExternalName(text, line, pos); }
    Token new42(String text, int line, int pos) { return new TChar(text, line, pos); }
    Token new43(String text, int line, int pos) { return new TDecChar(text, line, pos); }
    Token new44(String text, int line, int pos) { return new THexChar(text, line, pos); }
    Token new45(String text, int line, int pos) { return new TString(text, line, pos); }

    private int getChar() throws IOException
    {
        if(eof)
        {
            return -1;
        }

        int result = in.read();

        if(result == -1)
        {
            eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }
    }

    protected void unread(Token token) throws IOException
    {
        String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }

        pos = token.getPos() - 1;
        line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // NORMAL
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {35, 35, 6}, {39, 39, 7}, {40, 40, 8}, {41, 41, 9}, {42, 42, 10}, {43, 43, 11}, {44, 44, 12}, {45, 45, 13}, {46, 46, 14}, {47, 47, 15}, {48, 48, 16}, {49, 57, 17}, {58, 58, 18}, {59, 59, 19}, {60, 60, 20}, {61, 61, 21}, {62, 62, 22}, {63, 63, 23}, {65, 71, 24}, {72, 72, 25}, {73, 73, 26}, {74, 79, 24}, {80, 80, 27}, {81, 82, 24}, {83, 83, 28}, {84, 84, 29}, {85, 90, 24}, {91, 91, 30}, {93, 93, 31}, {97, 122, 32}, {123, 123, 33}, {124, 124, 34}, {125, 125, 35}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 9, 1}, {10, 10, 36}, {13, 32, -2}, },
            {{9, 32, -2}, },
            {},
            {{99, 99, 37}, {100, 100, 38}, {105, 105, 39}, {109, 109, 40}, {110, 110, 41}, },
            {{0, 9, 42}, {11, 12, 42}, {14, 38, 42}, {39, 39, 43}, {40, 65535, 42}, },
            {},
            {},
            {},
            {},
            {},
            {{62, 62, 44}, },
            {{46, 46, 45}, },
            {{42, 42, 46}, {47, 47, 47}, },
            {{48, 57, 17}, {88, 88, 48}, {120, 120, 49}, },
            {{48, 57, 17}, },
            {},
            {},
            {{45, 45, 50}, },
            {},
            {},
            {},
            {{46, 46, 51}, {48, 57, 51}, {65, 90, 51}, {95, 95, 51}, {97, 122, 51}, },
            {{46, 95, -26}, {97, 100, 51}, {101, 101, 52}, {102, 122, 51}, },
            {{46, 95, -26}, {97, 102, 51}, {103, 103, 53}, {104, 122, 51}, },
            {{46, 95, -26}, {97, 97, 54}, {98, 113, 51}, {114, 114, 55}, {115, 122, 51}, },
            {{46, 95, -26}, {97, 115, 51}, {116, 116, 56}, {117, 122, 51}, },
            {{46, 95, -26}, {97, 110, 51}, {111, 111, 57}, {112, 122, 51}, },
            {},
            {},
            {{46, 46, 51}, {48, 57, 58}, {65, 90, 51}, {95, 95, 59}, {97, 122, 60}, },
            {},
            {},
            {},
            {{9, 32, -2}, },
            {{104, 104, 61}, {117, 117, 62}, },
            {{101, 101, 63}, },
            {{110, 110, 64}, },
            {{97, 97, 65}, },
            {{111, 111, 66}, },
            {{0, 9, 67}, {11, 12, 67}, {14, 38, 67}, {39, 39, 68}, {40, 65535, 67}, },
            {{39, 39, 69}, },
            {},
            {},
            {{0, 41, 70}, {42, 42, 71}, {43, 65535, 70}, },
            {{0, 9, 72}, {10, 10, 73}, {11, 12, 72}, {13, 13, 74}, {14, 65535, 72}, },
            {{48, 57, 75}, {65, 70, 75}, {97, 102, 75}, },
            {{48, 102, -50}, },
            {},
            {{46, 122, -26}, },
            {{46, 95, -26}, {97, 107, 51}, {108, 108, 76}, {109, 122, 51}, },
            {{46, 95, -26}, {97, 109, 51}, {110, 110, 77}, {111, 122, 51}, },
            {{46, 95, -26}, {97, 98, 51}, {99, 99, 78}, {100, 122, 51}, },
            {{46, 110, -31}, {111, 111, 79}, {112, 122, 51}, },
            {{46, 95, -26}, {97, 97, 80}, {98, 122, 51}, },
            {{46, 95, -26}, {97, 106, 51}, {107, 107, 81}, {108, 122, 51}, },
            {{46, 122, -34}, },
            {{46, 95, -26}, {97, 122, 82}, },
            {{46, 122, -34}, },
            {{97, 97, 83}, },
            {{115, 115, 84}, },
            {{114, 114, 85}, },
            {{104, 104, 86}, },
            {{107, 107, 87}, },
            {{99, 99, 88}, },
            {{0, 38, -44}, {39, 39, 89}, {40, 65535, 67}, },
            {},
            {},
            {{0, 65535, -48}, },
            {{0, 41, 90}, {42, 42, 71}, {43, 46, 90}, {47, 47, 91}, {48, 65535, 90}, },
            {{0, 65535, -49}, },
            {},
            {{10, 10, 92}, },
            {{48, 102, -50}, },
            {{46, 95, -26}, {97, 111, 51}, {112, 112, 93}, {113, 122, 51}, },
            {{46, 110, -31}, {111, 111, 94}, {112, 122, 51}, },
            {{46, 106, -59}, {107, 107, 95}, {108, 122, 51}, },
            {{46, 95, -26}, {97, 99, 51}, {100, 100, 96}, {101, 122, 51}, },
            {{46, 115, -30}, {116, 116, 97}, {117, 122, 51}, },
            {{46, 100, -27}, {101, 101, 98}, {102, 122, 51}, },
            {{46, 46, 51}, {48, 57, 99}, {65, 95, -34}, {97, 122, 100}, },
            {{105, 105, 101}, },
            {{116, 116, 102}, },
            {{105, 105, 103}, },
            {{101, 101, 104}, },
            {{101, 101, 105}, },
            {{114, 114, 106}, },
            {},
            {{0, 41, 107}, {42, 42, 108}, {43, 65535, 107}, },
            {},
            {},
            {{46, 100, -27}, {101, 101, 109}, {102, 122, 51}, },
            {{46, 95, -26}, {97, 113, 51}, {114, 114, 110}, {115, 122, 51}, },
            {{46, 95, -26}, {97, 97, 111}, {98, 122, 51}, },
            {{46, 95, -26}, {97, 116, 51}, {117, 117, 112}, {118, 122, 51}, },
            {{46, 100, -27}, {101, 101, 113}, {102, 122, 51}, },
            {{46, 109, -55}, {110, 110, 114}, {111, 122, 51}, },
            {{46, 122, -84}, },
            {{46, 122, -84}, },
            {{110, 110, 115}, },
            {{111, 111, 116}, },
            {{118, 118, 117}, },
            {{114, 114, 118}, },
            {{116, 116, 119}, },
            {{101, 101, 120}, },
            {{0, 65535, -92}, },
            {{0, 41, 90}, {42, 42, 108}, {43, 65535, -73}, },
            {{46, 113, -96}, {114, 114, 121}, {115, 122, 51}, },
            {{46, 100, -27}, {101, 101, 122}, {102, 122, 51}, },
            {{46, 102, -28}, {103, 103, 123}, {104, 122, 51}, },
            {{46, 98, -56}, {99, 99, 124}, {100, 122, 51}, },
            {{46, 95, -26}, {97, 114, 51}, {115, 115, 125}, {116, 122, 51}, },
            {{46, 114, -115}, {115, 115, 126}, {116, 122, 51}, },
            {},
            {{109, 109, 127}, },
            {{101, 101, 128}, },
            {{105, 105, 129}, },
            {{114, 114, 130}, },
            {{97, 97, 131}, },
            {{46, 114, -115}, {115, 115, 132}, {116, 122, 51}, },
            {{46, 99, -81}, {100, 100, 133}, {101, 122, 51}, },
            {{46, 100, -27}, {101, 101, 134}, {102, 122, 51}, },
            {{46, 115, -30}, {116, 116, 135}, {117, 122, 51}, },
            {{46, 122, -26}, },
            {{46, 122, -26}, },
            {{104, 104, 136}, },
            {{101, 101, 137}, },
            {{116, 116, 138}, },
            {{101, 101, 139}, },
            {{116, 116, 140}, },
            {{46, 122, -26}, },
            {{46, 122, -26}, },
            {{46, 122, -26}, },
            {{46, 95, -26}, {97, 104, 51}, {105, 105, 141}, {106, 122, 51}, },
            {{101, 101, 142}, },
            {{100, 100, 143}, },
            {{101, 101, 144}, },
            {{101, 101, 145}, },
            {{101, 101, 146}, },
            {{46, 110, -31}, {111, 111, 147}, {112, 122, 51}, },
            {{114, 114, 148}, },
            {},
            {{100, 100, 149}, },
            {},
            {},
            {{46, 109, -55}, {110, 110, 150}, {111, 122, 51}, },
            {{105, 105, 151}, },
            {},
            {{46, 114, -115}, {115, 115, 152}, {116, 122, 51}, },
            {{116, 116, 153}, },
            {{46, 122, -26}, },
            {{97, 97, 154}, },
            {{103, 103, 155}, },
            {{101, 101, 156}, },
            {},
        }
        { // PACKAGE
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {35, 35, 6}, {36, 36, 7}, {39, 39, 8}, {40, 40, 9}, {41, 41, 10}, {42, 42, 11}, {43, 43, 12}, {44, 44, 13}, {45, 45, 14}, {46, 46, 15}, {47, 47, 16}, {48, 48, 17}, {49, 57, 18}, {58, 58, 19}, {59, 59, 20}, {60, 60, 21}, {61, 61, 22}, {62, 62, 23}, {63, 63, 24}, {65, 71, 25}, {72, 72, 26}, {73, 73, 27}, {74, 79, 25}, {80, 80, 28}, {81, 82, 25}, {83, 83, 29}, {84, 84, 30}, {85, 90, 25}, {91, 91, 31}, {93, 93, 32}, {95, 95, 33}, {97, 122, 34}, {123, 123, 35}, {124, 124, 36}, {125, 125, 37}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 9, 1}, {10, 10, 38}, {13, 32, -2}, },
            {{9, 32, -2}, },
            {},
            {{99, 99, 39}, {100, 100, 40}, {105, 105, 41}, {109, 109, 42}, {110, 110, 43}, },
            {{36, 36, 44}, {48, 57, 45}, {65, 90, 46}, {95, 95, 47}, {97, 122, 48}, },
            {{0, 9, 49}, {11, 12, 49}, {14, 38, 49}, {39, 39, 50}, {40, 65535, 49}, },
            {},
            {},
            {},
            {},
            {},
            {{62, 62, 51}, },
            {{46, 46, 52}, },
            {{42, 42, 53}, {47, 47, 54}, },
            {{48, 57, 18}, {88, 88, 55}, {120, 120, 56}, },
            {{48, 57, 18}, },
            {},
            {},
            {{45, 45, 57}, },
            {},
            {},
            {},
            {{36, 122, -9}, },
            {{36, 95, -9}, {97, 100, 48}, {101, 101, 58}, {102, 122, 48}, },
            {{36, 95, -9}, {97, 102, 48}, {103, 103, 59}, {104, 122, 48}, },
            {{36, 95, -9}, {97, 113, 48}, {114, 114, 60}, {115, 122, 48}, },
            {{36, 95, -9}, {97, 115, 48}, {116, 116, 61}, {117, 122, 48}, },
            {{36, 95, -9}, {97, 110, 48}, {111, 111, 62}, {112, 122, 48}, },
            {},
            {},
            {{36, 122, -9}, },
            {{36, 122, -9}, },
            {},
            {},
            {},
            {{9, 32, -2}, },
            {{104, 104, 63}, {117, 117, 64}, },
            {{101, 101, 65}, },
            {{110, 110, 66}, },
            {{97, 97, 67}, },
            {{111, 111, 68}, },
            {{36, 122, -9}, },
            {{36, 122, -9}, },
            {{36, 122, -9}, },
            {{36, 122, -9}, },
            {{36, 122, -9}, },
            {{0, 9, 69}, {11, 12, 69}, {14, 38, 69}, {39, 39, 70}, {40, 65535, 69}, },
            {{39, 39, 71}, },
            {},
            {},
            {{0, 41, 72}, {42, 42, 73}, {43, 65535, 72}, },
            {{0, 9, 74}, {10, 10, 75}, {11, 12, 74}, {13, 13, 76}, {14, 65535, 74}, },
            {{48, 57, 77}, {65, 70, 77}, {97, 102, 77}, },
            {{48, 102, -57}, },
            {},
            {{36, 95, -9}, {97, 107, 48}, {108, 108, 78}, {109, 122, 48}, },
            {{36, 95, -9}, {97, 109, 48}, {110, 110, 79}, {111, 122, 48}, },
            {{36, 110, -32}, {111, 111, 80}, {112, 122, 48}, },
            {{36, 95, -9}, {97, 97, 81}, {98, 122, 48}, },
            {{36, 95, -9}, {97, 106, 48}, {107, 107, 82}, {108, 122, 48}, },
            {{97, 97, 83}, },
            {{115, 115, 84}, },
            {{114, 114, 85}, },
            {{104, 104, 86}, },
            {{107, 107, 87}, },
            {{99, 99, 88}, },
            {{0, 38, -51}, {39, 39, 89}, {40, 65535, 69}, },
            {},
            {},
            {{0, 65535, -55}, },
            {{0, 41, 90}, {42, 42, 73}, {43, 46, 90}, {47, 47, 91}, {48, 65535, 90}, },
            {{0, 65535, -56}, },
            {},
            {{10, 10, 92}, },
            {{48, 102, -57}, },
            {{36, 95, -9}, {97, 111, 48}, {112, 112, 93}, {113, 122, 48}, },
            {{36, 110, -32}, {111, 111, 94}, {112, 122, 48}, },
            {{36, 95, -9}, {97, 99, 48}, {100, 100, 95}, {101, 122, 48}, },
            {{36, 115, -31}, {116, 116, 96}, {117, 122, 48}, },
            {{36, 100, -28}, {101, 101, 97}, {102, 122, 48}, },
            {{105, 105, 98}, },
            {{116, 116, 99}, },
            {{105, 105, 100}, },
            {{101, 101, 101}, },
            {{101, 101, 102}, },
            {{114, 114, 103}, },
            {},
            {{0, 41, 104}, {42, 42, 105}, {43, 65535, 104}, },
            {},
            {},
            {{36, 100, -28}, {101, 101, 106}, {102, 122, 48}, },
            {{36, 113, -30}, {114, 114, 107}, {115, 122, 48}, },
            {{36, 95, -9}, {97, 116, 48}, {117, 117, 108}, {118, 122, 48}, },
            {{36, 100, -28}, {101, 101, 109}, {102, 122, 48}, },
            {{36, 109, -61}, {110, 110, 110}, {111, 122, 48}, },
            {{110, 110, 111}, },
            {{111, 111, 112}, },
            {{118, 118, 113}, },
            {{114, 114, 114}, },
            {{116, 116, 115}, },
            {{101, 101, 116}, },
            {{0, 65535, -92}, },
            {{0, 41, 90}, {42, 42, 105}, {43, 65535, -75}, },
            {{36, 113, -30}, {114, 114, 117}, {115, 122, 48}, },
            {{36, 100, -28}, {101, 101, 118}, {102, 122, 48}, },
            {{36, 95, -9}, {97, 98, 48}, {99, 99, 119}, {100, 122, 48}, },
            {{36, 95, -9}, {97, 114, 48}, {115, 115, 120}, {116, 122, 48}, },
            {{36, 114, -111}, {115, 115, 121}, {116, 122, 48}, },
            {},
            {{109, 109, 122}, },
            {{101, 101, 123}, },
            {{105, 105, 124}, },
            {{114, 114, 125}, },
            {{97, 97, 126}, },
            {{36, 114, -111}, {115, 115, 127}, {116, 122, 48}, },
            {{36, 99, -82}, {100, 100, 128}, {101, 122, 48}, },
            {{36, 115, -31}, {116, 116, 129}, {117, 122, 48}, },
            {{36, 122, -9}, },
            {{36, 122, -9}, },
            {{104, 104, 130}, },
            {{101, 101, 131}, },
            {{116, 116, 132}, },
            {{101, 101, 133}, },
            {{116, 116, 134}, },
            {{36, 122, -9}, },
            {{36, 122, -9}, },
            {{36, 95, -9}, {97, 104, 48}, {105, 105, 135}, {106, 122, 48}, },
            {{101, 101, 136}, },
            {{100, 100, 137}, },
            {{101, 101, 138}, },
            {{101, 101, 139}, },
            {{101, 101, 140}, },
            {{36, 110, -32}, {111, 111, 141}, {112, 122, 48}, },
            {{114, 114, 142}, },
            {},
            {{100, 100, 143}, },
            {},
            {},
            {{36, 109, -61}, {110, 110, 144}, {111, 122, 48}, },
            {{105, 105, 145}, },
            {},
            {{36, 114, -111}, {115, 115, 146}, {116, 122, 48}, },
            {{116, 116, 147}, },
            {{36, 122, -9}, },
            {{97, 97, 148}, },
            {{103, 103, 149}, },
            {{101, 101, 150}, },
            {},
        }
    };*/

    private static int[][] accept;
/*  {
        // NORMAL
        {-1, 2, 2, 2, 2, 37, -1, -1, 19, 20, 26, 23, 28, 24, 1, 29, 43, 43, 36, 4, 17, 14, 18, 25, 41, 41, 41, 12, 41, 11, 15, 16, 40, 21, 27, 22, 2, -1, -1, -1, -1, -1, -1, -1, 30, 13, -1, -1, -1, -1, 31, 41, 41, 41, 41, 41, 41, 41, 40, 41, 40, -1, -1, -1, -1, -1, -1, -1, 42, 42, -1, -1, -1, 3, 3, 44, 41, 41, 41, 41, 41, 41, 40, -1, -1, 39, 38, -1, -1, 45, -1, 3, 3, 41, 41, 41, 41, 41, 41, 40, 40, -1, -1, -1, -1, -1, -1, -1, -1, 41, 41, 41, 41, 41, 41, 32, -1, -1, -1, -1, -1, 41, 41, 41, 41, 6, 8, -1, 39, -1, -1, -1, 7, 9, 5, 41, -1, -1, 38, -1, -1, 41, -1, 39, -1, 34, 35, 41, -1, 38, 41, -1, 10, -1, -1, -1, 33, },
        // PACKAGE
        {-1, 2, 2, 2, 2, 37, -1, 0, -1, 19, 20, 26, 23, 28, 24, 1, 29, 43, 43, 36, 4, 17, 14, 18, 25, 0, 0, 0, 0, 0, 0, 15, 16, 0, 0, 21, 27, 22, 2, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, -1, -1, 30, 13, -1, -1, -1, -1, 31, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, 42, 42, -1, -1, -1, 3, 3, 44, 0, 0, 0, 0, 0, -1, -1, 39, 38, -1, -1, 45, -1, 3, 3, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 32, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, -1, 39, -1, -1, -1, 0, 0, 0, -1, -1, 38, -1, -1, 0, -1, 39, -1, 34, 35, 0, -1, 38, 0, -1, 0, -1, -1, -1, 33, },

    };*/

    public static class State
    {
        public final static State NORMAL = new State(0);
        public final static State PACKAGE = new State(1);

        private int id;

        private State(int id)
        {
            this.id = id;
        }

        public int id()
        {
            return id;
        }
    }
}
