/*
    Copyright (C) 2007  Nils (s0006383@inf.tu-dresden.de)

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

public aspect AbstractComputeMethods {
	abstract public LiteralExp LiteralExpAS.computeASM(Environment env) throws BuildingASMException;
	abstract public OclExpression OclExpressionAS.computeASM(Environment env) throws BuildingASMException;
	abstract public OclExpression CallExpAS.computeASM(Environment env) throws BuildingASMException;
	abstract public OclExpression FeatureCallExpAS.computeASM(Environment env) throws BuildingASMException;
	abstract public CallExp LoopExpAS.computeASM(Environment env) throws BuildingASMException;
	
	/**
	 * This method transforms a string that holds a qualified name into a a list
	 * of the sub parts.
	 * @param qualifiedName the string to be transformed
	 * @return a list with the parts of the string
	 */
	protected java.util.List FeatureCallExpAS.transformString2List(String qualifiedName) {
		java.util.List pathName = new ArrayList();
		
		String delimiter = "::";
		
		int index = 0;
		int length = qualifiedName.length();
		int lastPosition = 0;
		
		while(index < length) {
			index = qualifiedName.indexOf(delimiter, lastPosition);
			if (index == -1) {
				String subString = qualifiedName.substring(lastPosition, length);
				pathName.add(subString);
				break;
			}
			String subString = qualifiedName.substring(lastPosition, index);
			pathName.add(subString);
			lastPosition = index + delimiter.length();
		}
		
		return pathName;
	}
}