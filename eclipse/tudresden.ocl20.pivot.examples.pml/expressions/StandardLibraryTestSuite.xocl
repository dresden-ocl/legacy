<?xml version="1.0" encoding="UTF-8"?>
<xocl:NamespaceXS xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xocl="http://www.tu-dresden.de/ocl20/pivot/2007/xocl" pathName="pml">
  <ownedRule name="rootAsSet" constrainedElement="Plugin">
    <specification body="1.1->size()">
      <bodyExpression xsi:type="xocl:CollectionOperationCallExpXS" referredCollectionOperation="size">
        <source xsi:type="xocl:RealLiteralExpXS" realSymbol="1.1"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="rootOclIsTypeOfIntInt" constrainedElement="Plugin">
    <specification body="5.oclIsTypeOf(Integer)">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="oclIsTypeOf">
        <source xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="5"/>
        <argument xsi:type="xocl:TypeLiteralExpXS" referredTypeName="Integer"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="rootOclIsKindOfIntInt" constrainedElement="Plugin">
    <specification body="5.oclIsKindOf(Integer)">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="oclIsKindOf">
        <source xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="5"/>
        <argument xsi:type="xocl:TypeLiteralExpXS" referredTypeName="Integer"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="rootOclIsTypeOfIntReal" constrainedElement="Plugin">
    <specification body="5.oclIsTypeOf(Real)">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="oclIsTypeOf">
        <source xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="5"/>
        <argument xsi:type="xocl:TypeLiteralExpXS" referredTypeName="Real"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="rootOclIsKindOfIntReal" constrainedElement="Plugin">
    <specification body="5.oclIsKindOf(Real)">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="oclIsKindOf">
        <source xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="5"/>
        <argument xsi:type="xocl:TypeLiteralExpXS" referredTypeName="Real"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="rootOclAsType" constrainedElement="Plugin">
    <specification body="5.oclAsType(Real)">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="oclAsType">
        <source xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="5"/>
        <argument xsi:type="xocl:TypeLiteralExpXS" referredTypeName="Real"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="booleanAnd-True" constrainedElement="Plugin">
    <specification body="true und true">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="and">
        <source xsi:type="xocl:BooleanLiteralExpXS" booleanSymbol="true"/>
        <argument xsi:type="xocl:BooleanLiteralExpXS" booleanSymbol="true"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="booleanAnd-False" constrainedElement="Plugin">
    <specification body="true and false">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="and">
        <source xsi:type="xocl:BooleanLiteralExpXS" booleanSymbol="true"/>
        <argument xsi:type="xocl:BooleanLiteralExpXS"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="booleanOr-True" constrainedElement="Plugin">
    <specification body="false or true">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="or">
        <source xsi:type="xocl:BooleanLiteralExpXS"/>
        <argument xsi:type="xocl:BooleanLiteralExpXS" booleanSymbol="true"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="booleanOr-False" constrainedElement="Plugin">
    <specification body="false or false">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="or">
        <source xsi:type="xocl:BooleanLiteralExpXS"/>
        <argument xsi:type="xocl:BooleanLiteralExpXS"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="booleanXor-True" constrainedElement="Plugin">
    <specification body="false xor true">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="xor">
        <source xsi:type="xocl:BooleanLiteralExpXS"/>
        <argument xsi:type="xocl:BooleanLiteralExpXS" booleanSymbol="true"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="booleanXor-False" constrainedElement="Plugin">
    <specification body="true xor true">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="xor">
        <source xsi:type="xocl:BooleanLiteralExpXS" booleanSymbol="true"/>
        <argument xsi:type="xocl:BooleanLiteralExpXS" booleanSymbol="true"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="booleanImplies-True" constrainedElement="Plugin">
    <specification body="false implies false">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="implies">
        <source xsi:type="xocl:BooleanLiteralExpXS"/>
        <argument xsi:type="xocl:BooleanLiteralExpXS"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="booleanImplies-False" constrainedElement="Plugin">
    <specification body="true implies false">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="implies">
        <source xsi:type="xocl:BooleanLiteralExpXS" booleanSymbol="true"/>
        <argument xsi:type="xocl:BooleanLiteralExpXS"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="booleanNot" constrainedElement="Plugin">
    <specification body="not true">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="not">
        <source xsi:type="xocl:BooleanLiteralExpXS" booleanSymbol="true"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="booleanIsEqual-True" constrainedElement="Plugin">
    <specification body="true = true">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="=">
        <source xsi:type="xocl:BooleanLiteralExpXS" booleanSymbol="true"/>
        <argument xsi:type="xocl:BooleanLiteralExpXS" booleanSymbol="true"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="booleanIsEqual-False" constrainedElement="Plugin">
    <specification body="true = false">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="=">
        <source xsi:type="xocl:BooleanLiteralExpXS" booleanSymbol="true"/>
        <argument xsi:type="xocl:BooleanLiteralExpXS"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="stringConcat" constrainedElement="Plugin">
    <specification body="'one'.concat(' and two')">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="concat">
        <source xsi:type="xocl:StringLiteralExpXS" stringSymbol="one"/>
        <argument xsi:type="xocl:StringLiteralExpXS" stringSymbol=" and two"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="stringSize" constrainedElement="Plugin">
    <specification body="'one'.size()">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="size">
        <source xsi:type="xocl:StringLiteralExpXS" stringSymbol="one"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="stringSubstring" constrainedElement="Plugin">
    <specification body="'one and two'.substring(5, 7)">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="substring">
        <source xsi:type="xocl:StringLiteralExpXS" stringSymbol="one and two"/>
        <argument xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="5"/>
        <argument xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="7"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="stringToInteger" constrainedElement="Plugin">
    <specification body="'1'.toInteger()">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="toInteger">
        <source xsi:type="xocl:StringLiteralExpXS" stringSymbol="1"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="stringToReal" constrainedElement="Plugin">
    <specification body="'1.1'.toReal()">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="toReal">
        <source xsi:type="xocl:StringLiteralExpXS" stringSymbol="1.1"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="stringIsEqual-True" constrainedElement="Plugin">
    <specification body="'one' = 'one'">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="=">
        <source xsi:type="xocl:StringLiteralExpXS" stringSymbol="one"/>
        <argument xsi:type="xocl:StringLiteralExpXS" stringSymbol="one"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="stringIsEqual-False" constrainedElement="Plugin">
    <specification body="'one' = 'two'">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="=">
        <source xsi:type="xocl:StringLiteralExpXS" stringSymbol="one"/>
        <argument xsi:type="xocl:StringLiteralExpXS" stringSymbol="two"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="realAbs" constrainedElement="Plugin">
    <specification body="abs(-5.3)">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="abs">
        <source xsi:type="xocl:RealLiteralExpXS" realSymbol="-5.3"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="realNegative" constrainedElement="Plugin">
    <specification body="negative(5.3)">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="-">
        <source xsi:type="xocl:RealLiteralExpXS" realSymbol="5.3"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="realAddReal" constrainedElement="Plugin">
    <specification body="5.3 + 5.3">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="+">
        <source xsi:type="xocl:RealLiteralExpXS" realSymbol="5.3"/>
        <argument xsi:type="xocl:RealLiteralExpXS" realSymbol="5.3"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="realAddInteger" constrainedElement="Plugin">
    <specification body="5.3 + 5">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="+">
        <source xsi:type="xocl:RealLiteralExpXS" realSymbol="5.3"/>
        <argument xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="5"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="realSubtractReal" constrainedElement="Plugin">
    <specification body="5.3 - 4.3">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="-">
        <source xsi:type="xocl:RealLiteralExpXS" realSymbol="5.3"/>
        <argument xsi:type="xocl:RealLiteralExpXS" realSymbol="4.3"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="realDivideReal" constrainedElement="Plugin">
    <specification body="5.3 / 4.3">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="/">
        <source xsi:type="xocl:RealLiteralExpXS" realSymbol="5.3"/>
        <argument xsi:type="xocl:RealLiteralExpXS" realSymbol="4.3"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="realMultiplyReal" constrainedElement="Plugin">
    <specification body="5.3 * 4.3">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="*">
        <source xsi:type="xocl:RealLiteralExpXS" realSymbol="5.3"/>
        <argument xsi:type="xocl:RealLiteralExpXS" realSymbol="4.3"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="realFloor" constrainedElement="Plugin">
    <specification body="floor(5.8)">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="floor">
        <source xsi:type="xocl:RealLiteralExpXS" realSymbol="5.8"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="realRound" constrainedElement="Plugin">
    <specification body="round(5.8)">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="round">
        <source xsi:type="xocl:RealLiteralExpXS" realSymbol="5.8"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="realIsGreaterEqualReal-True" constrainedElement="Plugin">
    <specification body="5.3 >= 5.3">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName=">=">
        <source xsi:type="xocl:RealLiteralExpXS" realSymbol="5.3"/>
        <argument xsi:type="xocl:RealLiteralExpXS" realSymbol="5.3"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="realIsGreaterEqualReal-False" constrainedElement="Plugin">
    <specification body="5.2 >= 5.3">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName=">=">
        <source xsi:type="xocl:RealLiteralExpXS" realSymbol="5.2"/>
        <argument xsi:type="xocl:RealLiteralExpXS" realSymbol="5.3"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="realIsGreaterEqualInteger-True" constrainedElement="Plugin">
    <specification body="5.0 >= 5">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName=">=">
        <source xsi:type="xocl:RealLiteralExpXS" realSymbol="5.0"/>
        <argument xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="5"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="realIsGreaterEqualInteger-False" constrainedElement="Plugin">
    <specification body="5.3 >= 6">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName=">=">
        <source xsi:type="xocl:RealLiteralExpXS" realSymbol="5.3"/>
        <argument xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="6"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="realIsGreaterThanReal-True" constrainedElement="Plugin">
    <specification body="5.3 > 5.2">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName=">">
        <source xsi:type="xocl:RealLiteralExpXS" realSymbol="5.3"/>
        <argument xsi:type="xocl:RealLiteralExpXS" realSymbol="5.2"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="realIsGreaterThanReal-False" constrainedElement="Plugin">
    <specification body="5.3 > 5.3">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName=">">
        <source xsi:type="xocl:RealLiteralExpXS" realSymbol="5.3"/>
        <argument xsi:type="xocl:RealLiteralExpXS" realSymbol="5.3"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="realIsLessEqualReal-True" constrainedElement="Plugin">
    <specification body="5.3 &lt;= 5.3">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="&lt;=">
        <source xsi:type="xocl:RealLiteralExpXS" realSymbol="5.3"/>
        <argument xsi:type="xocl:RealLiteralExpXS" realSymbol="5.3"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="realIsLessEqualReal-False" constrainedElement="Plugin">
    <specification body="5.3 &lt;= 5.2">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="&lt;=">
        <source xsi:type="xocl:RealLiteralExpXS" realSymbol="5.3"/>
        <argument xsi:type="xocl:RealLiteralExpXS" realSymbol="5.2"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="realIsLessThanReal-True" constrainedElement="Plugin">
    <specification body="5.2 &lt; 5.3">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="&lt;">
        <source xsi:type="xocl:RealLiteralExpXS" realSymbol="5.2"/>
        <argument xsi:type="xocl:RealLiteralExpXS" realSymbol="5.3"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="realIsLessThanReal-False" constrainedElement="Plugin">
    <specification body="5.3 &lt; 5.3">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="&lt;">
        <source xsi:type="xocl:RealLiteralExpXS" realSymbol="5.3"/>
        <argument xsi:type="xocl:RealLiteralExpXS" realSymbol="5.3"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="realMaxReal" constrainedElement="Plugin">
    <specification body="max(5.3, 5.2)">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="max">
        <source xsi:type="xocl:RealLiteralExpXS" realSymbol="5.3"/>
        <argument xsi:type="xocl:RealLiteralExpXS" realSymbol="5.2"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="realMaxInteger" constrainedElement="Plugin">
    <specification body="max(5.3, 5)">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="max">
        <source xsi:type="xocl:RealLiteralExpXS" realSymbol="5.3"/>
        <argument xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="5"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="realMinReal" constrainedElement="Plugin">
    <specification body="min(5.3, 5.2)">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="min">
        <source xsi:type="xocl:RealLiteralExpXS" realSymbol="5.3"/>
        <argument xsi:type="xocl:RealLiteralExpXS" realSymbol="5.2"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="realMinInteger" constrainedElement="Plugin">
    <specification body="min(5.3, 5)">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="min">
        <source xsi:type="xocl:RealLiteralExpXS" realSymbol="5.3"/>
        <argument xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="5"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="integerAbs" constrainedElement="Plugin">
    <specification body="abs(-5)">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="abs">
        <source xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="-5"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="integerNegative" constrainedElement="Plugin">
    <specification body="negative(5)">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="-">
        <source xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="5"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="integerAddInteger" constrainedElement="Plugin">
    <specification body="5 + 5">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="+">
        <source xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="5"/>
        <argument xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="5"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="integerAddReal" constrainedElement="Plugin">
    <specification body="5 + 5.0">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="+">
        <source xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="5"/>
        <argument xsi:type="xocl:RealLiteralExpXS" realSymbol="5.0"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="integerSubtractInteger" constrainedElement="Plugin">
    <specification body="5 - 4">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="-">
        <source xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="5"/>
        <argument xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="4"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="integerDivideInteger" constrainedElement="Plugin">
    <specification body="5 / 4">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="/">
        <source xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="5"/>
        <argument xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="4"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="integerDivInteger" constrainedElement="Plugin">
    <specification body="5 div 3">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="div">
        <source xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="5"/>
        <argument xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="3"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="integerModInteger" constrainedElement="Plugin">
    <specification body="5 mod 3">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="mod">
        <source xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="5"/>
        <argument xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="3"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="integerMultiplyInteger" constrainedElement="Plugin">
    <specification body="5 * 4">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="*">
        <source xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="5"/>
        <argument xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="4"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="integerMaxInteger" constrainedElement="Plugin">
    <specification body="max(5, 4)">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="max">
        <source xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="5"/>
        <argument xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="4"/>
      </bodyExpression>
    </specification>
  </ownedRule>
  <ownedRule name="integerMinInteger" constrainedElement="Plugin">
    <specification body="min(5, 4)">
      <bodyExpression xsi:type="xocl:ModelOperationCallExpXS" referredOperationName="min">
        <source xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="5"/>
        <argument xsi:type="xocl:IntegerLiteralExpXS" integerSymbol="4"/>
      </bodyExpression>
    </specification>
  </ownedRule>
</xocl:NamespaceXS>
