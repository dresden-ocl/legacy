--
----------------------------------------------------------------------
-- Membership
----------------------------------------------------------------------
package RoyalLoyal

/*context Membership 
   inv correctCard: participants.cards->includes(self.card)

context Membership 
  def : getCurrentLevelName() : String = currentLevel.name

context Membership 
 inv levelAndColor: 
 currentLevel.name = 'Silver' implies card.color = Color::silver
 and 
 currentLevel.name = 'Gold' implies card.color = Color::gold

context Membership 
  inv noEarnings: programs.partners.deliveredServices 
               ->forAll(pointsEarned = 0) implies account
                            ->isEmpty()

 context Membership 
 inv noEarnings2: programs.isSaving 
      implies account->isEmpty()

context Membership 
   inv: account.points >= 0 or account->isEmpty()

context Membership 
  inv: participants.cards.membership->includes( self )

context Membership 
 inv: programs.levels->includes( currentLevel )

context Membership 
  inv: account->isEmpty() 

context Membership 
  inv: programs.levels ->includes(currentLevel)
  
context Customer 
   def: cardsForProgram(p: LoyaltyProgram) : Sequence(CustomerCard) 
    	= p.membership.card
    	
context Customer 
   inv: Membership.account->select(a:LoyaltyAccount| a.points > 0 )
         ->isEmpty()

 context Customer 
   inv: Membership.account->reject( not (points > 0) )->isEmpty() 
   inv ANY: self.membership.account->any( number < 10000 )->isEmpty()
   
context LoyaltyAccount::getCustomerName() : String 
   body: Membership.card.owner.name

context LoyaltyProgram 
  inv knownServiceLevel: levels->includesAll(Membership.currentLevel)
  
context LoyaltyProgram 
   inv noAccounts: partners.deliveredServices->forAll( 
			  pointsEarned = 0 and pointsBurned = 0 ) 
				  implies Membership.account->isEmpty()
				  
context LoyaltyProgram::addTransaction( accNr: Integer, 
 	pName: String, servId: Integer, amnt: Real, 
	d: Date ) : Boolean
  post: let acc : LoyaltyAccount = 
				  Membership.account->select( a | a.number = accNr )->any(true), 
			newT : Transaction = 
				  partners-> select(p | p.name = pName).deliveredServices 
					  ->select(s | s.serviceNr = servId).transactions 
						  ->select( date = d and amount = amnt )->any(true), 
			card : CustomerCard = 
				  Membership->select( m | m.account.number = accNr ).card->any(true)
	    in acc.points = acc.points@pre + newT.points and 
		   newT.oclIsNew() and 
		   amnt = 0 implies newT.oclIsTypeOf( Burning ) and 
		   amnt > 0 implies newT.oclIsTypeOf( Earning ) and 
		   acc.transactions - acc.transactions@pre = Set{ newT } and 
		   card.transactions - card.transactions@pre = Set{ newT }
		   
context LoyaltyProgram 
   inv: levels->includesAll( Membership.currentLevel ) 
   
context LoyaltyProgram 
   inv: self.Membership.account
               ->isUnique( acc: LoyaltyAccount | acc.number )
               
context LoyaltyProgram 
   inv: self.Membership.account->one( number < 10000 )
   
-- Navigation over path expressions/association class
context Transaction::program() : LoyaltyProgram 
   post: result = self.card.membership.programs
endpackage